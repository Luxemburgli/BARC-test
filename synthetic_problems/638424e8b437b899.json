{
  "uid": "638424e8b437b899",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng14_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          6,
          9,
          8,
          5,
          6,
          7,
          9,
          3
        ],
        [
          3,
          7,
          7,
          9,
          7,
          5,
          7,
          1
        ],
        [
          6,
          5,
          8,
          7,
          4,
          8,
          2,
          7
        ],
        [
          7,
          3,
          7,
          1,
          8,
          3,
          3,
          3
        ],
        [
          8,
          4,
          5,
          9,
          8,
          9,
          7,
          4
        ],
        [
          4,
          3,
          7,
          8,
          5,
          6,
          6,
          8
        ],
        [
          5,
          9,
          1,
          8,
          8,
          4,
          4,
          5
        ],
        [
          4,
          6,
          1,
          3,
          8,
          9,
          8,
          1
        ]
      ],
      "output": [
        [
          6,
          9,
          8,
          5,
          7,
          7,
          7,
          3
        ],
        [
          6,
          7,
          8,
          7,
          7,
          7,
          7,
          7
        ],
        [
          6,
          5,
          7,
          7,
          4,
          8,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          8,
          8,
          3,
          3
        ],
        [
          4,
          3,
          7,
          8,
          9,
          9,
          7,
          4
        ],
        [
          4,
          4,
          7,
          8,
          8,
          6,
          6,
          8
        ],
        [
          4,
          9,
          1,
          8,
          8,
          4,
          4,
          5
        ],
        [
          4,
          6,
          1,
          8,
          8,
          8,
          8,
          1
        ]
      ]
    },
    {
      "input": [
        [
          4,
          1,
          2,
          3,
          6,
          1,
          5
        ],
        [
          2,
          7,
          9,
          1,
          8,
          9,
          5
        ],
        [
          9,
          9,
          8,
          8,
          9,
          6,
          7
        ],
        [
          1,
          7,
          9,
          6,
          3,
          3,
          4
        ],
        [
          4,
          7,
          4,
          1,
          8,
          8,
          6
        ],
        [
          7,
          1,
          3,
          2,
          6,
          1,
          8
        ],
        [
          2,
          8,
          5,
          6,
          5,
          4,
          8
        ]
      ],
      "output": [
        [
          4,
          1,
          2,
          3,
          6,
          1,
          5
        ],
        [
          2,
          9,
          9,
          8,
          9,
          9,
          5
        ],
        [
          9,
          7,
          9,
          8,
          8,
          9,
          7
        ],
        [
          1,
          9,
          9,
          6,
          3,
          3,
          4
        ],
        [
          7,
          4,
          4,
          1,
          8,
          8,
          8
        ],
        [
          7,
          7,
          3,
          6,
          6,
          8,
          8
        ],
        [
          2,
          8,
          5,
          5,
          6,
          4,
          8
        ]
      ]
    },
    {
      "input": [
        [
          9,
          4,
          4,
          2,
          3,
          1,
          7,
          8,
          6
        ],
        [
          7,
          5,
          6,
          1,
          8,
          4,
          7,
          3,
          8
        ],
        [
          1,
          1,
          9,
          3,
          7,
          5,
          2,
          4,
          6
        ],
        [
          8,
          7,
          5,
          6,
          8,
          9,
          4,
          9,
          6
        ],
        [
          1,
          5,
          3,
          5,
          1,
          1,
          8,
          7,
          8
        ],
        [
          2,
          9,
          3,
          1,
          3,
          4,
          3,
          1,
          4
        ],
        [
          4,
          1,
          7,
          4,
          9,
          9,
          6,
          8,
          1
        ]
      ],
      "output": [
        [
          9,
          4,
          4,
          2,
          3,
          1,
          7,
          8,
          8
        ],
        [
          7,
          5,
          6,
          1,
          8,
          4,
          7,
          8,
          6
        ],
        [
          1,
          1,
          9,
          3,
          8,
          5,
          4,
          4,
          6
        ],
        [
          1,
          5,
          5,
          5,
          8,
          9,
          9,
          4,
          6
        ],
        [
          1,
          5,
          5,
          1,
          1,
          1,
          8,
          8,
          8
        ],
        [
          2,
          9,
          3,
          3,
          1,
          3,
          3,
          1,
          1
        ],
        [
          4,
          1,
          7,
          4,
          9,
          9,
          6,
          1,
          1
        ]
      ]
    },
    {
      "input": [
        [
          6,
          5,
          3,
          6,
          9,
          5,
          9,
          1,
          6
        ],
        [
          5,
          6,
          5,
          6,
          9,
          9,
          7,
          6,
          6
        ],
        [
          6,
          8,
          9,
          4,
          1,
          7,
          7,
          6,
          5
        ],
        [
          1,
          2,
          6,
          9,
          2,
          8,
          7,
          1,
          7
        ],
        [
          4,
          8,
          3,
          5,
          7,
          2,
          6,
          3,
          3
        ],
        [
          9,
          7,
          8,
          8,
          4,
          1,
          3,
          2,
          8
        ],
        [
          8,
          9,
          7,
          9,
          4,
          1,
          6,
          1,
          4
        ],
        [
          5,
          5,
          2,
          8,
          1,
          2,
          4,
          7,
          1
        ],
        [
          5,
          8,
          7,
          3,
          8,
          3,
          6,
          2,
          4
        ]
      ],
      "output": [
        [
          5,
          6,
          5,
          6,
          9,
          9,
          9,
          6,
          6
        ],
        [
          6,
          5,
          6,
          6,
          9,
          7,
          9,
          6,
          6
        ],
        [
          6,
          6,
          9,
          9,
          1,
          7,
          7,
          6,
          6
        ],
        [
          1,
          8,
          9,
          9,
          2,
          8,
          7,
          7,
          7
        ],
        [
          4,
          8,
          8,
          5,
          2,
          2,
          3,
          3,
          3
        ],
        [
          9,
          7,
          7,
          8,
          4,
          1,
          6,
          3,
          8
        ],
        [
          9,
          7,
          9,
          8,
          1,
          1,
          1,
          1,
          1
        ],
        [
          5,
          5,
          7,
          8,
          8,
          1,
          6,
          1,
          4
        ],
        [
          5,
          5,
          7,
          8,
          3,
          3,
          6,
          2,
          4
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# colors\n# neighbor analysis\n\n# description:\n# In the input grid, each pixel color is updated to the most frequent color of its cardinal neighbors (top, bottom, left, and right).\n# If there are multiple colors with the same frequency, the pixel keeps its original color.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid.copy()\n    rows, cols = input_grid.shape\n    for x in range(rows):\n        for y in range(cols):\n            neighbors = []\n            if x > 0:\n                neighbors.append(input_grid[x-1, y])\n            if x < rows - 1:\n                neighbors.append(input_grid[x+1, y])\n            if y > 0:\n                neighbors.append(input_grid[x, y-1])\n            if y < cols - 1:\n                neighbors.append(input_grid[x, y+1])\n            \n            if neighbors:\n                color_counts = {}\n                for color in neighbors:\n                    if color in color_counts:\n                        color_counts[color] += 1\n                    else:\n                        color_counts[color] = 1\n                most_frequent_color = max(color_counts, key=color_counts.get)\n                # Check if there's a tie\n                if list(color_counts.values()).count(color_counts[most_frequent_color]) == 1:\n                    output_grid[x, y] = most_frequent_color\n    return output_grid\n\n\ndef generate_input() -> np.ndarray:\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    input_grid = np.random.choice(list(Color.NOT_BLACK), size=(n, m))\n    return input_grid"
}