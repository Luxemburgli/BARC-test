{
  "uid": "54e8555f9b898bbf",
  "annotations": {
    "example": "good",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng14_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          9,
          9,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          9,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          9,
          9,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          8,
          8,
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          8,
          8
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          8,
          0
        ]
      ],
      "output": [
        [
          9,
          9,
          9,
          0,
          8,
          0,
          8,
          8
        ],
        [
          0,
          9,
          9,
          0,
          8,
          0,
          8,
          0
        ],
        [
          9,
          9,
          9,
          8,
          8,
          8,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5
        ],
        [
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          9,
          9,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          9,
          9,
          0,
          3,
          3,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          3,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          3,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          5,
          5,
          6,
          0,
          9,
          9,
          3,
          3
        ],
        [
          5,
          5,
          5,
          6,
          6,
          0,
          9,
          3,
          3
        ],
        [
          0,
          0,
          0,
          0,
          6,
          9,
          9,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          7,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0,
          0,
          0,
          7,
          7,
          7,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          0
        ],
        [
          0,
          0,
          0,
          5,
          5,
          0,
          6,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          7,
          0,
          0,
          0,
          1,
          1,
          6,
          0,
          0,
          5,
          5
        ],
        [
          7,
          7,
          7,
          1,
          1,
          1,
          6,
          6,
          6,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          1,
          1,
          6,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          6,
          6,
          6,
          2,
          2,
          2
        ],
        [
          6,
          6,
          6,
          0,
          2,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# Symmetry, Object detection, Cropping\n\n# description:\n# In the input grid, you will see several objects of different colors scattered around a black grid.\n# Your task is to find all objects with reflective symmetry. \n# Then crop the objects to their smallest bounding boxes and place them at the top of the grid.\n# Arrange these objects horizontally in the output grid, without any gaps in-between.\n\ndef main(input_grid):\n    # Find all objects in the grid\n    objects = find_connected_components(input_grid, background=Color.BLACK, connectivity=8, monochromatic=False)\n\n    # Filter objects that have reflective symmetry\n    symmetrical_objects = []\n    for obj in objects:\n        symmetries = detect_mirror_symmetry(obj, ignore_colors=[Color.BLACK])\n        if symmetries:\n            symmetrical_objects.append(crop(obj, background=Color.BLACK))\n\n    # Create a large enough output grid\n    output_grid_height = max([obj.shape[0] for obj in symmetrical_objects]) if symmetrical_objects else 1\n    total_width = sum([obj.shape[1] for obj in symmetrical_objects]) if symmetrical_objects else 1\n    output_grid = np.full((output_grid_height, total_width), Color.BLACK)\n\n    # Add the symmetrical objects to the output grid, horizontally concatenated\n    current_x = 0\n    for obj in symmetrical_objects:\n        h, w = obj.shape\n        output_grid[:h, current_x:current_x+w] = obj\n        current_x += w\n\n    return output_grid\n\n\ndef generate_input():\n    # Create a 10x10 empty grid (black background)\n    n, m = 10, 10\n    grid = np.full((n, m), Color.BLACK, dtype=int)\n\n    # Generate random objects with or without symmetry\n    symmetrical_choices = [True, False]\n    for _ in range(np.random.randint(2, 5)):\n        width, height = np.random.randint(2, 4, size=2)\n        is_symmetric = np.random.choice(symmetrical_choices)\n\n        # Select a color for the object\n        obj_color = random.choice(Color.NOT_BLACK)\n\n        # Create a random sprite\n        sprite = random_sprite(width, height, color_palette=[obj_color], symmetry=('horizontal' if is_symmetric else 'not_symmetric'))\n\n        # Find a random free location for the object in the grid, ensure no overlap\n        x, y = random_free_location_for_object(grid, sprite, background=Color.BLACK, padding=1)\n        if x is not None and y is not None:\n            blit(grid, sprite, x, y)\n\n    return grid"
}