{
  "uid": "a0bf0d7f3ed9bc79",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng0_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          0
        ],
        [
          1,
          0,
          1,
          0
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          0,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          0
        ],
        [
          2,
          2,
          0,
          2
        ],
        [
          0,
          0,
          2,
          0
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          4,
          4,
          0,
          0
        ],
        [
          0,
          0,
          4,
          0
        ],
        [
          0,
          0,
          4,
          0
        ],
        [
          4,
          4,
          4,
          4
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          9,
          9,
          9,
          9
        ],
        [
          0,
          0,
          9,
          9
        ],
        [
          0,
          0,
          9,
          0
        ],
        [
          9,
          0,
          9,
          0
        ]
      ],
      "output": [
        [
          4,
          2,
          2,
          2
        ],
        [
          2,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          2
        ],
        [
          1,
          4,
          1,
          4
        ]
      ]
    },
    {
      "input": [
        [
          0,
          1,
          1,
          0
        ],
        [
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          0
        ],
        [
          1,
          0,
          1,
          0
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          2,
          2,
          2,
          2
        ],
        [
          0,
          0,
          2,
          2
        ],
        [
          2,
          0,
          2,
          0
        ],
        [
          0,
          0,
          0,
          2
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          0,
          0,
          4,
          0
        ],
        [
          0,
          4,
          0,
          0
        ],
        [
          0,
          4,
          4,
          4
        ],
        [
          4,
          4,
          0,
          0
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          0,
          9,
          0,
          0
        ],
        [
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          0,
          9
        ],
        [
          0,
          0,
          0,
          9
        ]
      ],
      "output": [
        [
          2,
          1,
          1,
          2
        ],
        [
          1,
          1,
          1,
          2
        ],
        [
          2,
          1,
          1,
          4
        ],
        [
          1,
          4,
          1,
          2
        ]
      ]
    },
    {
      "input": [
        [
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          0,
          0
        ],
        [
          0,
          0,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          2,
          2,
          2,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          2,
          0,
          2,
          2
        ],
        [
          0,
          2,
          0,
          2
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          0,
          4,
          0,
          4
        ],
        [
          4,
          0,
          4,
          4
        ],
        [
          0,
          0,
          0,
          4
        ],
        [
          4,
          4,
          0,
          0
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          9,
          9,
          9,
          9
        ],
        [
          0,
          0,
          9,
          0
        ],
        [
          9,
          0,
          0,
          0
        ],
        [
          0,
          9,
          0,
          9
        ]
      ],
      "output": [
        [
          1,
          1,
          1,
          4
        ],
        [
          4,
          1,
          4,
          4
        ],
        [
          2,
          0,
          1,
          2
        ],
        [
          4,
          1,
          1,
          1
        ]
      ]
    },
    {
      "input": [
        [
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          2,
          0,
          0,
          2
        ],
        [
          2,
          2,
          2,
          2
        ],
        [
          0,
          0,
          2,
          2
        ],
        [
          2,
          0,
          0,
          2
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          0,
          4,
          0,
          0
        ],
        [
          4,
          4,
          0,
          0
        ],
        [
          4,
          4,
          0,
          4
        ],
        [
          0,
          0,
          4,
          4
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          0,
          0,
          9,
          9
        ],
        [
          9,
          9,
          0,
          9
        ],
        [
          9,
          0,
          0,
          9
        ],
        [
          9,
          0,
          9,
          9
        ]
      ],
      "output": [
        [
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          2,
          1
        ],
        [
          4,
          4,
          2,
          2
        ],
        [
          2,
          1,
          1,
          2
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# objects, occlusion, alignment\n\n# description:\n# In the input you have four regions separated by green vertical bars. Each region is rectangular, arranged horizontally:\n# left (blue pattern), center-left (red pattern), center-right (yellow pattern), and right (maroon pattern).\n# To make the output, align the vertical heights of all patterns to match the height of the blue pattern.\n# Then overlay the regions sequentially (right to left) with colors as follows:\n# maroon -> yellow -> red -> blue.\n\ndef main(input_grid):\n    # Find the vertical green bars that separate the sections\n    green_bars = np.where(input_grid == Color.GREEN)\n\n    # Get unique x-coordinates of the green bars\n    green_bars_x = np.unique(green_bars[0])\n\n    # Define start and end indices for each section\n    start_idx = np.insert(green_bars_x + 1, 0, 0)\n    end_idx = np.append(green_bars_x, input_grid.shape[0])\n\n    # Extract each pattern region\n    blue_pattern = input_grid[start_idx[0]:end_idx[0], :]\n    red_pattern = input_grid[start_idx[1]:end_idx[1], :]\n    yellow_pattern = input_grid[start_idx[2]:end_idx[2], :]\n    maroon_pattern = input_grid[start_idx[3]:end_idx[3], :]\n\n    # Determine the output grid height (same as blue pattern)\n    output_height = blue_pattern.shape[0]\n\n    # Initialize output grid with the same shape as input grid but only the height of blue pattern\n    output_grid = np.full((output_height, input_grid.shape[1]), Color.BLACK, dtype=int)\n\n    # Create a function to align vertically any pattern height with that of blue pattern height\n    def align_pattern_height(pattern, target_height):\n        aligned_pattern = np.full((target_height, pattern.shape[1]), Color.BLACK, dtype=int)\n        min_height = min(target_height, pattern.shape[0])\n        aligned_pattern[:min_height, :] = pattern[:min_height, :]\n        return aligned_pattern\n\n    # Align patterns\n    red_pattern = align_pattern_height(red_pattern, output_height)\n    yellow_pattern = align_pattern_height(yellow_pattern, output_height)\n    maroon_pattern = align_pattern_height(maroon_pattern, output_height)\n\n    # Overlay patterns: maroon -> yellow -> red -> blue\n    output_grid = np.where(maroon_pattern != Color.BLACK, maroon_pattern, output_grid)\n    output_grid = np.where(yellow_pattern != Color.BLACK, yellow_pattern, output_grid)\n    output_grid = np.where(red_pattern != Color.BLACK, red_pattern, output_grid)\n    output_grid = np.where(blue_pattern != Color.BLACK, blue_pattern, output_grid)\n\n    return output_grid\n\ndef generate_input():\n    # Define a green divider for sectional splits\n    green_divider = np.full((1, 4), Color.GREEN, dtype=int)\n\n    # Generate random sections with scattered pixels of respective colors\n    def generate_section(color):\n        section = np.zeros((4, 4), dtype=int)\n        for _ in range(12):\n            x, y = np.random.randint(section.shape[1]), np.random.randint(section.shape[0])\n            section[x, y] = color\n        return section\n\n    # Generate each colored section\n    blue_section = generate_section(Color.BLUE)\n    red_section = generate_section(Color.RED)\n    yellow_section = generate_section(Color.YELLOW)\n    maroon_section = generate_section(Color.MAROON)\n\n    # Concatenate these sections with green dividers\n    grid = np.vstack([blue_section, green_divider, red_section, green_divider, yellow_section, green_divider, maroon_section])\n\n    return grid"
}