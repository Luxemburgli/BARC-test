{
  "uid": "1a14e8f3f5c255f5",
  "annotations": {
    "example": "bad",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          9,
          9
        ],
        [
          9,
          0,
          0,
          9,
          0
        ],
        [
          9,
          9,
          9,
          0,
          9
        ],
        [
          0,
          9,
          9,
          0,
          9
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          9,
          9,
          9,
          0
        ],
        [
          9,
          9,
          0,
          0,
          9
        ],
        [
          1,
          1,
          1,
          1,
          1
        ],
        [
          9,
          0,
          9,
          0,
          9
        ],
        [
          9,
          0,
          9,
          9,
          9
        ],
        [
          9,
          9,
          0,
          9,
          0
        ],
        [
          9,
          9,
          0,
          0,
          0
        ],
        [
          9,
          9,
          9,
          9,
          0
        ],
        [
          9,
          9,
          9,
          0,
          9
        ],
        [
          9,
          9,
          9,
          0,
          9
        ]
      ],
      "output": [
        [
          8,
          6,
          8,
          8,
          0
        ],
        [
          0,
          6,
          8,
          6,
          8
        ],
        [
          0,
          6,
          8,
          8,
          8
        ],
        [
          8,
          6,
          8,
          6,
          8
        ],
        [
          8,
          8,
          8,
          8,
          6
        ],
        [
          8,
          6,
          6,
          8,
          8
        ],
        [
          0,
          6,
          8,
          6,
          6
        ]
      ]
    },
    {
      "input": [
        [
          9,
          0,
          0,
          0,
          0,
          9,
          9
        ],
        [
          0,
          0,
          0,
          0,
          9,
          9,
          9
        ],
        [
          9,
          0,
          0,
          9,
          9,
          9,
          0
        ],
        [
          9,
          0,
          9,
          9,
          9,
          0,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          9,
          9,
          9,
          9,
          9,
          0,
          9
        ],
        [
          9,
          0,
          9,
          9,
          9,
          9,
          9
        ],
        [
          0,
          0,
          0,
          0,
          9,
          9,
          9
        ],
        [
          9,
          0,
          9,
          0,
          0,
          9,
          9
        ]
      ],
      "output": [
        [
          0,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          8,
          6,
          8,
          8,
          6,
          6,
          6
        ],
        [
          8,
          6,
          6,
          8,
          6,
          6,
          8
        ],
        [
          0,
          6,
          6,
          8,
          8,
          8,
          8
        ]
      ]
    },
    {
      "input": [
        [
          9,
          0,
          0,
          0,
          0,
          9,
          9,
          0
        ],
        [
          0,
          9,
          0,
          9,
          0,
          9,
          9,
          9
        ],
        [
          9,
          0,
          9,
          9,
          9,
          0,
          0,
          0
        ],
        [
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          9
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          9,
          0,
          9,
          0,
          0,
          9,
          9,
          0
        ],
        [
          9,
          0,
          0,
          0,
          0,
          9,
          9,
          0
        ],
        [
          9,
          0,
          9,
          0,
          0,
          0,
          0,
          0
        ],
        [
          9,
          9,
          0,
          0,
          9,
          9,
          9,
          0
        ]
      ],
      "output": [
        [
          6,
          6,
          8,
          0,
          6,
          0,
          6,
          0
        ],
        [
          8,
          8,
          6,
          8,
          6,
          6,
          0,
          8
        ],
        [
          6,
          6,
          6,
          8,
          8,
          6,
          6,
          6
        ],
        [
          8,
          8,
          8,
          6,
          8,
          8,
          8,
          8
        ]
      ]
    },
    {
      "input": [
        [
          0,
          9,
          9,
          0,
          9,
          0
        ],
        [
          9,
          0,
          0,
          9,
          9,
          9
        ],
        [
          0,
          0,
          0,
          0,
          9,
          0
        ],
        [
          9,
          0,
          0,
          9,
          0,
          0
        ],
        [
          0,
          9,
          0,
          9,
          9,
          0
        ],
        [
          9,
          9,
          0,
          9,
          9,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          9,
          0,
          9,
          9
        ],
        [
          9,
          9,
          0,
          0,
          0,
          0
        ],
        [
          9,
          0,
          0,
          9,
          0,
          9
        ],
        [
          9,
          0,
          0,
          9,
          9,
          0
        ],
        [
          0,
          0,
          0,
          9,
          0,
          9
        ],
        [
          9,
          0,
          9,
          9,
          9,
          9
        ]
      ],
      "output": [
        [
          6,
          8,
          6,
          6,
          6,
          8
        ],
        [
          6,
          8,
          6,
          8,
          8,
          8
        ],
        [
          8,
          0,
          6,
          8,
          8,
          8
        ],
        [
          6,
          6,
          6,
          6,
          8,
          6
        ],
        [
          6,
          8,
          6,
          6,
          8,
          8
        ],
        [
          6,
          8,
          8,
          6,
          6,
          8
        ]
      ]
    }
  ],
  "code": "import numpy as np\nfrom typing import *\nfrom common import *\n\n# concepts:\n# bitmasks with separator, boolean logical operations, Coloring diagonal pixels, sprites\n\n# description:\n# In the input, you will see two maroon bitmasks separated by a blue vertical bar.\n# To make the output, find the logical XOR of the two bitmasks and color the pixels of the result teal.\n# Then color all the diagonal pixels around the teal pixels (result of the XOR) that are still black as pink.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the blue vertical bar. Vertical means constant X\n    for x_bar in range(input_grid.shape[0]):\n        if np.all(input_grid[x_bar, :] == Color.BLUE):\n            break\n\n    left_mask = input_grid[:x_bar, :]\n    right_mask = input_grid[x_bar+1:, :]\n\n    # Perform XOR operation on the two masks\n    xor_result = (left_mask != Color.MAROON) ^ (right_mask != Color.MAROON)\n\n    # Initialize the output grid with black\n    output_grid = np.zeros_like(left_mask)\n\n    # Color the XOR result pixels teal\n    output_grid[xor_result] = Color.TEAL\n\n    # Create diagonal directions\n    diagonal_deltas = [(1, 1), (-1, 1), (1, -1), (-1, -1)]\n\n    # Color diagonal pixels around the teal pixels pink if they are black\n    for x in range(output_grid.shape[0]):\n        for y in range(output_grid.shape[1]):\n            if output_grid[x, y] == Color.TEAL:\n                for dx, dy in diagonal_deltas:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < output_grid.shape[0] and 0 <= ny < output_grid.shape[1]:\n                        if output_grid[nx, ny] == Color.BLACK:\n                            output_grid[nx, ny] = Color.PINK\n    \n    return output_grid\n\n\ndef generate_input() -> np.ndarray:\n    # create a pair of maroon bitmasks\n    width, height = np.random.randint(2, 10), np.random.randint(2, 10)\n\n    grid1 = np.zeros((width, height), dtype=int)\n    grid2 = np.zeros((width, height), dtype=int)\n\n    for x in range(width):\n        for y in range(height):\n            grid1[x, y] = np.random.choice([Color.MAROON, Color.BLACK])\n            grid2[x, y] = np.random.choice([Color.MAROON, Color.BLACK])\n    \n    # create a blue vertical bar\n    bar = np.zeros((1, height), dtype=int)\n    bar[0, :] = Color.BLUE\n\n    grid = np.concatenate((grid1, bar, grid2), axis=0)\n\n    return grid"
}