{
  "uid": "27582b1cc7608c24",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng0_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          6,
          0,
          6,
          0,
          0,
          0,
          0
        ],
        [
          6,
          6,
          6,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          6,
          0,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          0
        ],
        [
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6
        ],
        [
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          0,
          6
        ]
      ]
    },
    {
      "input": [
        [
          7,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          7,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          7
        ],
        [
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          7,
          7
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          7,
          7
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          7
        ]
      ]
    },
    {
      "input": [
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          5
        ],
        [
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          5
        ],
        [
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ]
      ]
    },
    {
      "input": [
        [
          6,
          6,
          0,
          0,
          0
        ],
        [
          0,
          6,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          6
        ],
        [
          0,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          0
        ],
        [
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          6
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# patterns, copying, positioning, rotation\n\n# description:\n# In the input, you will see a pattern of pixels in the top left corner of the grid. The pattern is enclosed in a rectangular region with all pixels the same color (not black).\n# To make the output, copy the pattern to each of the four corners of the grid, rotating each pattern to match the corner's orientation. The output grid will be twice the size of the input grid, minus one pixel in each dimension.\n\ndef main(input_grid):\n    # get the patterns from the input\n    objects = find_connected_components(input_grid, connectivity=4, monochromatic=False)\n\n    # sort the objects by their size to find the pattern, assuming the largest object is the enclosing rectangle\n    sorted_objects = sorted(objects, key=lambda x: -np.count_nonzero(x))\n    pattern_object = sorted_objects[0]\n\n    # find the bounding box of the pattern\n    x, y, width, height = bounding_box(pattern_object)\n\n    # extract the pattern\n    pattern = input_grid[x:x+width, y:y+height]\n\n    # create the output grid, twice the size of the input grid minus one pixel in each dimension\n    output_grid = np.full((input_grid.shape[0] * 2 - 1, input_grid.shape[1] * 2 - 1), Color.BLACK)\n\n    # place the pattern in each corner, rotating appropriately\n    corners = [(0, 0), (0, output_grid.shape[1] - height), (output_grid.shape[0] - width, 0), (output_grid.shape[0] - width, output_grid.shape[1] - height)]\n    rotations = [0, 1, 3, 2]  # rotations required (0° for top left, 90° for top right, 270° for bottom left, 180° for bottom right)\n\n    for (cx, cy), rotation in zip(corners, rotations):\n        rotated_pattern = np.rot90(pattern, k=rotation)\n        blit_sprite(output_grid, rotated_pattern, cx, cy, background=Color.BLACK)\n\n    return output_grid\n    \n\ndef generate_input():\n    # make a random sized grid with black background\n    n = np.random.randint(5, 8)\n    m = np.random.randint(5, 8)\n    grid = np.zeros((n, m), dtype=int)\n\n    # select a color for the pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # select a size for the pattern so that there will be space for the enclosing rectangle\n    width = np.random.randint(2, (m - 2))\n    height = np.random.randint(2, (n - 2))\n\n    # create an enclosing rectangle with the chosen color\n    grid[0:height, 0:width] = color\n\n    # scatter random black pixels within the enclosing rectangle to form the pattern\n    num_patterns = np.random.randint(1, height * width // 2)\n    for _ in range(num_patterns):\n        x, y = np.random.randint(0, width), np.random.randint(0, height)\n        grid[y, x] = Color.BLACK\n\n    return grid"
}