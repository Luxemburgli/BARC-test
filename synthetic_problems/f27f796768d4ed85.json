{
  "uid": "f27f796768d4ed85",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          3,
          0,
          0,
          3,
          0,
          0,
          3,
          0
        ],
        [
          3,
          5,
          3,
          3,
          5,
          3,
          3,
          5,
          3
        ],
        [
          0,
          3,
          0,
          0,
          3,
          0,
          0,
          3,
          0
        ],
        [
          0,
          3,
          0,
          0,
          3,
          0,
          0,
          3,
          0
        ],
        [
          3,
          5,
          3,
          3,
          5,
          3,
          3,
          5,
          3
        ],
        [
          0,
          3,
          0,
          0,
          3,
          0,
          0,
          3,
          0
        ],
        [
          0,
          3,
          0,
          0,
          3,
          0,
          0,
          3,
          0
        ],
        [
          3,
          5,
          3,
          3,
          5,
          3,
          3,
          5,
          3
        ],
        [
          0,
          3,
          0,
          0,
          3,
          0,
          0,
          3,
          0
        ]
      ],
      "output": [
        [
          0,
          3,
          0
        ],
        [
          3,
          5,
          3
        ],
        [
          0,
          3,
          0
        ]
      ]
    },
    {
      "input": [
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8,
          8,
          5,
          5,
          8
        ]
      ],
      "output": [
        [
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8
        ],
        [
          8,
          5,
          5,
          8
        ]
      ]
    },
    {
      "input": [
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          3,
          0,
          2,
          2,
          3,
          0,
          2,
          2,
          3,
          0,
          2
        ],
        [
          3,
          3,
          0,
          0,
          3,
          3,
          0,
          0,
          3,
          3,
          0,
          0
        ],
        [
          0,
          9,
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          9,
          0,
          0
        ],
        [
          0,
          9,
          0,
          0,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          3,
          3,
          0,
          0,
          2,
          3,
          0,
          2,
          2,
          3,
          0,
          2
        ],
        [
          2,
          3,
          0,
          2,
          3,
          3,
          0,
          0,
          3,
          3,
          0,
          0
        ],
        [
          2,
          2,
          2,
          2,
          0,
          9,
          0,
          0,
          0,
          9,
          0,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          0,
          9,
          0,
          0
        ],
        [
          2,
          3,
          0,
          2,
          2,
          3,
          0,
          2,
          3,
          3,
          0,
          0
        ],
        [
          3,
          3,
          0,
          0,
          3,
          3,
          0,
          0,
          2,
          3,
          0,
          2
        ],
        [
          0,
          9,
          0,
          0,
          0,
          9,
          0,
          0,
          2,
          2,
          2,
          2
        ]
      ],
      "output": [
        [
          2,
          2,
          2,
          2
        ],
        [
          2,
          3,
          0,
          2
        ],
        [
          3,
          3,
          0,
          0
        ],
        [
          0,
          9,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4
        ]
      ],
      "output": [
        [
          4
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# patterns, translational symmetry, reflection, symmetry detection, positioning\n\n# description:\n# In the input, you will see a sprite repeated horizontally and vertically in a grid, and some of those repetitions might be reflected vertically.\n# To make the output, just extract the repeated sprite in its non-reflected form.\n\ndef main(input_grid):\n    # Find the period both horizontally and vertically\n    for period in range(1, input_grid.shape[0]):\n        # Extract the sprite and all of its repeated translated versions\n        sprite = input_grid[:period, :period]\n        repetitions = [\n            input_grid[i*period:(i+1)*period, j*period:(j+1)*period]\n            for i in range(input_grid.shape[0]//period)\n            for j in range(input_grid.shape[1]//period)\n        ]\n\n        # Check that every repetition matches the sprite or its vertical reflection\n        valid = True\n        for rep in repetitions:\n            reflections = [rep, np.flip(rep, 0)] # include vertical reflection\n            if not any([np.array_equal(sprite, r) for r in reflections]):\n                valid = False\n                break\n\n        if valid:\n            return sprite\n\n    assert False, \"No valid period found\"\n\ndef generate_input():\n    # Create the sprite to be duplicated; pick a trio of random colors\n    n = np.random.randint(2, 5)\n    sprite = random_sprite(n, n, color_palette=np.random.choice(list(Color.NOT_BLACK), 3, replace=False).tolist())\n    \n    # Generate random reflections of the sprite and create a larger grid\n    grid_size = 3 * n\n    grid = np.zeros((grid_size, grid_size), dtype=int)\n\n    for i in range(3):\n        for j in range(3):\n            if np.random.rand() > 0.5:\n                reflected_sprite = np.flip(sprite, 0)\n                blit_sprite(grid, reflected_sprite, x=i*n, y=j*n)\n            else:\n                blit_sprite(grid, sprite, x=i*n, y=j*n)\n\n    return grid"
}