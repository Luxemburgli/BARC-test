{
  "uid": "86678bdfa15bda7a",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_6_gpt-4o_temp1.00_maxtokens2048_rng0_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          8
        ],
        [
          8,
          0,
          0,
          7,
          0,
          4,
          0,
          3,
          8
        ],
        [
          8,
          3,
          0,
          0,
          0,
          4,
          0,
          2,
          8
        ],
        [
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          8
        ],
        [
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ]
      ],
      "output": [
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          4,
          9,
          1,
          9,
          6,
          9,
          8,
          8
        ],
        [
          8,
          9,
          0,
          9,
          0,
          6,
          0,
          4,
          8
        ],
        [
          8,
          0,
          0,
          0,
          0,
          9,
          0,
          3,
          8
        ],
        [
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          8,
          8
        ],
        [
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          8
        ],
        [
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          8
        ]
      ]
    },
    {
      "input": [
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0,
          7
        ],
        [
          7,
          6,
          0,
          0,
          0,
          7,
          7
        ],
        [
          7,
          0,
          4,
          0,
          0,
          0,
          7
        ],
        [
          7,
          8,
          0,
          0,
          0,
          0,
          7
        ],
        [
          7,
          9,
          0,
          0,
          0,
          0,
          7
        ],
        [
          7,
          9,
          0,
          0,
          0,
          0,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ]
      ],
      "output": [
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          2,
          6,
          1,
          1,
          1,
          7
        ],
        [
          7,
          9,
          1,
          0,
          0,
          1,
          7
        ],
        [
          7,
          8,
          0,
          0,
          0,
          0,
          7
        ],
        [
          7,
          8,
          0,
          0,
          0,
          0,
          7
        ],
        [
          7,
          1,
          0,
          0,
          0,
          0,
          7
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0,
          7
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0,
          7
        ]
      ]
    },
    {
      "input": [
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          5,
          7,
          0,
          0,
          0,
          0,
          1,
          5
        ],
        [
          5,
          0,
          0,
          0,
          6,
          0,
          0,
          5
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          5,
          0,
          9,
          0,
          0,
          3,
          0,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ],
      "output": [
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          1,
          8,
          0,
          2,
          4,
          7,
          5
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ]
    },
    {
      "input": [
        [
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          3,
          2,
          0,
          3,
          6
        ],
        [
          6,
          4,
          6,
          3,
          2,
          6
        ],
        [
          6,
          0,
          0,
          0,
          0,
          6
        ],
        [
          6,
          6,
          0,
          0,
          0,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      ],
      "output": [
        [
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          4,
          3,
          4,
          4,
          6
        ],
        [
          6,
          6,
          2,
          2,
          3,
          6
        ],
        [
          6,
          2,
          2,
          0,
          2,
          6
        ],
        [
          6,
          2,
          0,
          0,
          0,
          6
        ],
        [
          6,
          0,
          0,
          0,
          0,
          6
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color mapping, sliding objects, borders\n\n# description:\n# Input is a grid with colored dots scattered around and a border of a single color.\n# In the output, move each dot along its column up until it contacts the border, then change the color of each dot according to a color mapping.\n# border_removed_output_grid should be the border-removed output grid.\n\n# Color mapping\ncolor_map = {Color.RED : Color.GREEN,\n             Color.BLUE : Color.ORANGE,\n             Color.YELLOW : Color.PINK,\n             Color.TEAL : Color.MAROON,\n             Color.MAROON : Color.TEAL,\n             Color.GREEN : Color.YELLOW, \n             Color.ORANGE : Color.BLUE, \n             Color.PINK : Color.RED}\n\ndef main(input_grid):\n    # Copy input grid to output grid\n    output_grid = np.copy(input_grid)\n\n    # Identify the border color (assume the border is single color and consistent around the edge)\n    border_color = output_grid[0][0]\n\n    # Traverse through each column\n    for col in range(1, output_grid.shape[1] - 1):  # Avoid borders\n        for row in range(1, output_grid.shape[0]):  # Avoid borders\n            if output_grid[row, col] in color_map:\n                pixel_color = output_grid[row, col]\n                new_row = row\n\n                # Move the pixel up until it hits the border\n                while new_row > 0 and output_grid[new_row - 1, col] == Color.BLACK:\n                    new_row -= 1\n\n                # Replace with new color based on color mapping\n                output_grid[new_row, col] = color_map[pixel_color]\n                if row != new_row:\n                    # Set the old position to black\n                    output_grid[row, col] = Color.BLACK\n\n    return output_grid\n\ndef generate_input():\n    # Generate grid dimensions\n    n, m = np.random.randint(6, 10), np.random.randint(6, 10)\n    \n    # Initialize grid with BLACK color\n    grid = np.full((n, m), Color.BLACK)\n    \n    # Draw border with a random color\n    border_color = np.random.choice(list(Color.NOT_BLACK))\n    draw_line(grid, x=0, y=0, length=None, color=border_color, direction=(1,0))\n    draw_line(grid, x=0, y=0, length=None, color=border_color, direction=(0,1))\n    draw_line(grid, x=n-1, y=0, length=None, color=border_color, direction=(0,1))\n    draw_line(grid, x=0, y=m-1, length=None, color=border_color, direction=(1,0))\n\n    # Scatter random colored dots (avoiding the border)\n    for _ in range(np.random.randint(5, 10)):\n        x = np.random.randint(1, n-1)\n        y = np.random.randint(1, m-1)\n        color = np.random.choice(list(color_map.keys()))\n        grid[x, y] = color\n    \n    return grid"
}