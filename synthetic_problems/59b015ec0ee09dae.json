{
  "uid": "59b015ec0ee09dae",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          4,
          6,
          0,
          0,
          3
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          5,
          4,
          0,
          0,
          0
        ],
        [
          4,
          9,
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          4
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          0,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          0,
          3,
          5
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0
        ],
        [
          0,
          9,
          0
        ],
        [
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          4
        ],
        [
          0,
          7,
          0,
          0,
          4,
          0,
          0,
          0,
          0,
          1
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          2,
          0
        ],
        [
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          9,
          0,
          0,
          4,
          0,
          0,
          0,
          2,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          9,
          9,
          0,
          0,
          0,
          9
        ],
        [
          0,
          7,
          0,
          4,
          0,
          1,
          7,
          4,
          0,
          0
        ],
        [
          0,
          0,
          1,
          4,
          0,
          8,
          3,
          8,
          7,
          0
        ],
        [
          2,
          0,
          0,
          0,
          0,
          7,
          7,
          0,
          9,
          0
        ],
        [
          0,
          0,
          0,
          0,
          8,
          0,
          0,
          9,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0
        ],
        [
          0,
          3,
          0
        ],
        [
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          6,
          4,
          0,
          0,
          0,
          0,
          0,
          1,
          8
        ],
        [
          0,
          0,
          3,
          6,
          0,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          7,
          8,
          0,
          6,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          4,
          0,
          3,
          6,
          0,
          0,
          0,
          8
        ],
        [
          0,
          0,
          0,
          8,
          0,
          0,
          8,
          0,
          7,
          1
        ],
        [
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          1,
          5,
          0
        ],
        [
          0,
          7,
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          0
        ],
        [
          0,
          0,
          9,
          0,
          7,
          0,
          0,
          0,
          4,
          6
        ],
        [
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0
        ],
        [
          0,
          5,
          0
        ],
        [
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          8,
          9,
          7,
          0,
          7,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          6,
          5,
          1,
          0,
          0,
          0,
          0,
          4
        ],
        [
          1,
          0,
          0,
          1,
          0,
          2,
          0,
          9,
          0,
          0
        ],
        [
          0,
          0,
          0,
          6,
          6,
          0,
          0,
          9,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          8,
          0,
          0,
          6,
          0,
          0,
          9
        ],
        [
          0,
          0,
          4,
          0,
          5,
          8,
          8,
          0,
          5,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          6,
          0,
          5,
          0,
          0
        ],
        [
          9,
          0,
          1,
          0,
          5,
          0,
          0,
          5,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0
        ],
        [
          0,
          2,
          0
        ],
        [
          0,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# uniqueness, cropping, surrounding, counting\n\n# description:\n# In the input grid, you will see several colored squares.\n# One of the colors will occur only once in the entire grid.\n# Find the cell with this unique color and crop the smallest possible grid that contains this unique color.\n# In the output grid, add a border of black pixels around the cropped area to highlight it.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Plan:\n    # 1. Find the unique color by counting occurrences.\n    # 2. Find and extract the cell with this unique color.\n    # 3. Crop the smallest possible grid that contains this unique color.\n    # 4. Add a black border around the cropped grid.\n    \n    # Find the unique color\n    unique_color = None\n    for color in Color.NOT_BLACK:\n        if np.count_nonzero(input_grid == color) == 1:\n            unique_color = color\n            break\n    \n    assert unique_color is not None, \"There should be exactly one unique color.\"\n\n    # Crop the grid to contain only the unique color\n    color_mask = (input_grid == unique_color)\n    bounding_x, bounding_y, bounding_width, bounding_height = bounding_box(color_mask)\n    cropped_grid = input_grid[bounding_x:bounding_x + bounding_width, bounding_y:bounding_y + bounding_height]\n    \n    # Create a new grid with a border around the cropped grid\n    bordered_grid = np.full((cropped_grid.shape[0] + 2, cropped_grid.shape[1] + 2), Color.BLACK)\n    bordered_grid[1:-1, 1:-1] = cropped_grid\n\n    return bordered_grid\n\n\ndef generate_input() -> np.ndarray:\n    n, m = 10, 10\n    grid = np.zeros((n, m), dtype=int)\n\n    unique_color = random.choice(Color.NOT_BLACK)\n    non_border_cells = [(i, j) for i in range(1, n-1) for j in range(1, m-1)]\n    unique_cell = random.choice(non_border_cells)\n    grid[unique_cell] = unique_color\n\n    remaining_colors = [color for color in Color.NOT_BLACK if color != unique_color]\n\n    for remaining_color in remaining_colors:\n        frequency_of_this_color = random.choice([0, 2, 3, 4, 5, 6])\n        for _ in range(frequency_of_this_color):\n            empty_cells = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == Color.BLACK]\n            if not empty_cells:\n                break\n            x, y = random.choice(empty_cells)\n            grid[x, y] = remaining_color\n\n    return grid"
}