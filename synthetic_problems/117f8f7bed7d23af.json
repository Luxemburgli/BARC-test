{
  "uid": "117f8f7bed7d23af",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          5,
          1,
          3,
          2
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          1,
          3,
          2
        ],
        [
          5,
          1,
          3,
          2
        ],
        [
          2,
          3,
          1,
          5
        ],
        [
          5,
          1,
          3,
          2
        ],
        [
          2,
          3,
          1,
          5
        ]
      ]
    },
    {
      "input": [
        [
          5,
          2,
          8,
          9,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          2,
          8,
          9,
          1
        ],
        [
          5,
          2,
          8,
          9,
          1
        ],
        [
          1,
          9,
          8,
          2,
          5
        ],
        [
          5,
          2,
          8,
          9,
          1
        ],
        [
          1,
          9,
          8,
          2,
          5
        ]
      ]
    },
    {
      "input": [
        [
          9,
          2,
          3,
          8,
          6
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          9,
          2,
          3,
          8,
          6
        ],
        [
          9,
          2,
          3,
          8,
          6
        ],
        [
          6,
          8,
          3,
          2,
          9
        ],
        [
          9,
          2,
          3,
          8,
          6
        ],
        [
          6,
          8,
          3,
          2,
          9
        ]
      ]
    },
    {
      "input": [
        [
          4,
          7,
          3
        ],
        [
          0,
          0,
          0
        ],
        [
          0,
          0,
          0
        ],
        [
          0,
          0,
          0
        ],
        [
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          4,
          7,
          3
        ],
        [
          4,
          7,
          3
        ],
        [
          3,
          7,
          4
        ],
        [
          4,
          7,
          3
        ],
        [
          3,
          7,
          4
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# patterns, reflection, lines\n\n# description:\n# In the input, you will see a top row with a sequence of colored pixels.\n# To make the output, first reflect this sequence of colored pixels to create a mirrored row at the bottom.\n# Then, fill the rows between these two rows by alternating the original order and the inversed order of the colors in the top row.\n\ndef main(input_grid):\n    # Get the top row of colors\n    top_row_colors = input_grid[0, :]\n    \n    # Create the output grid with additional rows for the transformation\n    n, m = input_grid.shape\n    output_grid = np.zeros((n, m), dtype=int)\n    \n    # Copy the top row to the output grid\n    output_grid[0, :] = top_row_colors\n    \n    # Reflect the top row to the bottom row\n    output_grid[-1, :] = top_row_colors[::-1]\n    \n    # Fill the rows in between by alternating the order and inverse order of the top row colors\n    for i in range(1, n-1):\n        if i % 2 == 1:\n            output_grid[i, :] = top_row_colors\n        else:\n            output_grid[i, :] = top_row_colors[::-1]\n    \n    return output_grid\n\ndef generate_input():\n    # Decide the length of the top row of colors\n    length = np.random.randint(3, 6)\n    \n    # Create a random sequence of colors for the top row\n    top_row_colors = np.random.choice(list(Color.NOT_BLACK), length, replace=False)\n    \n    # Create the input grid with one row of colors at the top\n    grid = np.zeros((5, length), dtype=int)  # fixed height of 5 for simplicity; can be adjusted if needed\n    grid[0, :] = top_row_colors\n    \n    return grid"
}