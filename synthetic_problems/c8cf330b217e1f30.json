{
  "uid": "c8cf330b217e1f30",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          5,
          5,
          5,
          5,
          5,
          0
        ],
        [
          3,
          3,
          1,
          5,
          5,
          5,
          0
        ],
        [
          3,
          3,
          1,
          1,
          5,
          0,
          0
        ],
        [
          5,
          5,
          1,
          1,
          5,
          0,
          0
        ],
        [
          0,
          0,
          5,
          5,
          5,
          0,
          0
        ],
        [
          0,
          0,
          5,
          5,
          5,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          5,
          1,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          1,
          5,
          5,
          5,
          5,
          1,
          1
        ],
        [
          1,
          5,
          1,
          5,
          5,
          1,
          1
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          1,
          5,
          5,
          5,
          5
        ]
      ]
    },
    {
      "input": [
        [
          2,
          2,
          5,
          5,
          5,
          5,
          0
        ],
        [
          2,
          2,
          2,
          5,
          5,
          5,
          0
        ],
        [
          8,
          8,
          2,
          5,
          5,
          5,
          0
        ],
        [
          8,
          8,
          5,
          5,
          5,
          5,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          8,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ]
    },
    {
      "input": [
        [
          6,
          6,
          6,
          0,
          0,
          0,
          0
        ],
        [
          2,
          2,
          6,
          6,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          6,
          6,
          6,
          0
        ],
        [
          6,
          2,
          2,
          6,
          9,
          9,
          0
        ],
        [
          0,
          6,
          6,
          6,
          9,
          9,
          0
        ],
        [
          0,
          6,
          6,
          6,
          6,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          6,
          2,
          6,
          6,
          6,
          9,
          6
        ],
        [
          6,
          6,
          6,
          6,
          9,
          9,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          9,
          6
        ],
        [
          6,
          9,
          6,
          6,
          6,
          9,
          6
        ],
        [
          6,
          9,
          9,
          6,
          9,
          9,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          3,
          3,
          4,
          4,
          0
        ],
        [
          4,
          4,
          3,
          3,
          4,
          4,
          0
        ],
        [
          4,
          4,
          4,
          0,
          4,
          4,
          0
        ],
        [
          1,
          1,
          4,
          4,
          0,
          0,
          0
        ],
        [
          1,
          1,
          1,
          4,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          1,
          1,
          1,
          4,
          4,
          4,
          3
        ],
        [
          1,
          1,
          1,
          4,
          4,
          4,
          3
        ],
        [
          4,
          1,
          1,
          4,
          4,
          4,
          4
        ],
        [
          4,
          1,
          1,
          4,
          1,
          4,
          4
        ],
        [
          4,
          1,
          1,
          4,
          1,
          1,
          4
        ],
        [
          4,
          1,
          1,
          4,
          1,
          1,
          4
        ],
        [
          1,
          1,
          1,
          4,
          1,
          1,
          4
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# diagonal lines, repetition, patterns\n\n# description:\n# In the input you will see an 7x7 grid with a staircase-like diagonal pattern of colored pixels.\n# Each staircase consists of multiple right-angled steps of various colors leading upwards and to the right.\n# To generate the output, repeat each colored staircase pattern throughout the grid.\n# Make sure to repeat it in every direction (both vertically and horizontally).\n# Ensure the colors and lengths of stairs are preserved, and the repetitions form a coherent pattern filling the output grid.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros((7, 7), dtype=int)\n\n    # Loop over the input to detect colored pixels in a staircase pattern\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != Color.BLACK:\n                c = input_grid[i][j]\n\n                # Detected the starting point of a staircase, repeat the steps in the pattern\n                lengths = detect_staircase_length(input_grid, i, j, c)\n\n                # Apply repeated staircases in every direction\n                for distance in range(0, output_grid.shape[0]*2, 3):\n                    draw_staircase(output_grid, i-distance, j, c, lengths)\n                    draw_staircase(output_grid, i+distance, j, c, lengths)\n                    draw_staircase(output_grid, i, j-distance, c, lengths)\n                    draw_staircase(output_grid, i, j+distance, c, lengths)\n    \n    return output_grid\n\ndef detect_staircase_length(grid: np.ndarray, x: int, y: int, c: str) -> List[int]:\n    # Determine the length of each step in a staircase\n    lengths = []\n    while x < grid.shape[0] and y < grid.shape[1] and grid[x][y] == c:\n        length = 1\n        while x + length < grid.shape[0] and y + length < grid.shape[1] and grid[x + length][y + length] == c:\n            length += 1\n        lengths.append(length)\n        x += length\n        y += length\n    return lengths\n\ndef draw_staircase(grid: np.ndarray, x: int, y: int, c: str, lengths: List[int]):\n    # Draw the staircase pattern based on the detected lengths\n    for length in lengths:\n        draw_line(grid, x, y, length=length, color=c, direction=(1, 1))\n        draw_line(grid, x + length - 1, y + length - 1, length=length, color=c, direction=(1, 0))\n        x += length\n        y += length\n\ndef generate_input() -> np.ndarray:\n    # Create a 7x7 grid of black (0)\n    grid = np.zeros((7, 7), dtype=int)\n\n    # Pick 3 random distinct colors\n    c1, c2, c3 = np.random.choice(list(Color.NOT_BLACK), 3, replace=False)\n\n    # Put down the staircase patterns\n    place_staircase(grid, c1)\n    place_staircase(grid, c2)\n    place_staircase(grid, c3)\n\n    return grid\n\ndef place_staircase(grid: np.ndarray, color: str):\n    # Create staircase pattern with random positions and lengths\n    stair_length = np.random.randint(2, 4)\n    x_start = np.random.randint(0, grid.shape[0] - stair_length)\n    y_start = np.random.randint(0, grid.shape[1] - stair_length)\n    \n    for step in range(stair_length):\n        grid[x_start + step][y_start + step] = color\n        if step < stair_length - 1:\n            grid[x_start + step + 1][y_start + step] = color\n            grid[x_start + step][y_start + step + 1] = color\n  \n    # Ensure the desktop contains no orphan blocks \n    if np.any(main(grid) == Color.BLACK):\n        place_staircase(grid, color)\n\n    return grid"
}