{
  "uid": "7ee20f45c1820621",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          2,
          2,
          2,
          0,
          0,
          4,
          1,
          0,
          1,
          1,
          0,
          1
        ],
        [
          2,
          0,
          2,
          2,
          2,
          0,
          4,
          1,
          1,
          1,
          1,
          0,
          1
        ],
        [
          2,
          0,
          2,
          2,
          0,
          2,
          4,
          0,
          1,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          1,
          1,
          1,
          1,
          0,
          1
        ],
        [
          2,
          2,
          2,
          0,
          2,
          2,
          4,
          1,
          1,
          0,
          1,
          1,
          1
        ],
        [
          0,
          0,
          2,
          2,
          2,
          0,
          4,
          1,
          0,
          1,
          0,
          1,
          0
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          2,
          4,
          1,
          1,
          1,
          1,
          0
        ],
        [
          2,
          0,
          0,
          0,
          0,
          4,
          1,
          1,
          0,
          1,
          1
        ],
        [
          2,
          2,
          2,
          2,
          0,
          4,
          1,
          1,
          1,
          0,
          0
        ],
        [
          0,
          2,
          2,
          2,
          0,
          4,
          0,
          0,
          1,
          1,
          1
        ],
        [
          2,
          0,
          2,
          2,
          2,
          4,
          1,
          0,
          1,
          0,
          0
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          2,
          0,
          2,
          0,
          0,
          2,
          2,
          4,
          0,
          0,
          0,
          0,
          1,
          1,
          0
        ],
        [
          0,
          2,
          0,
          0,
          0,
          0,
          2,
          4,
          0,
          1,
          0,
          1,
          0,
          1,
          1
        ],
        [
          2,
          0,
          2,
          0,
          2,
          0,
          0,
          4,
          1,
          1,
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          4,
          0,
          0,
          0,
          0,
          1,
          0,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          2,
          4,
          0,
          0,
          1,
          1,
          1,
          0,
          1
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          0,
          2,
          2,
          0,
          2,
          0,
          2,
          4,
          0,
          0,
          1,
          0,
          1,
          1,
          1
        ],
        [
          0,
          0,
          2,
          2,
          2,
          0,
          0,
          4,
          1,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          2,
          0,
          2,
          0,
          0,
          4,
          0,
          1,
          0,
          1,
          1,
          0,
          0
        ],
        [
          2,
          0,
          0,
          0,
          2,
          0,
          2,
          4,
          1,
          1,
          0,
          0,
          0,
          0,
          1
        ],
        [
          2,
          0,
          2,
          2,
          0,
          2,
          2,
          4,
          0,
          1,
          1,
          0,
          1,
          1,
          1
        ],
        [
          0,
          2,
          0,
          2,
          0,
          0,
          0,
          4,
          1,
          0,
          0,
          1,
          0,
          0,
          0
        ],
        [
          2,
          2,
          0,
          0,
          0,
          0,
          2,
          4,
          0,
          1,
          0,
          1,
          1,
          1,
          0
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    }
  ],
  "code": "import numpy as np\nfrom typing import *\nfrom common import *\n\n# concepts:\n# boolean logical operations, bitmasks with separator, counting, color\n\n# description:\n# In the input you will see two bitmasks separated by a yellow horizontal bar.\n# The left bitmask uses red pixels, and the right bitmask uses blue pixels.\n# To make the output:\n# 1. Perform a logical XOR operation between the two bitmasks\n# 2. Count the number of 'on' pixels in the resulting XOR mask\n# 3. Color the output grid based on this count:\n#    - If the count is odd, fill the entire output with green\n#    - If the count is even, fill the entire output with orange\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the yellow horizontal bar\n    for y_bar in range(input_grid.shape[1]):\n        if np.all(input_grid[:, y_bar] == Color.YELLOW):\n            break\n\n    top_mask = input_grid[:, :y_bar]\n    bottom_mask = input_grid[:, y_bar+1:]\n\n    # Perform XOR operation\n    xor_result = np.logical_xor(top_mask == Color.RED, bottom_mask == Color.BLUE)\n\n    # Count 'on' pixels\n    on_pixel_count = np.sum(xor_result)\n\n    # Create output grid\n    output_grid = np.zeros_like(top_mask)\n    if on_pixel_count % 2 == 1:  # odd\n        output_grid[:, :] = Color.GREEN\n    else:  # even\n        output_grid[:, :] = Color.ORANGE\n    \n    return output_grid\n\n\ndef generate_input() -> np.ndarray:\n    # create a pair of equally sized bitmasks\n    width, height = np.random.randint(3, 8), np.random.randint(3, 8)\n\n    grid1 = np.zeros((width, height), dtype=int)\n    grid2 = np.zeros((width, height), dtype=int)\n\n    for x in range(width):\n        for y in range(height):\n            grid1[x, y] = np.random.choice([Color.RED, Color.BLACK])\n            grid2[x, y] = np.random.choice([Color.BLUE, Color.BLACK])\n    \n    # create a yellow horizontal bar\n    bar = np.zeros((width, 1), dtype=int)\n    bar[:, 0] = Color.YELLOW\n\n    grid = np.concatenate((grid1, bar, grid2), axis=1)\n\n    return grid"
}