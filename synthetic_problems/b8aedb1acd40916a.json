{
  "uid": "b8aedb1acd40916a",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          7,
          6,
          4,
          6,
          9,
          8,
          5,
          6,
          7,
          9,
          3,
          3
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          4,
          5,
          9,
          8,
          9,
          7,
          4,
          4,
          3,
          7,
          8,
          5
        ],
        [
          6,
          6,
          8,
          5,
          9,
          1,
          8,
          8,
          4,
          4,
          5,
          4
        ],
        [
          6,
          1,
          3,
          8,
          9,
          8,
          1,
          4,
          2,
          5,
          6,
          7
        ],
        [
          2,
          9,
          2,
          9,
          2,
          8,
          8,
          7,
          6,
          2,
          7,
          9
        ],
        [
          2,
          1,
          2,
          1,
          2,
          1,
          2,
          1,
          2,
          1,
          2,
          1
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          6,
          4,
          6,
          6,
          4,
          6,
          6,
          4,
          6,
          6
        ],
        [
          9,
          1,
          8,
          9,
          5,
          9,
          9,
          8,
          8,
          9
        ],
        [
          6,
          7,
          1,
          7,
          9,
          6,
          3,
          3,
          4,
          4
        ],
        [
          7,
          4,
          1,
          8,
          8,
          6,
          7,
          1,
          3,
          2
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          6,
          7,
          2,
          6,
          7,
          4,
          9,
          5,
          5,
          7
        ],
        [
          2,
          2,
          9,
          3,
          2,
          2,
          9,
          3,
          2,
          2
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          3,
          8,
          8,
          2,
          3,
          8,
          8,
          2,
          3,
          8,
          8
        ],
        [
          5,
          6,
          1,
          8,
          4,
          7,
          3,
          8,
          1,
          1,
          9
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          9,
          4,
          9,
          6,
          1,
          5,
          3,
          5,
          1,
          1,
          8
        ],
        [
          7,
          8,
          2,
          9,
          3,
          1,
          3,
          4,
          3,
          1,
          4
        ],
        [
          4,
          1,
          7,
          4,
          9,
          9,
          6,
          8,
          1,
          7,
          3
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ]
    },
    {
      "input": [
        [
          6,
          5,
          3,
          6,
          9,
          5,
          9,
          1,
          6
        ],
        [
          5,
          6,
          5,
          6,
          9,
          9,
          7,
          6,
          6
        ],
        [
          2,
          9,
          4,
          1,
          2,
          9,
          4,
          1,
          2
        ],
        [
          7,
          9,
          4,
          7,
          9,
          4,
          7,
          9,
          4
        ],
        [
          5,
          6,
          5,
          6,
          5,
          6,
          5,
          6,
          5
        ],
        [
          9,
          7,
          8,
          8,
          4,
          1,
          3,
          2,
          8
        ],
        [
          8,
          9,
          7,
          9,
          4,
          1,
          6,
          1,
          4
        ],
        [
          5,
          5,
          2,
          8,
          1,
          2,
          4,
          7,
          1
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# horizontal bars, patterns, repeating pattern, symmetry detection\n\n# description:\n# In the input grid, each row may have a single color or follow an alternating/repeating pattern.\n# For each row in the input, if that row has a single color, color that row in the output grey.\n# If the row has a repeating or alternating pattern, color that row in the output green.\n# If the row does not fit any of these categories, color it black in the output.\n\ndef main(input_grid):\n    n, m = input_grid.shape\n    output_grid = np.zeros((n, m), dtype=int)\n\n    for i in range(n):\n        row = input_grid[i]\n        unique_colors = np.unique(row[row != Color.BLACK])\n\n        if len(unique_colors) == 1:\n            # If the row is a single color, make it grey\n            output_grid[i] = Color.GREY\n        elif len(unique_colors) > 1 and has_repeating_pattern(row):\n            # If the row has a repeating pattern, make it green\n            output_grid[i] = Color.GREEN\n        else:\n            # Otherwise, it remains black\n            output_grid[i] = Color.BLACK\n\n    return output_grid\n\ndef has_repeating_pattern(row):\n    \"\"\" Helper function to check for repeating or alternating pattern in the row \"\"\"\n    n = len(row)\n    for k in range(1, n // 2 + 1):\n        pattern = row[:k]\n        if all((row[k * i : k * (i + 1)] == pattern).all() for i in range(n // k)):\n            return True\n        \n    return False\n\ndef generate_input():\n    n = np.random.randint(5, 15)\n    m = np.random.randint(5, 15)\n    grid = np.random.choice(list(Color.NOT_BLACK), size=(n, m))\n\n    # Make some rows uniform in color\n    for _ in range(np.random.randint(1, n // 2)):\n        row = np.random.randint(n)\n        color = np.random.choice(list(Color.NOT_BLACK))\n        grid[row, :] = color\n\n    # Make some rows follow a repeating pattern\n    for _ in range(np.random.randint(1, n // 2)):\n        row = np.random.randint(n)\n        k = np.random.randint(2, m // 2 + 1)\n        pattern = np.random.choice(list(Color.NOT_BLACK), size=k)\n        grid[row, :] = np.tile(pattern, m // k + 1)[:m]\n\n    return grid"
}