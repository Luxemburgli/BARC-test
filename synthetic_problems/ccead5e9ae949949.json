{
  "uid": "ccead5e9ae949949",
  "annotations": {
    "example": "good",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          4,
          4,
          0,
          8,
          0,
          0,
          0,
          9,
          0
        ],
        [
          4,
          0,
          4,
          0,
          8,
          8,
          0,
          0,
          9,
          9
        ],
        [
          0,
          4,
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          9
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          4,
          0,
          4,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          4,
          4,
          4,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          4,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          0,
          4,
          4,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          4,
          4,
          0,
          4
        ],
        [
          0,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          0
        ],
        [
          4,
          0,
          4,
          4
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          2,
          0,
          0
        ],
        [
          4,
          4,
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0
        ],
        [
          0,
          4,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          0,
          0
        ],
        [
          0,
          0,
          3,
          0,
          0,
          0,
          0,
          6,
          0,
          0
        ],
        [
          0,
          3,
          3,
          3,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          3,
          0
        ],
        [
          3,
          3,
          3
        ],
        [
          0,
          3,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          3,
          3,
          3,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          3,
          3,
          3,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          3,
          0,
          0,
          0,
          3,
          3,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          2,
          2,
          0,
          0,
          0,
          0,
          9,
          9,
          0
        ],
        [
          0,
          2,
          0,
          0,
          0,
          0,
          9,
          9,
          9,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          9,
          9,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          9,
          9,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          3,
          0
        ],
        [
          3,
          3,
          3,
          0
        ],
        [
          0,
          3,
          3,
          3
        ],
        [
          0,
          3,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          6,
          0,
          0,
          6,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          6,
          6,
          0,
          6,
          6,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          5,
          5,
          0,
          5,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          5,
          0,
          0,
          5,
          5,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          5
        ],
        [
          5,
          5
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry, sprites\n\n# description:\n# In the input you will see several objects. One of these objects represents a sprite with 90-degree rotational symmetry. All the other objects represent non-symmetric sprites.\n# The goal is to find the sprite with 90-degree rotational symmetry and return it.\n\ndef main(input_grid):\n    # find the objects in the input grid\n    objects = detect_objects(input_grid, background=Color.BLACK, monochromatic=False, connectivity=8)\n\n    # crop out the sprites from the objects\n    sprites = [crop(obj) for obj in objects]\n\n    # find the 90-degree rotational symmetric sprite\n    rotational_symmetric_sprite = None\n    for sprite in sprites:\n        # Check for 90-degree rotational symmetry\n        if np.array_equal(sprite, np.rot90(sprite, 1)):\n            rotational_symmetric_sprite = sprite\n            break\n\n    assert rotational_symmetric_sprite is not None, \"No 90-degree rotational symmetric sprite found\"\n    return rotational_symmetric_sprite\n\n\ndef generate_input():\n    # make a black 10x10 grid as background\n    grid = np.zeros((10, 10), dtype=int)\n\n    # choose the color of the sprite with 90-degree rotational symmetry\n    color = np.random.choice(Color.NOT_BLACK)\n\n    # choose the side length of the sprite\n    side_length = np.random.randint(2, 5)\n\n    # make the sprite with 90-degree rotational symmetry\n    rotational_symmetric_sprite = random_sprite(side_length, side_length, symmetry='radial', color_palette=[color], connectivity=8)\n\n    # place the rotational symmetric sprite randomly on the grid\n    x, y = random_free_location_for_sprite(grid, rotational_symmetric_sprite, padding=1)\n    blit_sprite(grid, rotational_symmetric_sprite, x=x, y=y)\n\n    # add some non-symmetric sprites:\n    for _ in range(np.random.randint(3, 6)):\n        # choose the color of the sprite\n        color = np.random.choice(Color.NOT_BLACK)\n\n        # choose the side length of the sprite\n        side_length = np.random.randint(2, 5)\n\n        # make the non-symmetric sprite\n        non_symmetric_sprite = random_sprite(side_length, side_length, symmetry=\"not_symmetric\", color_palette=[color], connectivity=8)\n        \n        # place the non-symmetric sprite randomly on the grid if there is space\n        try:\n            x, y = random_free_location_for_sprite(grid, non_symmetric_sprite, padding=1)\n            blit_sprite(grid, non_symmetric_sprite, x=x, y=y)\n        except:\n            pass\n\n    return grid"
}