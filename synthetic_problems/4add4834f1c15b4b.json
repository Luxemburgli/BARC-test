{
  "uid": "4add4834f1c15b4b",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          7,
          6,
          4,
          2,
          3,
          7,
          8
        ],
        [
          8,
          6,
          7,
          7,
          3,
          1,
          6,
          8
        ],
        [
          8,
          2,
          9,
          5,
          3,
          7,
          6,
          8
        ],
        [
          8,
          3,
          7,
          1,
          3,
          5,
          3,
          8
        ],
        [
          8,
          9,
          4,
          7,
          5,
          9,
          6,
          8
        ],
        [
          8,
          7,
          1,
          7,
          5,
          6,
          6,
          8
        ],
        [
          8,
          2,
          7,
          6,
          2,
          1,
          6,
          8
        ],
        [
          8,
          5,
          9,
          7,
          4,
          5,
          9,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          3,
          4,
          1,
          4,
          3,
          2,
          3,
          6,
          7
        ],
        [
          7,
          1,
          5,
          2,
          5,
          8,
          2,
          1,
          6,
          7
        ],
        [
          7,
          2,
          9,
          1,
          9,
          5,
          1,
          5,
          1,
          7
        ],
        [
          7,
          3,
          8,
          5,
          1,
          4,
          9,
          4,
          9,
          7
        ],
        [
          7,
          9,
          1,
          6,
          8,
          1,
          8,
          1,
          6,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0
        ],
        [
          0,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0
        ],
        [
          0,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0
        ],
        [
          0,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0
        ],
        [
          0,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          4,
          4,
          8,
          3,
          6,
          2,
          6,
          9
        ],
        [
          9,
          2,
          5,
          3,
          1,
          7,
          8,
          6,
          9
        ],
        [
          9,
          8,
          7,
          5,
          6,
          2,
          2,
          1,
          9
        ],
        [
          9,
          6,
          8,
          4,
          7,
          3,
          3,
          5,
          9
        ],
        [
          9,
          3,
          8,
          1,
          1,
          8,
          6,
          1,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          0
        ],
        [
          0,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          0
        ],
        [
          0,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          0
        ],
        [
          0,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          0
        ],
        [
          0,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          5,
          2,
          5,
          3,
          7,
          9,
          1,
          6
        ],
        [
          6,
          5,
          4,
          3,
          1,
          1,
          7,
          5,
          6
        ],
        [
          6,
          9,
          7,
          5,
          7,
          1,
          4,
          1,
          6
        ],
        [
          6,
          9,
          7,
          8,
          7,
          7,
          7,
          9,
          6
        ],
        [
          6,
          9,
          1,
          3,
          4,
          9,
          1,
          8,
          6
        ],
        [
          6,
          8,
          7,
          2,
          4,
          9,
          5,
          1,
          6
        ],
        [
          6,
          2,
          5,
          7,
          7,
          2,
          2,
          1,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0
        ],
        [
          0,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0
        ],
        [
          0,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0
        ],
        [
          0,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0
        ],
        [
          0,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0
        ],
        [
          0,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0
        ],
        [
          0,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# borders, color guide\n\n# description:\n# In the input, you will see a rectangular grid with a single-colored border and a random pattern inside.\n# To make the output, identify the border color, remove one pixel of the border (making it black), and fill the inner area with the previously extracted border color.\n\ndef main(input_grid):\n    n, m = input_grid.shape\n\n    # Identify the border color (assuming all four borders have the same color)\n    border_color = input_grid[0, 1]  # Taking the top border's color (excluding corners)\n\n    # Create a new grid with all cells filled with the border color\n    output_grid = np.full((n, m), border_color, dtype=int)\n\n    # Make the outer-most border black\n    draw_line(grid=output_grid, x=0, y=0, length=None, color=Color.BLACK, direction=(1, 0))\n    draw_line(grid=output_grid, x=n-1, y=0, length=None, color=Color.BLACK, direction=(0, 1))\n    draw_line(grid=output_grid, x=0, y=0, length=None, color=Color.BLACK, direction=(0, 1))\n    draw_line(grid=output_grid, x=0, y=m-1, length=None, color=Color.BLACK, direction=(1, 0))\n\n    return output_grid\n\n\ndef generate_input():\n    # Making a grid with a random size between 5 and 10\n    n = np.random.randint(5, 11)\n    m = np.random.randint(5, 11)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly select a border color\n    border_color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Fill the border with the selected color\n    draw_line(grid, x=0, y=0, length=None, color=border_color, direction=(1, 0))  # top border\n    draw_line(grid, x=n-1, y=0, length=None, color=border_color, direction=(0, 1))  # bottom border\n    draw_line(grid, x=0, y=0, length=None, color=border_color, direction=(0, 1))  # left border\n    draw_line(grid, x=0, y=m-1, length=None, color=border_color, direction=(1, 0))  # right border\n\n    # Fill the inner area with random colors except border_color\n    for i in range(1, n-1):\n        for j in range(1, m-1):\n            grid[i, j] = np.random.choice([c for c in Color.NOT_BLACK if c != border_color])\n\n    return grid"
}