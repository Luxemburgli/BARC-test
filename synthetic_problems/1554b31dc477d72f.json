{
  "uid": "1554b31dc477d72f",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          2,
          2,
          0,
          2,
          2,
          7,
          0,
          1,
          0,
          1,
          0,
          1
        ],
        [
          2,
          2,
          0,
          0,
          0,
          2,
          7,
          0,
          1,
          0,
          0,
          0,
          1
        ],
        [
          2,
          2,
          0,
          2,
          2,
          2,
          7,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          2,
          7,
          0,
          1,
          1,
          1,
          1,
          1
        ],
        [
          2,
          0,
          0,
          2,
          2,
          2,
          7,
          0,
          1,
          0,
          0,
          1,
          1
        ],
        [
          2,
          0,
          0,
          0,
          2,
          0,
          7,
          1,
          0,
          1,
          1,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          3,
          4,
          3,
          0
        ],
        [
          3,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          4,
          0,
          0,
          3
        ],
        [
          3,
          0,
          0,
          4,
          4,
          0
        ],
        [
          3,
          4,
          0,
          3,
          0,
          0
        ],
        [
          0,
          0,
          4,
          4,
          3,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          2,
          0,
          2,
          0,
          7,
          1,
          1,
          0,
          0,
          0
        ],
        [
          2,
          0,
          2,
          2,
          0,
          7,
          0,
          0,
          1,
          0,
          1
        ],
        [
          2,
          2,
          0,
          2,
          0,
          7,
          1,
          1,
          1,
          0,
          1
        ],
        [
          0,
          0,
          2,
          0,
          2,
          7,
          1,
          1,
          0,
          0,
          1
        ],
        [
          2,
          2,
          2,
          2,
          2,
          7,
          1,
          1,
          0,
          1,
          0
        ]
      ],
      "output": [
        [
          4,
          0,
          0,
          3,
          0
        ],
        [
          3,
          0,
          0,
          3,
          4
        ],
        [
          0,
          0,
          4,
          3,
          4
        ],
        [
          4,
          4,
          3,
          0,
          0
        ],
        [
          0,
          0,
          3,
          0,
          3
        ]
      ]
    },
    {
      "input": [
        [
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          7,
          1,
          1,
          1,
          0,
          1,
          0,
          0
        ],
        [
          0,
          0,
          2,
          2,
          2,
          2,
          0,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ],
        [
          0,
          0,
          2,
          2,
          0,
          0,
          0,
          7,
          0,
          1,
          1,
          0,
          0,
          0,
          0
        ],
        [
          2,
          0,
          0,
          0,
          2,
          2,
          2,
          7,
          1,
          0,
          1,
          0,
          1,
          1,
          0
        ],
        [
          2,
          2,
          0,
          2,
          2,
          0,
          0,
          7,
          1,
          0,
          1,
          0,
          0,
          1,
          1
        ]
      ],
      "output": [
        [
          0,
          4,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          3,
          3,
          3,
          3,
          4
        ],
        [
          0,
          4,
          0,
          3,
          0,
          0,
          0
        ],
        [
          0,
          0,
          4,
          0,
          0,
          0,
          3
        ],
        [
          0,
          3,
          4,
          3,
          3,
          4,
          4
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          2,
          0,
          2,
          2,
          0,
          7,
          0,
          1,
          0,
          0,
          0,
          1,
          1
        ],
        [
          0,
          2,
          2,
          0,
          2,
          2,
          2,
          7,
          1,
          0,
          0,
          1,
          1,
          1,
          1
        ],
        [
          0,
          2,
          0,
          0,
          2,
          0,
          2,
          7,
          0,
          0,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          2,
          0,
          0,
          2,
          0,
          0,
          7,
          0,
          1,
          1,
          0,
          0,
          0,
          1
        ],
        [
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          7,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          0,
          7,
          1,
          0,
          1,
          1,
          0,
          0,
          0
        ],
        [
          2,
          2,
          0,
          2,
          0,
          0,
          0,
          7,
          1,
          0,
          1,
          0,
          1,
          1,
          0
        ]
      ],
      "output": [
        [
          0,
          4,
          3,
          0,
          3,
          0,
          4
        ],
        [
          4,
          3,
          3,
          4,
          0,
          0,
          0
        ],
        [
          0,
          3,
          4,
          4,
          0,
          4,
          0
        ],
        [
          0,
          0,
          4,
          0,
          3,
          0,
          4
        ],
        [
          4,
          0,
          0,
          3,
          3,
          0,
          0
        ],
        [
          0,
          3,
          0,
          4,
          0,
          0,
          0
        ],
        [
          0,
          3,
          4,
          3,
          4,
          4,
          0
        ]
      ]
    }
  ],
  "code": "import numpy as np\nfrom typing import *\nfrom common import *\n\n# concepts:\n# boolean logical operations, bitmasks with separator, color mapping\n\n# description:\n# The input consists of two bitmasks separated by an orange vertical bar.\n# The left bitmask uses red for 1 and black for 0.\n# The right bitmask uses blue for 1 and black for 0.\n# To create the output:\n# 1. Perform a logical XOR operation between the two bitmasks.\n# 2. In the result, color the '1' pixels green where the left mask was 1 (red),\n#    and yellow where the right mask was 1 (blue).\n# 3. The '0' pixels in the result remain black.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the orange vertical bar\n    for x_bar in range(input_grid.shape[1]):\n        if np.all(input_grid[:, x_bar] == Color.ORANGE):\n            break\n\n    left_mask = input_grid[:, :x_bar]\n    right_mask = input_grid[:, x_bar+1:]\n\n    # Create boolean masks\n    left_bool = (left_mask == Color.RED)\n    right_bool = (right_mask == Color.BLUE)\n\n    # Perform XOR operation\n    xor_result = np.logical_xor(left_bool, right_bool)\n\n    # Create output grid\n    output_grid = np.zeros_like(xor_result, dtype=int)\n    output_grid[xor_result & left_bool] = Color.GREEN\n    output_grid[xor_result & right_bool] = Color.YELLOW\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    height = np.random.randint(3, 8)\n    width = np.random.randint(3, 8)\n\n    left_mask = np.random.choice([Color.RED, Color.BLACK], size=(height, width))\n    right_mask = np.random.choice([Color.BLUE, Color.BLACK], size=(height, width))\n\n    # Create orange separator\n    separator = np.full((height, 1), Color.ORANGE)\n\n    # Combine masks and separator\n    input_grid = np.hstack((left_mask, separator, right_mask))\n\n    return input_grid"
}