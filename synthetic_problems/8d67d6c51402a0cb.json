{
  "uid": "8d67d6c51402a0cb",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          1,
          5,
          1,
          0,
          3,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          3,
          5,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          4,
          5,
          4,
          0,
          0,
          3,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          3,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          3
        ],
        [
          0,
          4,
          5,
          4,
          0
        ],
        [
          3,
          1,
          4,
          1,
          0
        ],
        [
          0,
          0,
          0,
          1,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          3,
          0,
          3,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          3,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          3,
          0,
          0
        ],
        [
          0,
          1,
          3
        ],
        [
          3,
          5,
          0
        ],
        [
          3,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          4,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          4,
          4,
          5,
          0,
          0,
          0
        ],
        [
          0,
          1,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          5,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          2,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          4,
          4,
          0,
          0,
          0
        ],
        [
          0,
          4,
          5,
          1,
          0
        ],
        [
          4,
          2,
          2,
          2,
          1
        ],
        [
          0,
          2,
          2,
          0,
          0
        ],
        [
          0,
          2,
          5,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          2,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          0,
          0
        ],
        [
          0,
          1,
          5,
          0,
          0,
          0,
          0,
          0,
          7,
          0,
          7,
          0
        ],
        [
          0,
          1,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          7,
          0,
          0
        ],
        [
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          2,
          2
        ],
        [
          2,
          0,
          0
        ],
        [
          2,
          7,
          1
        ],
        [
          1,
          0,
          1
        ],
        [
          1,
          5,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# objects, reflection, symmetry, alignment by color\n\n# description:\n# In the input grid, you will see several objects each containing a single grey pixel and various other colors.\n# The goal is to align all objects symmetrically around the center of the grid using reflection. Specifically, the object that contains the grey pixel closest to the center remains in place,\n# while all other objects should be reflected either vertically or horizontally such that their grey pixel aligns with the center grey pixel.\n# The resulting output grid will be the smallest bounding box containing all the transformed objects.\n\ndef main(input_grid):\n    # Extract the objects from the input grid\n    objects = find_connected_components(input_grid, monochromatic=False, connectivity=8)\n    \n    # Crop the objects to get the individual sprites\n    sprites = [crop(obj, background=Color.BLACK) for obj in objects]\n\n    # Create a new grid with the same shape as input for placing the transformed sprites\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Find the center of the grid\n    center_x, center_y = input_grid.shape[0] // 2, input_grid.shape[1] // 2\n    \n    # Source sprite to align to the center\n    center_sprite = None\n    \n    for sprite in sprites:\n        grey_pixel_pos = np.argwhere(sprite == Color.GREY)\n        if len(grey_pixel_pos) == 0:\n            continue\n        grey_pixel_x, grey_pixel_y = grey_pixel_pos[0]\n        \n        # Find the sprite closest to the center\n        sprite_center_x = grey_pixel_x + (sprite.shape[0] // 2)\n        sprite_center_y = grey_pixel_y + (sprite.shape[1] // 2)\n        \n        if center_sprite is None or abs(sprite_center_x - center_x) + abs(sprite_center_y - center_y) < abs(center_sprite[0] - center_x) + abs(center_sprite[1] - center_y):\n            center_sprite = (grey_pixel_x, grey_pixel_y, sprite)\n    \n    # Place the center sprite in the center of the output grid\n    grey_pixel_x, grey_pixel_y, sprite = center_sprite\n    blit_sprite(output_grid, sprite, center_x - grey_pixel_x, center_y - grey_pixel_y, background=Color.BLACK)\n    \n    # Reflect and align other objects\n    for sprite in sprites:\n        if np.array_equal(sprite, center_sprite[2]):\n            continue\n        \n        grey_pixel_pos = np.argwhere(sprite == Color.GREY)\n        if len(grey_pixel_pos) == 0:\n            continue\n        grey_pixel_x, grey_pixel_y = grey_pixel_pos[0]\n\n        # Reflect the sprite horizontally or vertically based on alignment to the center sprite\n        if abs(grey_pixel_x - center_x) >= abs(grey_pixel_y - center_y):\n            # Vertical reflection\n            reflected_sprite = np.flipud(sprite)\n            blit_sprite(output_grid, reflected_sprite, center_x - grey_pixel_x, center_y - grey_pixel_y, background=Color.BLACK)\n        else:\n            # Horizontal reflection\n            reflected_sprite = np.fliplr(sprite)\n            blit_sprite(output_grid, reflected_sprite, center_x - grey_pixel_x, center_y - grey_pixel_y, background=Color.BLACK)\n\n    # Crop the output grid to the smallest bounding box containing all sprites\n    output_grid = crop(output_grid)\n\n    return output_grid\n\n\ndef generate_input():\n    # Create a series of 3x3 objects, each of which has a grey pixel at a random position\n    n_objects = np.random.randint(3, 5)\n    sprites = []\n\n    for _ in range(n_objects):\n        sprite = np.full((3, 3), Color.BLACK)\n\n        grey_pixel_x, grey_pixel_y = np.random.randint(0, 3), np.random.randint(0, 3)\n        sprite[grey_pixel_x, grey_pixel_y] = Color.GREY\n        other_color = np.random.choice([color for color in Color.NOT_BLACK if color != Color.GREY])\n        \n        for x in range(3):\n            for y in range(3):\n                if sprite[x, y] == Color.BLACK:\n                    sprite[x, y] = np.random.choice([Color.BLACK, other_color], p=[0.6, 0.4])\n        \n        sprites.append(sprite)\n\n    # Place sprites randomly on the grid, ensuring no overlap\n    grid_size = np.random.randint(10, 15), np.random.randint(10, 15)\n    grid = np.full(grid_size, Color.BLACK)\n\n    for sprite in sprites:\n        x, y = random_free_location_for_sprite(grid, sprite, padding=1, padding_connectivity=8)\n        blit_sprite(grid, sprite, x, y)\n\n    return grid"
}