{
  "uid": "f63e1e45b675ecc1",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          2,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          2,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          2,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          1,
          0
        ],
        [
          1,
          1,
          1
        ],
        [
          0,
          1,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          2,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          2,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          2,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          1,
          0
        ],
        [
          1,
          1,
          1
        ],
        [
          0,
          1,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          2,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          2,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          2,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          2,
          0
        ],
        [
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          2,
          2,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          2,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          1,
          0,
          1
        ],
        [
          0,
          1,
          0
        ],
        [
          1,
          0,
          1
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          2,
          2,
          0,
          0,
          2,
          2,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          2,
          2,
          0,
          0,
          2,
          2,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          2,
          2,
          0,
          0,
          2,
          2,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0
        ],
        [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          1,
          0
        ],
        [
          1,
          1,
          1
        ],
        [
          0,
          1,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# connectivity, objects, symmetry\n\n# description:\n# In the input image, you will see several blue pixels forming a path, and two 3x3 red squares on a black background.\n# The blue path may or may not connect the two red squares.\n# If the blue path connects the red squares, output a 3x3 grid with rotational symmetry using only blue pixels.\n# If the blue path does not connect the red squares, output a 3x3 grid with mirror symmetry using only blue pixels.\n\ndef main(input_grid):\n    # Create output grid\n    output_grid = np.zeros((3, 3), dtype=int)\n\n    # Get just the red squares\n    red_squares = np.zeros_like(input_grid)\n    red_squares[input_grid == Color.RED] = Color.RED\n\n    # Find all connected components\n    connected_components = find_connected_components(input_grid, connectivity=4, monochromatic=False)\n\n    # Check if any connected component contains both red squares\n    red_squares_connected = any(np.all(component[red_squares == Color.RED] == Color.RED) for component in connected_components)\n\n    if red_squares_connected:\n        # Create a 3x3 grid with rotational symmetry\n        output_grid[1, 1] = Color.BLUE  # Center\n        output_grid[0, 0] = Color.BLUE  # Corners\n        output_grid[0, 2] = Color.BLUE\n        output_grid[2, 0] = Color.BLUE\n        output_grid[2, 2] = Color.BLUE\n    else:\n        # Create a 3x3 grid with mirror symmetry\n        output_grid[1, :] = Color.BLUE  # Middle row\n        output_grid[0, 1] = Color.BLUE  # Top and bottom center\n        output_grid[2, 1] = Color.BLUE\n\n    return output_grid\n\ndef generate_input():\n    # Make a black grid as background\n    n, m = np.random.randint(10, 15), np.random.randint(10, 15)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Make a 3x3 red square sprite\n    red_square_sprite = np.full((3, 3), Color.RED, dtype=int)\n\n    # Place two red square sprites at random locations\n    x1, y1 = random_free_location_for_sprite(grid, red_square_sprite, padding=1)\n    blit_sprite(grid, red_square_sprite, x1, y1)\n    x2, y2 = random_free_location_for_sprite(grid, red_square_sprite, padding=1)\n    blit_sprite(grid, red_square_sprite, x2, y2)\n\n    # Generate a blue path\n    path_connected = np.random.choice([True, False])\n    if path_connected:\n        # Create a connected path between the two red squares\n        start = (x1 + 1, y1 + 1)\n        end = (x2 + 1, y2 + 1)\n        path = []\n        current = start\n        while current != end:\n            path.append(current)\n            if current[0] < end[0]:\n                current = (current[0] + 1, current[1])\n            elif current[0] > end[0]:\n                current = (current[0] - 1, current[1])\n            elif current[1] < end[1]:\n                current = (current[0], current[1] + 1)\n            else:\n                current = (current[0], current[1] - 1)\n        path.append(end)\n        \n        for x, y in path:\n            if grid[x, y] == Color.BLACK:\n                grid[x, y] = Color.BLUE\n    else:\n        # Create two separate blue paths\n        for _ in range(2):\n            path_length = np.random.randint(5, 10)\n            x, y = random_free_location_for_sprite(grid, np.array([[Color.BLUE]]), padding=1)\n            for _ in range(path_length):\n                if grid[x, y] == Color.BLACK:\n                    grid[x, y] = Color.BLUE\n                dx, dy = np.random.choice([-1, 0, 1], size=2)\n                x, y = np.clip(x + dx, 0, n - 1), np.clip(y + dy, 0, m - 1)\n\n    return grid"
}