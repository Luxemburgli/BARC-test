{
  "uid": "af36f5c5315e5a76",
  "annotations": {
    "example": "good",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          6,
          0,
          0,
          0,
          9,
          9,
          0,
          0,
          0
        ],
        [
          6,
          0,
          0,
          0,
          0,
          0,
          9,
          9,
          0,
          0
        ],
        [
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          9,
          0,
          0
        ],
        [
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          3,
          3
        ],
        [
          0,
          0,
          1,
          1,
          5,
          1,
          0,
          0,
          0,
          3
        ],
        [
          0,
          0,
          1,
          1,
          5,
          1,
          0,
          8,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          8,
          8,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          1,
          0
        ],
        [
          1,
          1,
          5,
          1
        ],
        [
          1,
          1,
          5,
          1
        ],
        [
          0,
          0,
          1,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          5,
          5,
          0,
          0,
          0,
          0,
          7,
          0,
          0
        ],
        [
          5,
          0,
          5,
          0,
          0,
          7,
          0,
          7,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          7,
          7,
          0,
          0
        ],
        [
          0,
          9,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          9,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          9,
          9,
          9,
          0,
          8,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          1,
          0,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          5,
          1,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          8,
          1,
          5
        ],
        [
          1,
          0,
          1
        ],
        [
          5,
          1,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          7,
          7,
          0,
          0,
          0,
          3
        ],
        [
          7,
          0,
          0,
          7,
          0,
          7,
          0,
          0,
          3,
          3
        ],
        [
          7,
          7,
          0,
          0,
          7,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          6,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          0,
          0,
          0
        ],
        [
          0,
          0,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          6,
          6,
          6
        ],
        [
          2,
          6,
          0
        ],
        [
          6,
          6,
          6
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          4
        ],
        [
          0,
          0,
          0,
          6,
          6,
          0,
          0,
          0,
          3,
          4
        ],
        [
          0,
          0,
          0,
          6,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          0
        ],
        [
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          0,
          6,
          6
        ],
        [
          0,
          0,
          9,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          3,
          4
        ],
        [
          3,
          4
        ]
      ]
    }
  ],
  "code": "import numpy as np\nfrom typing import *\nfrom common import *\n\n# concepts:\n# symmetry, color, connected components, sorting\n\n# description:\n# In the input you will see several objects of varying shapes and sizes. Each object is a single color or a combination of colors.\n# One of these objects is symmetric (vertically, horizontally, diagonally, or radially) and contains multiple colors.\n# The goal is to find this colorful symmetric object and return it.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the objects (connected components) in the input grid\n    objects = find_connected_components(input_grid, connectivity=8, monochromatic=False)\n\n    # Crop out the objects to isolate them\n    isolated_objects = [crop(obj) for obj in objects]\n\n    # Function to check if an object is symmetric\n    def is_symmetric(obj):\n        if np.array_equal(obj, np.rot90(obj, 1)) or \\\n           np.array_equal(obj, np.fliplr(obj)) or \\\n           np.array_equal(obj, np.flipud(obj)) or \\\n           np.array_equal(obj, obj.T):\n            return True\n        return False\n\n    # Find the symmetric objects and their color counts\n    symmetric_objects = []\n    for obj in isolated_objects:\n        if is_symmetric(obj):\n            num_colors = len(np.unique(obj[obj != Color.BLACK]))\n            symmetric_objects.append((obj, num_colors))\n\n    # Find the symmetric object with the maximum number of colors\n    if not symmetric_objects:\n        return np.array([])  # Return an empty array if no symmetric objects found\n\n    max_color_object = max(symmetric_objects, key=lambda x: x[1])[0]\n\n    return max_color_object\n\ndef generate_input() -> np.ndarray:\n    # Make a black 10x10 grid as the background\n    grid = np.zeros((10, 10), dtype=int)\n\n    # Add the symmetric colorful sprite:\n    colors = np.random.choice(list(Color.NOT_BLACK), size=4, replace=False).tolist()\n\n    # Choose the symmetry and size of the sprite\n    symmetry = np.random.choice(['vertical', 'horizontal', 'diagonal', 'radial'])\n    side_length = np.random.randint(2, 5)\n    \n    symmetric_sprite = random_sprite(side_length, side_length, symmetry=symmetry, color_palette=colors, connectivity=8)\n\n    # Place the sprite randomly on the grid\n    x, y = random_free_location_for_sprite(grid, symmetric_sprite, padding=1)\n    blit_sprite(grid, symmetric_sprite, x=x, y=y)\n\n    # Add some non-symmetric sprites:\n    for _ in range(np.random.randint(3, 6)):\n        # Choose a color of the sprite\n        color = np.random.choice(Color.NOT_BLACK)\n\n        # Choose the side length of the sprite\n        side_length = np.random.randint(2, 5)\n\n        non_symmetric_sprite = random_sprite(side_length, side_length, symmetry=\"not_symmetric\", color_palette=[color], connectivity=8)\n\n        # Place the sprite randomly on the grid if there is space\n        try:\n            x, y = random_free_location_for_sprite(grid, non_symmetric_sprite, padding=1)\n            blit_sprite(grid, non_symmetric_sprite, x=x, y=y)\n        except:\n            pass\n\n    return grid"
}