{
  "uid": "091a91149c519d93",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng14_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          5,
          5,
          5,
          9,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          9,
          9,
          5,
          5,
          9,
          9
        ],
        [
          5,
          5,
          5,
          5,
          9,
          9,
          9,
          5
        ],
        [
          9,
          9,
          5,
          9,
          5,
          9,
          5,
          9
        ],
        [
          5,
          9,
          9,
          9,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          9,
          9,
          5,
          5,
          5,
          5
        ],
        [
          5,
          9,
          5,
          9,
          9,
          5,
          5,
          5
        ],
        [
          9,
          5,
          5,
          9,
          9,
          9,
          5,
          5
        ]
      ],
      "output": [
        [
          5,
          5,
          5,
          9,
          5,
          5,
          5,
          9
        ],
        [
          5,
          5,
          5,
          9,
          9,
          5,
          9,
          5
        ],
        [
          5,
          9,
          5,
          5,
          9,
          9,
          5,
          5
        ],
        [
          9,
          9,
          5,
          9,
          9,
          9,
          9,
          9
        ],
        [
          5,
          5,
          9,
          5,
          5,
          5,
          9,
          9
        ],
        [
          5,
          5,
          9,
          9,
          5,
          5,
          5,
          9
        ],
        [
          5,
          9,
          9,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          9,
          5,
          9,
          5,
          5,
          5,
          5
        ]
      ]
    },
    {
      "input": [
        [
          5,
          8,
          9,
          5,
          8,
          5,
          5
        ],
        [
          6,
          8,
          6,
          8,
          8,
          8,
          8
        ],
        [
          9,
          9,
          8,
          8,
          6,
          6,
          6
        ],
        [
          6,
          6,
          8,
          5,
          9,
          8,
          9
        ],
        [
          8,
          5,
          9,
          9,
          9,
          5,
          6
        ],
        [
          9,
          9,
          9,
          6,
          9,
          5,
          6
        ],
        [
          8,
          6,
          8,
          9,
          6,
          6,
          5
        ]
      ],
      "output": [
        [
          5,
          6,
          9,
          6,
          8,
          9,
          8
        ],
        [
          8,
          8,
          9,
          6,
          5,
          9,
          6
        ],
        [
          9,
          6,
          8,
          8,
          9,
          9,
          8
        ],
        [
          5,
          8,
          8,
          5,
          9,
          6,
          9
        ],
        [
          8,
          8,
          6,
          9,
          9,
          9,
          6
        ],
        [
          5,
          8,
          6,
          8,
          5,
          5,
          6
        ],
        [
          5,
          8,
          6,
          9,
          6,
          6,
          5
        ]
      ]
    },
    {
      "input": [
        [
          2,
          9,
          9,
          2,
          4,
          2,
          2,
          8,
          4
        ],
        [
          2,
          7,
          4,
          9,
          2,
          7,
          9,
          7,
          7
        ],
        [
          2,
          7,
          2,
          4,
          8,
          9,
          7,
          9,
          8
        ],
        [
          9,
          8,
          2,
          8,
          4,
          2,
          8,
          7,
          4
        ],
        [
          7,
          7,
          2,
          2,
          4,
          2,
          9,
          4,
          2
        ],
        [
          9,
          4,
          9,
          9,
          7,
          8,
          7,
          2,
          7
        ],
        [
          7,
          4,
          8,
          9,
          2,
          9,
          4,
          8,
          7
        ],
        [
          7,
          8,
          8,
          7,
          4,
          8,
          7,
          4,
          9
        ],
        [
          2,
          9,
          8,
          7,
          4,
          2,
          4,
          2,
          4
        ]
      ],
      "output": [
        [
          2,
          2,
          2,
          9,
          7,
          9,
          7,
          7,
          2
        ],
        [
          9,
          7,
          7,
          8,
          7,
          4,
          4,
          8,
          9
        ],
        [
          9,
          4,
          2,
          2,
          2,
          9,
          8,
          8,
          8
        ],
        [
          2,
          9,
          4,
          8,
          2,
          9,
          9,
          7,
          7
        ],
        [
          4,
          2,
          8,
          4,
          4,
          7,
          2,
          4,
          4
        ],
        [
          2,
          7,
          9,
          2,
          2,
          8,
          9,
          8,
          2
        ],
        [
          2,
          9,
          7,
          8,
          9,
          7,
          4,
          7,
          4
        ],
        [
          8,
          7,
          9,
          7,
          4,
          2,
          8,
          4,
          2
        ],
        [
          4,
          7,
          8,
          4,
          2,
          7,
          7,
          9,
          4
        ]
      ]
    },
    {
      "input": [
        [
          9,
          9,
          9,
          1,
          2
        ],
        [
          1,
          9,
          2,
          1,
          9
        ],
        [
          2,
          2,
          9,
          3,
          9
        ],
        [
          2,
          3,
          9,
          2,
          1
        ],
        [
          9,
          1,
          1,
          3,
          1
        ]
      ],
      "output": [
        [
          9,
          1,
          2,
          2,
          9
        ],
        [
          9,
          9,
          2,
          3,
          1
        ],
        [
          9,
          2,
          9,
          9,
          1
        ],
        [
          1,
          1,
          3,
          2,
          3
        ],
        [
          2,
          9,
          9,
          1,
          1
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# diagonal mirroring, symmetry, color\n\n# description:\n# In the input, you will see a grid with some pixels colored randomly.\n# The output should be the diagonal mirror image along the main diagonal (top-left to bottom-right)\n# Any pixel at (i, j) should be moved to (j, i) in the output.\n\ndef main(input_grid):\n    # dimensions of the input grid\n    n, m = input_grid.shape\n\n    # create an output grid with the same dimensions\n    output_grid = np.zeros_like(input_grid)\n\n    # iterate over the input grid to apply diagonal mirroring\n    for i in range(n):\n        for j in range(m):\n            output_grid[j, i] = input_grid[i, j]\n\n    return output_grid\n\n\ndef generate_input():\n    # generate a grid of random dimensions between 5x5 and 10x10\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n    \n    # pick a random number of colors to use (at least 1, at most 5)\n    num_colors = np.random.randint(1, 6)\n    \n    # pick `num_colors` distinct colors from the color palette\n    colors_in_use = np.random.choice(list(Color.NOT_BLACK), num_colors, replace=False)\n    \n    # fill the grid with random colors from the colors_in_use\n    for i in range(n):\n        for j in range(m):\n            grid[i, j] = np.random.choice(colors_in_use)\n    \n    return grid"
}