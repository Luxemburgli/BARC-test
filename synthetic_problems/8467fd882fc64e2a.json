{
  "uid": "8467fd882fc64e2a",
  "annotations": {
    "example": "ok",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng16_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          9,
          0,
          7,
          0
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          6,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          9,
          0,
          7,
          0
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          6,
          0
        ],
        [
          0,
          0,
          0,
          0,
          6,
          0
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          9,
          0,
          7,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          5,
          0,
          0
        ],
        [
          4,
          0,
          0,
          0,
          0,
          0,
          8
        ],
        [
          0,
          0,
          5,
          0,
          0,
          1,
          4
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          5,
          0,
          0
        ],
        [
          4,
          0,
          0,
          0,
          0,
          0,
          8
        ],
        [
          0,
          0,
          5,
          0,
          0,
          1,
          4
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          5,
          0,
          0,
          1,
          4
        ],
        [
          4,
          0,
          0,
          0,
          0,
          0,
          8
        ],
        [
          0,
          0,
          0,
          0,
          5,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          5,
          0,
          5,
          4,
          8
        ],
        [
          0,
          0,
          1,
          6,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          5,
          0,
          5,
          4,
          8
        ],
        [
          0,
          0,
          1,
          6,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          1,
          6,
          0,
          2
        ],
        [
          0,
          5,
          0,
          5,
          4,
          8
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          6,
          4,
          0
        ],
        [
          0,
          6,
          0,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          6,
          4,
          0
        ],
        [
          0,
          6,
          0,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          6,
          0,
          0,
          2
        ],
        [
          0,
          0,
          6,
          4,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# reflection, symmetry\n\n# description:\n# In the input, you should see a series of colorful pixels.\n# The task is to reflect these colorful pixels around the center horizontal axis of the grid.\n# The reflected pixels should replace the black pixels on the other side of the axis.\n\ndef main(input_grid):\n    output_grid = np.copy(input_grid)\n    \n    height, width = input_grid.shape\n    mid_y = height // 2\n    \n    # Reflect pixels around the horizontal axis\n    for x in range(width):\n        for y in range(mid_y):\n            if input_grid[y, x] != Color.BLACK:\n                output_grid[height - y - 1, x] = input_grid[y, x]  # Reflecting the top part to bottom part\n\n    return output_grid\n\ndef generate_input():\n    height, width = np.random.randint(5, 8), np.random.randint(5, 8)  # Random grid size between 5x5 and 7x7\n    input_grid = np.zeros((height, width), dtype=int)\n\n    num_colored_pixels = np.random.randint(3, min(height * width, 10))  # Random number of colored pixels between 3 and 10\n    for _ in range(num_colored_pixels):\n        x = np.random.randint(0, width)\n        y = np.random.randint(0, height // 2)  # Pixels are placed in the top half only\n        color = np.random.choice(list(Color.NOT_BLACK))\n        input_grid[y, x] = color\n\n    return input_grid"
}