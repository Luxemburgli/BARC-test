{
  "uid": "0b6e29487e611574",
  "annotations": {
    "example": "ok",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          7,
          0,
          0,
          7,
          0
        ],
        [
          1,
          1,
          7,
          1,
          1,
          7
        ],
        [
          1,
          1,
          7,
          1,
          1,
          7
        ],
        [
          0,
          7,
          0,
          0,
          7,
          0
        ],
        [
          1,
          1,
          7,
          1,
          1,
          7
        ]
      ],
      "output": [
        [
          2,
          2,
          0,
          2,
          2,
          0,
          2,
          2,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          0,
          2,
          2,
          0,
          2,
          2,
          0
        ],
        [
          2,
          2,
          0,
          2,
          2,
          0,
          2,
          2,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          0,
          2,
          2,
          0,
          2,
          2,
          0
        ],
        [
          2,
          2,
          0,
          2,
          2,
          0,
          2,
          2,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          0,
          2,
          2,
          0,
          2,
          2,
          0
        ]
      ]
    },
    {
      "input": [
        [
          6,
          6,
          0,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          0,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          0,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6
        ]
      ],
      "output": [
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0
        ]
      ]
    },
    {
      "input": [
        [
          1,
          0,
          1,
          0,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          0,
          1,
          0,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          0,
          1,
          0,
          1
        ]
      ],
      "output": [
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ]
      ]
    },
    {
      "input": [
        [
          4,
          4,
          4,
          4
        ],
        [
          0,
          4,
          0,
          4
        ],
        [
          4,
          4,
          4,
          4
        ],
        [
          0,
          4,
          0,
          4
        ],
        [
          4,
          4,
          4,
          4
        ]
      ],
      "output": [
        [
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# translational symmetry, symmetry detection, colors, rotational symmetry\n\n# description:\n# In the input, you will see a grid with a pattern of colored pixels that repeats both horizontally and vertically.\n# To create the output:\n# 1. Detect the translational symmetry in both directions.\n# 2. Expand the grid to be 9x9, repeating the pattern as needed.\n# 3. Apply a 90-degree clockwise rotation to the entire expanded grid.\n# 4. For each color in the rotated grid, replace it with the next color in the sequence: \n#    RED -> GREEN -> BLUE -> YELLOW -> ORANGE -> PINK -> RED (cycle repeats)\n\ndef main(input_grid):\n    # Detect translational symmetries\n    symmetries = detect_translational_symmetry(input_grid, ignore_colors=[])\n    assert len(symmetries) > 0, \"No translational symmetry found\"\n\n    # Create 9x9 output grid\n    output_grid = np.full((9, 9), Color.BLACK)\n\n    # Expand the pattern to fill the 9x9 grid\n    for x, y in np.argwhere(input_grid != Color.BLACK):\n        for x2, y2 in orbit(output_grid, x, y, symmetries):\n            output_grid[x2, y2] = input_grid[x, y]\n\n    # Rotate the grid 90 degrees clockwise\n    output_grid = np.rot90(output_grid, k=-1)\n\n    # Define the color cycle\n    color_cycle = [Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW, Color.ORANGE, Color.PINK]\n\n    # Replace colors\n    for i, color in enumerate(color_cycle):\n        next_color = color_cycle[(i + 1) % len(color_cycle)]\n        output_grid[output_grid == color] = next_color\n\n    return output_grid\n\ndef generate_input():\n    # Create a small pattern with random colors\n    pattern_size = (np.random.randint(2, 4), np.random.randint(2, 4))\n    color_palette = np.random.choice([Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW, Color.ORANGE, Color.PINK], size=3, replace=False)\n    pattern = random_sprite(pattern_size[0], pattern_size[1], symmetry=\"not_symmetric\", color_palette=color_palette, density=0.7, connectivity=8)\n\n    # Create a larger grid by tiling the pattern\n    grid_size = (np.random.randint(4, 7), np.random.randint(4, 7))\n    input_grid = np.tile(pattern, (grid_size[0] // pattern_size[0] + 1, grid_size[1] // pattern_size[1] + 1))\n    input_grid = input_grid[:grid_size[0], :grid_size[1]]\n\n    return input_grid"
}