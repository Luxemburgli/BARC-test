{
  "uid": "bea9e8dae1c63e28",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          7,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          7
        ]
      ],
      "output": [
        [
          7,
          5,
          7,
          7,
          5,
          0,
          7,
          7,
          2
        ],
        [
          0,
          5,
          0,
          0,
          5,
          0,
          0,
          0,
          2
        ],
        [
          0,
          5,
          0,
          0,
          5,
          0,
          0,
          0,
          2
        ],
        [
          5,
          5,
          5,
          5,
          5,
          0,
          5,
          5,
          2
        ],
        [
          5,
          5,
          5,
          5,
          5,
          0,
          5,
          5,
          2
        ],
        [
          0,
          5,
          0,
          0,
          5,
          0,
          0,
          0,
          2
        ],
        [
          2,
          5,
          2,
          2,
          5,
          0,
          2,
          2,
          2
        ],
        [
          2,
          5,
          2,
          2,
          5,
          2,
          2,
          2,
          0
        ],
        [
          7,
          5,
          7,
          7,
          5,
          2,
          7,
          7,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          0,
          0,
          4,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          5,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          4
        ]
      ],
      "output": [
        [
          5,
          5,
          4,
          5,
          5,
          4,
          5,
          0
        ],
        [
          4,
          5,
          4,
          4,
          4,
          4,
          4,
          0
        ],
        [
          0,
          5,
          4,
          0,
          0,
          4,
          0,
          0
        ],
        [
          5,
          5,
          4,
          5,
          5,
          4,
          5,
          0
        ],
        [
          4,
          5,
          4,
          4,
          4,
          4,
          4,
          0
        ],
        [
          4,
          5,
          4,
          4,
          4,
          4,
          4,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          2,
          0,
          4,
          9,
          6,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          4,
          0,
          2,
          0,
          0
        ],
        [
          0,
          9,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          6,
          0,
          4,
          0,
          0,
          0,
          6
        ],
        [
          6,
          0,
          4,
          4,
          0,
          6,
          0
        ],
        [
          6,
          0,
          4,
          4,
          0,
          6,
          6
        ],
        [
          6,
          0,
          0,
          0,
          0,
          6,
          4
        ],
        [
          6,
          0,
          4,
          4,
          9,
          6,
          9
        ],
        [
          6,
          9,
          4,
          4,
          9,
          6,
          0
        ],
        [
          6,
          9,
          4,
          4,
          9,
          6,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          3,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          3,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          0,
          0
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          3,
          2
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          3,
          2
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          3,
          2
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          3,
          2
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          3,
          2
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          3,
          2
        ],
        [
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          3,
          2
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# direction, lines, intersection\n\n# description:\n# In the input grid, you will see several pairs of colored pixels. Each color pair corresponds to two endpoints: one should be the starting point of a vertical line and the other the starting point of a horizontal line.\n# The goal is to extend these colored pixels into lines until they hit the edge of the grid.\n# If two lines of different colors cross, the intersection point should be marked as black.\n\ndef main(input_grid):\n    # make output grid\n    output_grid = np.copy(input_grid)\n    \n    # get the indices of all color pixels except black\n    non_black_pixels = np.argwhere(input_grid != Color.BLACK)\n\n    # dictionary that keeps track of drawn lines\n    horizontal_lines = {}\n    vertical_lines = {}\n\n    # Extension lines for all colored pixels\n    for x, y in non_black_pixels:\n        color = input_grid[x, y]\n        if color not in horizontal_lines:\n            horizontal_lines[color] = []\n        if color not in vertical_lines:\n            vertical_lines[color] = []\n\n        # Draw vertical and horizontal lines through the grid until the edges\n        vertical_lines[color].append((x, y))\n        horizontal_lines[color].append((x, y))\n\n    # Extend vertical lines and intersect them with horizontal lines\n    for color, points in vertical_lines.items():\n        for point in points:\n            x, y = point\n            draw_line(output_grid, x, y, length=None, color=color, direction=(0, 1))\n            draw_line(output_grid, x, y, length=None, color=color, direction=(0, -1))\n\n    # Extend horizontal lines and intersect them with vertical lines\n    intersection_points = set()\n    for color, points in horizontal_lines.items():\n        for point in points:\n            x, y = point\n            draw_line(output_grid, x, y, length=None, color=color, direction=(1, 0))\n            draw_line(output_grid, x, y, length=None, color=color, direction=(-1, 0))\n\n            # Check intersection with different color lines\n            for v_color, v_points in vertical_lines.items():\n                if color != v_color:\n                    for v_point in v_points:\n                        vx, vy = v_point\n                        if vx == x and vy < y:\n                            for i in range(vy, y + 1):\n                                if output_grid[vx, i] == color:\n                                    intersection_points.add((vx, i))\n                        elif vx == x and vy > y:\n                            for i in range(y, vy + 1):\n                                if output_grid[vx, i] == color:\n                                    intersection_points.add((vx, i))\n                        elif vy == y and vx < x:\n                            for i in range(vx, x + 1):\n                                if output_grid[i, vy] == color:\n                                    intersection_points.add((i, vy))\n                        elif vy == y and vx > x:\n                            for i in range(x, vx + 1):\n                                if output_grid[i, vy] == color:\n                                    intersection_points.add((i, vy))\n\n    # Mark intersections points as black\n    for ix, iy in intersection_points:\n        output_grid[ix, iy] = Color.BLACK\n\n    return output_grid\n\ndef generate_input():\n    # make a grid of random size\n    n = random.randint(5, 10)\n    m = random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # choose random number of pairs of colored pixels, but at least 2 pairs\n    n_pairs = random.randint(2, 5)\n\n    for _ in range(n_pairs):\n        pair_color = random.choice(list(Color.NOT_BLACK))\n        \n        # Randomly place two pixels of the same color (forming a pair)\n        while True:\n            x1, y1 = random.randint(0, n - 1), random.randint(0, m - 1)\n            x2, y2 = random.randint(0, n - 1), random.randint(0, m - 1)\n            if grid[x1, y1] == Color.BLACK and grid[x2, y2] == Color.BLACK and not (x1 == x2 and y1 == y2):\n                grid[x1, y1] = pair_color\n                grid[x2, y2] = pair_color\n                break\n\n    return grid"
}