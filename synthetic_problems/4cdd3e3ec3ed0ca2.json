{
  "uid": "4cdd3e3ec3ed0ca2",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng14_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          0
        ],
        [
          0,
          2,
          2,
          0,
          0,
          6,
          6,
          6,
          0
        ],
        [
          0,
          2,
          0,
          0,
          0,
          6,
          0,
          6,
          0
        ],
        [
          0,
          2,
          2,
          0,
          5,
          5,
          5,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0
        ],
        [
          0,
          4,
          4,
          4,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          7,
          0,
          0,
          0,
          0,
          0,
          9,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          6,
          0
        ],
        [
          0,
          2,
          2,
          0,
          0,
          6,
          6,
          6,
          0
        ],
        [
          0,
          2,
          0,
          0,
          0,
          6,
          0,
          6,
          0
        ],
        [
          0,
          2,
          2,
          0,
          5,
          5,
          5,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0
        ],
        [
          0,
          4,
          4,
          4,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          7,
          0,
          0,
          0,
          0,
          0,
          9,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0,
          0,
          8,
          8,
          8
        ],
        [
          2,
          2,
          0,
          0,
          0,
          0,
          8,
          6,
          8
        ],
        [
          2,
          0,
          0,
          0,
          5,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          5,
          5,
          0,
          7,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          4,
          0,
          3,
          3,
          3
        ]
      ],
      "output": [
        [
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0,
          0,
          8,
          8,
          8
        ],
        [
          2,
          2,
          0,
          0,
          0,
          0,
          8,
          6,
          8
        ],
        [
          2,
          0,
          0,
          0,
          5,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          5,
          5,
          0,
          7,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          4,
          0,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          9,
          9,
          0,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          6,
          0,
          0,
          0,
          0,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          0,
          5
        ],
        [
          0,
          0,
          0,
          9,
          9,
          9,
          5,
          0,
          0
        ],
        [
          0,
          0,
          4,
          4,
          3,
          0,
          5,
          5,
          0
        ],
        [
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          9,
          9,
          0,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          9,
          0,
          0,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          6,
          0,
          0,
          0,
          0,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          0,
          5
        ],
        [
          0,
          0,
          0,
          9,
          9,
          9,
          5,
          0,
          0
        ],
        [
          0,
          0,
          4,
          4,
          3,
          0,
          5,
          5,
          0
        ],
        [
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          6,
          0,
          8,
          0,
          0
        ],
        [
          0,
          0,
          8,
          8,
          6,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          8,
          8,
          8,
          8,
          8,
          2,
          0
        ],
        [
          7,
          0,
          7,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          5,
          5,
          0,
          0,
          5,
          0,
          0
        ],
        [
          0,
          0,
          5,
          5,
          0,
          0,
          5,
          5,
          5
        ],
        [
          0,
          0,
          5,
          5,
          0,
          6,
          5,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          6,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          6,
          6,
          6,
          8,
          0,
          0
        ],
        [
          0,
          0,
          8,
          8,
          6,
          6,
          6,
          0,
          0
        ],
        [
          0,
          0,
          8,
          8,
          8,
          8,
          8,
          2,
          0
        ],
        [
          7,
          0,
          7,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          5,
          5,
          0,
          0,
          5,
          0,
          0
        ],
        [
          0,
          0,
          5,
          5,
          0,
          0,
          5,
          5,
          5
        ],
        [
          0,
          0,
          5,
          5,
          0,
          6,
          5,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          6,
          0,
          0,
          0
        ]
      ]
    }
  ],
  "code": "import numpy as np\nfrom typing import *\nfrom common import *\n\n# concepts:\n# symmetry, surrounding, growth, pathfinding\n\n# description:\n# The input will be a grid with multiple objects and a single \"seed\" pixel of a different color.\n# The seed pixel will start a \"growth\" process.\n# The growth will spread symmetrically in each direction.\n# The direction of growth will be determined by neighboring same-color pixels.\n# The same-color pixels (any color different from black) will act as barriers.\n# The objective is to fill the entire grid where possible with the growth color, while ensuring symmetry in growth direction.\n\ndef main(input_grid):\n    output_grid = np.copy(input_grid)\n    growth_color = None\n    seed_coords = None\n\n    # Step 1: Find the seed pixel and identify the growth color\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i, j] != Color.BLACK:\n                growth_color = input_grid[i, j]\n                seed_coords = (i, j)\n                break\n        if growth_color:\n            break\n\n    if not growth_color:\n        return output_grid  # No growth color found\n\n    # Step 2: Perform growth from the seed point, stopping at any non-black pixel\n    queue = [seed_coords]\n    while queue:\n        x, y = queue.pop(0)\n        if output_grid[x, y] == Color.BLACK:\n            output_grid[x, y] = growth_color\n        \n        # Check all 4-connected neighbors for open space or barriers\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if (0 <= nx < input_grid.shape[0] and 0 <= ny < input_grid.shape[1]):\n                if (output_grid[nx, ny] == Color.BLACK):\n                    if ((0 <= 2 * nx - x < input_grid.shape[0] and 0 <= 2 * ny - y < input_grid.shape[1])):\n                        # Check symmetry constraint\n                        if (input_grid[2 * nx - x, 2 * ny - y] != Color.BLACK):\n                            queue.append((nx, ny))\n                        else:\n                            output_grid[nx, ny] = growth_color\n\n    return output_grid\n\n\n# Input generation function\ndef generate_input():\n    # create a grid filled with black pixels\n    grid = np.zeros((9, 9), dtype=int)\n    \n    # randomly place objects with random colors\n    for _ in range(np.random.randint(5, 10)):\n        color = np.random.choice(Color.NOT_BLACK)\n        width, height = np.random.randint(1, 4), np.random.randint(1, 4)\n        sprite = random_sprite(width, height, color_palette=[color], connectivity=4)\n        x, y = random_free_location_for_object(grid, sprite)\n        blit(grid, sprite, x, y)\n    \n    # randomly place a seed pixel of new growth color\n    growth_color = np.random.choice([col for col in Color.NOT_BLACK if col not in grid])\n    seed_x, seed_y = np.random.randint(0, grid.shape[0]), np.random.randint(0, grid.shape[1])\n    grid[seed_x, seed_y] = growth_color\n    \n    return grid"
}