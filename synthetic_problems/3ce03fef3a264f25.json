{
  "uid": "3ce03fef3a264f25",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng0_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          6,
          7,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          7,
          6,
          0,
          0
        ],
        [
          0,
          0,
          7,
          2,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          7,
          2,
          7,
          0,
          0
        ],
        [
          0,
          0,
          6,
          7,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          7,
          6,
          0,
          0
        ],
        [
          7,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          7
        ],
        [
          2,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          7,
          2
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          9
        ],
        [
          0,
          0,
          9,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          6,
          7,
          6,
          9,
          9,
          7,
          7,
          6,
          0
        ],
        [
          0,
          7,
          9,
          7,
          7,
          6,
          6,
          9,
          7,
          0
        ],
        [
          0,
          6,
          7,
          6,
          0,
          0,
          6,
          7,
          6,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          5,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          7,
          5,
          7,
          7,
          5,
          7,
          7,
          6,
          6,
          7,
          6,
          5,
          7,
          7,
          5,
          7,
          0
        ],
        [
          0,
          6,
          7,
          6,
          6,
          7,
          6,
          5,
          7,
          7,
          5,
          7,
          7,
          6,
          6,
          7,
          6,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          7,
          6,
          6,
          7,
          6,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          6,
          7,
          6,
          6,
          0,
          0
        ],
        [
          0,
          0,
          7,
          2,
          2,
          7,
          0,
          0
        ],
        [
          0,
          0,
          6,
          7,
          6,
          6,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nimport random\nfrom typing import *\n\n# concepts:\n# Coloring diagonal pixels, repetition, symmetry\n\n# description:\n# Given an input grid of arbitrary size containing a small number (1-4) of colored pixels.\n# To produce the output, replicate the input grid 2 times; copy the grid once and reflect it horizontally to place them side by side.\n# Color all the diagonal and orthogonal pixels adjacent to a colored pixel with pink and orange respectively if they are originally black.\n\ndef main(input_grid):\n    # Reflect input grid horizontally and create output grid by placing original and the reflection side by side\n    reflected_grid = np.copy(np.fliplr(input_grid))\n    output_grid = np.concatenate((input_grid, reflected_grid), axis=1)\n    \n    # Directions for coloring pixels\n    diagonal_directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]\n    orthogonal_directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n\n    # Loop through cells and color adjacent pixels\n    for y in range(output_grid.shape[1]):\n        for x in range(output_grid.shape[0]):\n            if output_grid[x, y] != Color.BLACK and output_grid[x, y] != Color.PINK and output_grid[x, y] != Color.ORANGE:\n                for dx, dy in diagonal_directions:\n                    if 0 <= x + dx < output_grid.shape[0] and 0 <= y + dy < output_grid.shape[1] and output_grid[x + dx, y + dy] == Color.BLACK:\n                        output_grid[x + dx, y + dy] = Color.PINK\n                for dx, dy in orthogonal_directions:\n                    if 0 <= x + dx < output_grid.shape[0] and 0 <= y + dy < output_grid.shape[1] and output_grid[x + dx, y + dy] == Color.BLACK:\n                        output_grid[x + dx, y + dy] = Color.ORANGE\n    \n    return output_grid\n\n\ndef generate_input():\n    # Have 1 to 4 number of colored pixels in the initial square\n    n_colored_pixels = random.randint(1, 4)\n    \n    # Random pixel color that is not black, pink, or orange\n    pixel_color = random.choice(list(Color.NOT_BLACK))\n    while pixel_color in [Color.PINK, Color.ORANGE]:\n        pixel_color = random.choice(list(Color.NOT_BLACK))\n\n    # Random size of input grid\n    n, m = random.randint(2, 10), random.randint(2, 10)\n\n    # Initialize grid\n    grid = np.zeros((n, m), dtype=int)\n  \n    # Create a dummy sprite with one pixel\n    sprite = np.array([pixel_color]).reshape(1, 1)\n    \n    # Randomly place n_colored_pixels pixels on the grid\n    for _ in range(n_colored_pixels):\n        x, y = random_free_location_for_sprite(grid, sprite)\n        blit_sprite(grid, sprite, x, y)\n\n    return grid"
}