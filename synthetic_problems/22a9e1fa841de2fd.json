{
  "uid": "22a9e1fa841de2fd",
  "annotations": {
    "example": "good",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng16_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          4,
          4,
          2,
          0,
          0
        ],
        [
          0,
          0,
          2,
          4,
          4,
          0,
          0
        ],
        [
          0,
          0,
          2,
          4,
          4,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          2,
          2,
          4,
          0
        ],
        [
          0,
          0,
          0,
          4,
          4,
          4,
          0
        ],
        [
          0,
          0,
          4,
          4,
          4,
          2,
          0
        ],
        [
          4,
          4,
          2,
          4,
          4,
          0,
          0
        ],
        [
          4,
          4,
          2,
          4,
          4,
          0,
          0
        ],
        [
          2,
          4,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          2,
          4,
          4,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          9,
          2,
          9,
          0,
          0
        ],
        [
          0,
          0,
          2,
          2,
          9,
          0,
          0
        ],
        [
          0,
          0,
          9,
          2,
          9,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          9,
          2,
          9,
          0
        ],
        [
          0,
          0,
          0,
          2,
          2,
          2,
          0
        ],
        [
          0,
          0,
          9,
          9,
          9,
          9,
          0
        ],
        [
          9,
          2,
          9,
          2,
          9,
          0,
          0
        ],
        [
          9,
          2,
          2,
          2,
          9,
          0,
          0
        ],
        [
          9,
          2,
          9,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          9,
          9,
          9,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          1,
          5,
          1,
          0,
          0
        ],
        [
          0,
          0,
          1,
          1,
          5,
          0,
          0
        ],
        [
          0,
          0,
          1,
          5,
          5,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          5,
          0
        ],
        [
          0,
          0,
          1,
          5,
          5,
          1,
          0
        ],
        [
          5,
          5,
          1,
          1,
          5,
          0,
          0
        ],
        [
          5,
          1,
          1,
          5,
          5,
          0,
          0
        ],
        [
          1,
          5,
          1,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          1,
          5,
          5,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          5,
          3,
          5,
          0,
          0
        ],
        [
          0,
          0,
          5,
          5,
          3,
          0,
          0
        ],
        [
          0,
          0,
          3,
          3,
          5,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          3,
          5,
          5,
          0
        ],
        [
          0,
          0,
          0,
          3,
          5,
          3,
          0
        ],
        [
          0,
          0,
          5,
          5,
          3,
          5,
          0
        ],
        [
          5,
          3,
          3,
          5,
          3,
          0,
          0
        ],
        [
          3,
          5,
          5,
          3,
          5,
          0,
          0
        ],
        [
          5,
          3,
          5,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          3,
          5,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotational symmetry, tiling\n\n# description:\n# In the input, you will see a grid with a central tile. You are to rotate this tile around the center of the grid and fill in the missing tiles symmetrically to complete the grid. If the input tile extends beyond the grid, it should be cropped.\n\ndef main(input_grid):\n    # Find the center of the grid\n    center_x, center_y = input_grid.shape[0] // 2, input_grid.shape[1] // 2\n    \n    # Crop the central tile using a bounding box\n    central_tile = input_grid[center_x-1:center_x+2, center_y-1:center_y+2]\n    \n    # Initialize the output grid\n    output_grid = input_grid.copy()\n    \n    # Rotate the central tile 90, 180, 270 degrees and fill symmetrically\n    for i in range(1, 4):\n        rotated_tile = np.rot90(central_tile, k=i)\n        x_shift = center_x + (i % 2) * central_tile.shape[0] * (-1 if i > 2 else 1)\n        y_shift = center_y + ((i+1) % 2) * central_tile.shape[1] * (-1 if i > 1 else 1)\n        \n        # Adjust for boundary conditions\n        for x in range(central_tile.shape[0]):\n            for y in range(central_tile.shape[1]):\n                if 0 <= x + x_shift < output_grid.shape[0] and 0 <= y + y_shift < output_grid.shape[1]:\n                    output_grid[x + x_shift, y + y_shift] = rotated_tile[x, y]\n    \n    return output_grid\n\n\ndef generate_input():\n    # Pick random tile pattern\n    tile_color = np.random.choice(Color.NOT_BLACK)\n    tile_background = np.random.choice([color for color in Color.NOT_BLACK if color != tile_color])\n    \n    # Create a 3x3 tile\n    central_tile = np.full((3, 3), tile_background, dtype=int)\n    for _ in range(5):\n        central_tile[np.random.randint(0, 3), np.random.randint(0, 3)] = tile_color\n    \n    # Place the tile in the center of a larger grid\n    grid_size = 7\n    input_grid = np.full((grid_size, grid_size), Color.BLACK, dtype=int)\n    input_grid[grid_size//2 - 1:grid_size//2 + 2, grid_size//2 - 1:grid_size//2 + 2] = central_tile\n    \n    return input_grid\n\n# Testing the functions\nif __name__ == '__main__':\n    grid_in = generate_input()\n    print(\"Input Grid:\")\n    print(grid_in)\n    grid_out = main(grid_in)\n    print(\"Output Grid:\")\n    print(grid_out)"
}