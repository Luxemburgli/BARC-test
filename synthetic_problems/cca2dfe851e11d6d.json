{
  "uid": "cca2dfe851e11d6d",
  "annotations": {
    "example": "ok",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng0_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          4,
          4,
          4,
          4,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          4,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          4
        ],
        [
          4,
          4,
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          4
        ],
        [
          4,
          4,
          4,
          0,
          0,
          0,
          0,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          0,
          0,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ]
      ]
    },
    {
      "input": [
        [
          3,
          3,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3
        ],
        [
          3,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          3
        ],
        [
          3,
          3,
          3,
          0,
          0,
          0,
          0,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          0,
          0,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          3,
          3,
          3,
          3,
          3,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3
        ],
        [
          3,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          3
        ],
        [
          3,
          3,
          3,
          0,
          0,
          0,
          0,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          0,
          0,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          5
        ],
        [
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          0,
          0,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n\n# concepts:\n# counting, incrementing, horizontal bars, patterns\n\n# description:\n# In the input, you will see a row partially filled with pixels of one color from the left.\n# To make the output: \n# 1. Copy the partially filled row horizontally.\n# 2. Each row increases the count of colored pixels from the previous row by one.\n# 3. Each new row is mirrored horizontally.\n# 4. Repeat until you fill the grid vertically.\n\n\ndef main(input_grid):\n    # Get the size of the input grid\n    input_height, input_width = input_grid.shape\n\n    # Determine the color used for the horizontal bar\n    unique_colors = set(input_grid[input_grid != Color.BLACK])\n    if len(unique_colors) != 1:\n        raise ValueError(\"The input grid must have exactly one unique non-black color.\")\n    color = unique_colors.pop()\n\n    # Create an empty output grid of 10 rows by 10 columns\n    output_height = 10\n    output_width = 10\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n\n    # Generate the increasing horizontal bars with mirroring\n    for i in range(output_height):\n        # Calculate number of colored pixels\n        num_colored_pixels = min(i + 1, output_width // 2)  # Half as maximum before mirroring\n\n        # Create the bar with spacing for mirroring\n        bar = [color] * num_colored_pixels + [Color.BLACK] * (output_width - 2 * num_colored_pixels) + [color] * num_colored_pixels\n\n        # Place the bar in the corresponding row\n        output_grid[i] = bar\n\n    return output_grid\n\n\ndef generate_input():\n    # Create an empty 1x10 grid\n    input_grid = np.zeros((1, 10), dtype=int)\n\n    # Decide the color to partially fill the row\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Randomly choose how many pixels to fill initially\n    num_colored_pixels = np.random.randint(1, 6)\n\n    # Fill the row with the chosen color\n    input_grid[0, :num_colored_pixels] = color\n\n    return input_grid\n\n# Example usage"
}