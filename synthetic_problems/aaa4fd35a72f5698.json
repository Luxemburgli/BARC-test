{
  "uid": "aaa4fd35a72f5698",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_6_gpt-4o_temp1.00_maxtokens2048_rng0_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          8,
          1,
          0,
          0,
          0
        ],
        [
          0,
          9,
          1,
          1,
          0,
          0
        ],
        [
          0,
          0,
          9,
          8,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          8,
          8,
          9,
          8,
          9,
          8,
          8,
          8,
          9,
          8,
          9,
          8,
          8,
          8,
          9,
          8,
          9,
          8
        ],
        [
          0,
          9,
          1,
          1,
          1,
          9,
          0,
          9,
          1,
          1,
          1,
          9,
          0,
          9,
          1,
          1,
          1,
          9
        ],
        [
          8,
          8,
          1,
          8,
          1,
          8,
          8,
          8,
          1,
          8,
          1,
          8,
          8,
          8,
          1,
          8,
          1,
          8
        ],
        [
          0,
          9,
          1,
          1,
          1,
          9,
          0,
          9,
          1,
          1,
          1,
          9,
          0,
          9,
          1,
          1,
          1,
          9
        ],
        [
          8,
          8,
          9,
          8,
          9,
          8,
          8,
          8,
          9,
          8,
          9,
          8,
          8,
          8,
          9,
          8,
          9,
          8
        ],
        [
          0,
          8,
          0,
          8,
          0,
          8,
          0,
          8,
          0,
          8,
          0,
          8,
          0,
          8,
          0,
          8,
          0,
          8
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          9,
          2,
          0,
          0
        ],
        [
          0,
          9,
          9,
          0,
          0,
          0
        ],
        [
          0,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          2,
          9,
          9,
          2,
          8,
          8,
          2,
          9,
          9,
          2,
          8,
          8,
          2,
          9,
          9,
          2,
          8,
          0
        ],
        [
          2,
          9,
          9,
          2,
          8,
          8,
          2,
          9,
          9,
          2,
          8,
          8,
          2,
          9,
          9,
          2,
          8,
          0
        ],
        [
          8,
          2,
          2,
          8,
          8,
          8,
          8,
          2,
          2,
          8,
          8,
          8,
          8,
          2,
          2,
          8,
          8,
          0
        ],
        [
          8,
          8,
          8,
          8,
          0,
          0,
          8,
          8,
          8,
          8,
          0,
          0,
          8,
          8,
          8,
          8,
          0,
          0
        ],
        [
          0,
          2,
          2,
          0,
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          2,
          0,
          2,
          0,
          0
        ],
        [
          1,
          3,
          0,
          0,
          0
        ],
        [
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          2,
          1,
          2,
          8,
          8,
          2,
          1,
          2,
          8,
          8,
          2,
          1,
          2,
          8,
          0
        ],
        [
          1,
          3,
          1,
          8,
          8,
          1,
          3,
          1,
          8,
          8,
          1,
          3,
          1,
          8,
          0
        ],
        [
          2,
          1,
          2,
          8,
          8,
          2,
          1,
          2,
          8,
          8,
          2,
          1,
          2,
          8,
          0
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          1,
          1
        ],
        [
          0,
          0,
          1,
          0,
          1
        ],
        [
          0,
          0,
          0,
          1,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          0,
          8,
          1,
          1,
          1,
          8,
          8,
          1,
          1,
          1,
          8,
          8,
          1,
          1,
          1
        ],
        [
          0,
          8,
          1,
          8,
          1,
          8,
          8,
          1,
          8,
          1,
          8,
          8,
          1,
          8,
          1
        ],
        [
          0,
          8,
          1,
          1,
          1,
          8,
          8,
          1,
          1,
          1,
          8,
          8,
          1,
          1,
          1
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, repetition, coloring diagonal pixels\n\n# description:\n# Given an input grid containing colored shapes with diagonal symmetry but partially covered by black pixels, the task is to restore the symmetry for each shape.\n# Then replicate the entire grid three times horizontally. Finally, any black pixel adjacent to a colored pixel in the output grid should be colored teal.\n\ndef main(input_grid):\n    # Restore the symmetry of each shape\n    output_grid = input_grid.copy()\n    sym = detect_rotational_symmetry(input_grid, ignore_colors=[Color.BLACK])\n    \n    for x, y in np.argwhere(input_grid != Color.BLACK):\n        color = input_grid[x, y]\n        for i in range(1, 4):\n            rotated_x, rotated_y = sym.apply(x, y, iters=i)\n            if output_grid[rotated_x, rotated_y] == Color.BLACK:\n                output_grid[rotated_x, rotated_y] = color\n\n    # Initialize horizontally repeated grid\n    h_rep_grid = np.zeros((output_grid.shape[0], 3 * output_grid.shape[1]), dtype=int)\n\n    for i in range(3):\n        blit_sprite(h_rep_grid, output_grid, 0, i * output_grid.shape[1])\n\n    # Color black pixels adjacent to colored pixels as Teal\n    diagonal_dx_dy = [(1, 1), (-1, 1), (1, -1), (-1, -1)]\n    \n    for y in range(h_rep_grid.shape[1]):\n        for x in range(h_rep_grid.shape[0]):\n            if h_rep_grid[x, y] != Color.BLACK and h_rep_grid[x, y] != Color.TEAL:\n                for dx, dy in diagonal_dx_dy:\n                    if (0 <= x + dx < h_rep_grid.shape[0] and \n                        0 <= y + dy < h_rep_grid.shape[1] and \n                        h_rep_grid[x + dx, y + dy] == Color.BLACK):\n                        h_rep_grid[x + dx, y + dy] = Color.TEAL\n\n    return h_rep_grid\n\n\ndef generate_input():\n    n, m = np.random.randint(5, 7), np.random.randint(5, 7)\n    grid = np.zeros((n, m), dtype=int)\n    \n    # Create diagonally symmetric sprite\n    sprite = random_sprite(3, 3, density=0.5, symmetry=\"diagonal\", color_palette=list(Color.NOT_BLACK))\n    \n    # Randomly remove pixels to create partial occlusion\n    for i in range(sprite.shape[0]):\n        for j in range(sprite.shape[1]):\n            if np.random.random() < 0.2:\n                sprite[i, j] = Color.BLACK\n\n    # Place sprites randomly on the grid\n    x, y = random_free_location_for_sprite(grid, sprite)\n    blit_sprite(grid, sprite, x, y)\n\n    return grid"
}