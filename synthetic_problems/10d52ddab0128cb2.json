{
  "uid": "10d52ddab0128cb2",
  "annotations": {
    "example": "good",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng0_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          4,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6
        ]
      ],
      "output": [
        [
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          4,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          4,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          6,
          6
        ],
        [
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          4,
          6,
          6,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          4,
          6,
          6
        ],
        [
          6,
          6,
          4,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          6,
          6,
          6,
          6
        ]
      ]
    },
    {
      "input": [
        [
          7,
          7,
          7,
          4
        ],
        [
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7
        ]
      ],
      "output": [
        [
          4,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          4
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0
        ],
        [
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          4,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          4,
          0,
          0,
          0,
          0,
          7,
          7,
          7,
          7
        ]
      ]
    },
    {
      "input": [
        [
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          9,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5
        ]
      ],
      "output": [
        [
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          9,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          9,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          9,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          9,
          5,
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          5,
          9,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          5,
          5,
          5,
          5,
          5
        ]
      ]
    },
    {
      "input": [
        [
          6,
          6,
          6
        ],
        [
          6,
          6,
          6
        ],
        [
          6,
          5,
          6
        ]
      ],
      "output": [
        [
          6,
          6,
          6,
          0,
          0,
          0,
          6,
          5,
          6
        ],
        [
          6,
          6,
          6,
          0,
          0,
          0,
          6,
          6,
          6
        ],
        [
          6,
          5,
          6,
          0,
          0,
          0,
          6,
          6,
          6
        ],
        [
          0,
          0,
          0,
          6,
          6,
          6,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          6,
          6,
          6,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          6,
          5,
          6,
          0,
          0,
          0
        ],
        [
          6,
          5,
          6,
          0,
          0,
          0,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          0,
          0,
          0,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          0,
          0,
          0,
          6,
          5,
          6
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# growing, patterns, reflection symmetry, colors as indicators\n\n# description:\n# In the input you will see a colored pattern with a central differently-colored pixel. \n# Identify the color of this central pixel. Create horizontal and vertical reflections of the input grid that symmetrically surround the given input grid. \n# The output grid will be 3 times the size of the input grid in both dimensions (n*3 x m*3). \n# Place horizontal and vertical reflections of the input grid at all four corners in the output grid. \n# Keep the central differently-colored pixel in both reflections replaced by its color in all the copies formed.\n\ndef main(input_grid):\n    # Get the dimensions of the input grid\n    n, m = input_grid.shape\n\n    # Initialize the output grid\n    output_grid = np.zeros((n * 3, m * 3), dtype=int)\n    \n    # Copy the input grid to the center of the output grid\n    output_grid[n:2*n, m:2*m] = input_grid\n\n    # Find the different colored pixel in the center\n    colors, counts = np.unique(input_grid, return_counts=True)\n    center_color = colors[np.argmin(counts)]\n\n    # Create horizontal and vertical reflections\n    left_reflection = np.flip(input_grid, axis=1)\n    right_reflection = np.flip(input_grid, axis=0)\n    top_reflection = np.flip(input_grid, axis=0)\n    bottom_reflection = np.flip(input_grid, axis=1)\n    \n    # Place the reflections in the output grid\n    output_grid[0:n, 0:m] = left_reflection\n    output_grid[2*n:3*n, 0:m] = right_reflection\n    output_grid[0:n, 2*m:3*m] = top_reflection\n    output_grid[2*n:3*n, 2*m:3*m] = bottom_reflection\n\n    # Replace the differential pixel's new color across reflections\n    output_grid[0:n, m:2*m][output_grid[0:n, m:2*m] == center_color] = center_color\n    output_grid[2*n:3*n, m:2*m][output_grid[2*n:3*n, m:2*m] == center_color] = center_color\n    output_grid[n:2*n, 0:m][output_grid[n:2*n, 0:m] == center_color] = center_color\n    output_grid[n:2*n, 2*m:3*m][output_grid[n:2*n, 2*m:3*m] == center_color] = center_color\n    \n    return output_grid\n\ndef generate_input():\n    # Create random dimensions for the input grid\n    n, m = np.random.randint(3, 6, size=2)\n    \n    # Create random color for the pattern\n    pattern_color = np.random.choice(list(Color.NOT_BLACK))\n    \n    # Create a random color for the central pixel different from the pattern color\n    center_color = np.random.choice(list(Color.NOT_BLACK))\n    while center_color == pattern_color:\n        center_color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create the input grid with pattern color\n    input_grid = np.full((n, m), pattern_color)\n\n    # Place the center color pixel randomly in the grid\n    center_x, center_y = np.random.randint(n), np.random.randint(m)\n    input_grid[center_x, center_y] = center_color\n    \n    return input_grid"
}