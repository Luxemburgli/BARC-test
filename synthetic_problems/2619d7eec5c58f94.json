{
  "uid": "2619d7eec5c58f94",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          1,
          0
        ],
        [
          1,
          0,
          1
        ],
        [
          1,
          1,
          0
        ],
        [
          1,
          1,
          0
        ],
        [
          0,
          1,
          0
        ],
        [
          0,
          1,
          0
        ]
      ],
      "output": [
        [
          0,
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0
        ],
        [
          1,
          0,
          1,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4
        ],
        [
          1,
          1,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0
        ],
        [
          1,
          1,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0
        ],
        [
          0,
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0
        ],
        [
          0,
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          1,
          1
        ],
        [
          1,
          0,
          1
        ],
        [
          1,
          0,
          0
        ],
        [
          0,
          1,
          0
        ],
        [
          0,
          1,
          0
        ],
        [
          0,
          1,
          1
        ]
      ],
      "output": [
        [
          0,
          1,
          1,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4
        ],
        [
          1,
          0,
          1,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4
        ],
        [
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0
        ],
        [
          0,
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0
        ],
        [
          0,
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0
        ],
        [
          0,
          1,
          1,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          1
        ],
        [
          0,
          0,
          1
        ],
        [
          0,
          0,
          1
        ],
        [
          0,
          1,
          0
        ],
        [
          1,
          1,
          1
        ],
        [
          1,
          1,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4
        ],
        [
          0,
          0,
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4
        ],
        [
          0,
          0,
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4
        ],
        [
          0,
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0
        ],
        [
          1,
          1,
          1,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          1,
          1,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0
        ]
      ]
    },
    {
      "input": [
        [
          1,
          0,
          0
        ],
        [
          1,
          0,
          0
        ],
        [
          1,
          1,
          0
        ],
        [
          1,
          1,
          1
        ],
        [
          0,
          0,
          1
        ],
        [
          0,
          1,
          0
        ]
      ],
      "output": [
        [
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0
        ],
        [
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0
        ],
        [
          1,
          1,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0,
          4,
          4,
          0
        ],
        [
          1,
          1,
          1,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          0,
          0,
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4
        ],
        [
          0,
          1,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0,
          0,
          4,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# translational symmetry, patterns, color change, symmetry detection, objects\n\n# description:\n# In the input you will see a grid consisting of a blue sprite that is repeatedly translated horizontally, forming a row of the same sprite.\n# To make the output, expand the input to have width 15, and continue to repeatedly translate the sprite horizontally. Change color of the translated parts to yellow.\n\ndef main(input_grid):\n    # Plan:\n    # 1. Find the repeated translation, which is a symmetry\n    # 2. Extend the pattern by copying the sprite and its symmetric copies\n    # 3. Change the color from blue to yellow for the added translations\n    \n    symmetries = detect_translational_symmetry(input_grid, ignore_colors=[])\n    assert len(symmetries) > 0, \"No translational symmetry found\"\n\n    # make the output (the width is now 15)\n    output_grid = np.full((input_grid.shape[0], 15), Color.BLACK)\n    \n    # Copy all of the input pixels to the output, INCLUDING their symmetric copies (i.e. their orbit)\n    for x, y in np.argwhere(input_grid != Color.BLACK):\n        # Compute the orbit into the output grid\n        for x2, y2 in orbit(output_grid, x, y, symmetries):\n            output_grid[x2, y2] = input_grid[x, y]\n    \n    # Now we need to extend the pattern horizontally\n    for x2, y2 in np.argwhere(output_grid[:input_grid.shape[0], :input_grid.shape[1]] != Color.BLACK):\n        # Start from the end of the original pattern and translate it horizontally\n        x, y = x2, y2 + input_grid.shape[1]\n        while x < output_grid.shape[0] and y < output_grid.shape[1]:\n            output_grid[x, y] = Color.YELLOW\n            y += input_grid.shape[1]\n\n    return output_grid\n\ndef generate_input():\n    # grid is always 6x3\n    grid = np.zeros((6, 3), dtype=int)\n\n    # The input is always blue\n    color = Color.BLUE\n\n    # Creates a random smaller sprite, where the width (period) is chosen randomly\n    width = random.randint(2, 4)\n    sprite = random_sprite(6, width, symmetry=\"not_symmetric\", color_palette=[color], density=0.4, connectivity=8)\n\n    # place the smaller pattern, tiling it so that it is repeated horizontally\n    # tile \"infinitely\" (x100)\n    horizontally_repeated = np.tile(sprite, (100, 1))\n    # crop to the size of the grid\n    horizontally_repeated = horizontally_repeated[:grid.shape[0], :]\n    # copy to the grid\n    grid[:, :] = horizontally_repeated\n\n    return grid"
}