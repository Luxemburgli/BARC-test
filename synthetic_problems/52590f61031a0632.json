{
  "uid": "52590f61031a0632",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          1,
          9,
          0,
          1,
          0,
          0,
          1,
          9,
          9,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          9,
          9,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          9,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          9,
          0,
          1,
          9,
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          9,
          0,
          1,
          0,
          0,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          9
        ],
        [
          9,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          9,
          9,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          0,
          9,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          9,
          0,
          1,
          0
        ],
        [
          0,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          9,
          0,
          1,
          0,
          9,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          9,
          9,
          1,
          0
        ],
        [
          0,
          1,
          9,
          9,
          1,
          0,
          0,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          9,
          0,
          1,
          9
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          9,
          0,
          1,
          0,
          0,
          1,
          9,
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          0,
          1,
          9,
          9,
          1,
          0,
          0,
          1,
          9,
          0,
          1,
          9,
          0,
          1,
          0,
          0,
          1,
          9,
          0,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          9,
          0,
          1,
          0,
          0,
          1,
          9
        ],
        [
          0,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          9,
          0,
          1,
          9
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          9,
          1,
          0,
          0,
          1,
          0,
          9,
          1,
          0,
          0,
          1,
          9,
          9,
          1,
          0,
          0,
          1,
          0,
          0,
          1,
          0
        ]
      ],
      "output": [
        [
          0,
          1,
          9
        ],
        [
          1,
          1,
          1
        ],
        [
          0,
          1,
          0
        ]
      ]
    },
    {
      "input": [
        [
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3
        ],
        [
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0
        ],
        [
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3
        ],
        [
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3
        ],
        [
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3
        ],
        [
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0
        ],
        [
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3
        ],
        [
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3
        ],
        [
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3
        ],
        [
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0
        ],
        [
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3
        ],
        [
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3
        ],
        [
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3
        ],
        [
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0
        ],
        [
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3
        ],
        [
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3
        ],
        [
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3
        ],
        [
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0
        ],
        [
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3
        ],
        [
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3
        ],
        [
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3
        ],
        [
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0
        ],
        [
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3
        ],
        [
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3,
          3,
          3,
          0,
          3
        ]
      ],
      "output": [
        [
          3,
          0
        ],
        [
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6
        ],
        [
          6,
          3,
          5,
          5,
          6,
          3,
          5,
          5,
          6,
          3,
          3,
          6,
          6,
          3,
          3,
          6,
          6,
          3,
          3,
          6,
          5,
          5,
          3,
          6,
          6,
          5,
          5,
          6
        ],
        [
          6,
          3,
          5,
          5,
          6,
          3,
          5,
          5,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6,
          5,
          5,
          3,
          6,
          6,
          3,
          3,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6,
          6,
          3,
          5,
          5,
          5,
          5,
          3,
          6,
          6,
          3,
          5,
          5,
          5,
          5,
          3,
          6
        ],
        [
          6,
          3,
          3,
          6,
          6,
          3,
          3,
          6,
          6,
          3,
          3,
          6,
          6,
          3,
          5,
          5,
          5,
          5,
          3,
          6,
          6,
          3,
          5,
          5,
          5,
          5,
          3,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6
        ],
        [
          6,
          3,
          3,
          6,
          6,
          5,
          5,
          6,
          6,
          3,
          3,
          6,
          5,
          5,
          3,
          6,
          6,
          3,
          5,
          5,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6
        ],
        [
          6,
          5,
          5,
          6,
          6,
          3,
          3,
          6,
          6,
          5,
          5,
          6,
          5,
          5,
          3,
          6,
          6,
          3,
          5,
          5,
          6,
          3,
          3,
          6,
          6,
          3,
          3,
          6
        ],
        [
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          5,
          5,
          6,
          6,
          3,
          5,
          5,
          6,
          5,
          5,
          6,
          6,
          3,
          3,
          6,
          6,
          3,
          3,
          6,
          5,
          5,
          3,
          6,
          5,
          5,
          3,
          6
        ],
        [
          6,
          3,
          3,
          6,
          6,
          3,
          5,
          5,
          6,
          3,
          3,
          6,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6,
          5,
          5,
          3,
          6,
          5,
          5,
          3,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          5,
          5,
          3,
          6,
          6,
          3,
          5,
          5,
          5,
          5,
          3,
          6,
          6,
          3,
          3,
          6,
          6,
          3,
          5,
          5,
          6,
          3,
          5,
          5,
          6,
          3,
          3,
          6
        ],
        [
          5,
          5,
          3,
          6,
          6,
          3,
          5,
          5,
          5,
          5,
          3,
          6,
          6,
          5,
          5,
          6,
          6,
          3,
          5,
          5,
          6,
          3,
          5,
          5,
          6,
          5,
          5,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6
        ],
        [
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6
        ],
        [
          6,
          5,
          5,
          6,
          6,
          3,
          5,
          5,
          5,
          5,
          3,
          6,
          5,
          5,
          3,
          6,
          6,
          3,
          3,
          6,
          6,
          3,
          5,
          5,
          6,
          5,
          5,
          6
        ],
        [
          6,
          3,
          3,
          6,
          6,
          3,
          5,
          5,
          5,
          5,
          3,
          6,
          5,
          5,
          3,
          6,
          6,
          5,
          5,
          6,
          6,
          3,
          5,
          5,
          6,
          3,
          3,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6
        ],
        [
          6,
          3,
          3,
          6,
          6,
          5,
          5,
          6,
          6,
          3,
          3,
          6,
          6,
          5,
          5,
          6,
          6,
          3,
          3,
          6,
          6,
          5,
          5,
          6,
          6,
          5,
          5,
          6
        ],
        [
          6,
          5,
          5,
          6,
          6,
          3,
          3,
          6,
          6,
          5,
          5,
          6,
          6,
          3,
          3,
          6,
          6,
          5,
          5,
          6,
          6,
          3,
          3,
          6,
          6,
          3,
          3,
          6
        ],
        [
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ]
      ],
      "output": [
        [
          6,
          6,
          6,
          6
        ],
        [
          6,
          3,
          5,
          5
        ],
        [
          6,
          3,
          5,
          5
        ],
        [
          6,
          6,
          6,
          6
        ]
      ]
    },
    {
      "input": [
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ]
      ],
      "output": [
        [
          2
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n\n# concepts:\n# repeating pattern, translational symmetry, rotational symmetry\n\n# description:\n# In the input grid, you will see a smaller pattern repeated multiple times in a larger grid. Each instance of the pattern may be rotated by 90, 180, or 270 degrees, but the pattern remains the same.\n# To make the output, identify the repeated pattern and return it in its original orientation.\n\ndef main(input_grid):\n    def rotations(sprite):\n        \"\"\"\n        Generate all rotations of a sprite (0, 90, 180, 270 degrees)\n        \"\"\"\n        rots = [sprite, np.rot90(sprite, k=1), np.rot90(sprite, k=2), np.rot90(sprite, k=3)]\n        return rots\n\n    def find_pattern(grid):\n        \"\"\"\n        Find the pattern repeated in the grid by checking for translational symmetry.\n        \"\"\"\n        n, m = grid.shape\n        for size in range(1, min(n, m) // 2 + 1):\n            # Extract a candidate pattern and check if it tiles the grid with any rotation\n            candidate_pattern = grid[:size, :size]\n            if all(\n                any(np.array_equal(grid[i:i + size, j:j + size], r) for r in rotations(candidate_pattern))\n                for i in range(0, n, size)\n                for j in range(0, m, size)\n                if i + size <= n and j + size <= m\n            ):\n                return candidate_pattern\n\n    pattern = find_pattern(input_grid)\n    return pattern\n\ndef generate_input():\n    # Create the sprite to be duplicated; pick a trio of random colors\n    n = np.random.randint(2, 5)\n    sprite = random_sprite(n, n, color_palette=random.sample(list(Color.NOT_BLACK),3))\n    \n    # Create a larger grid and fill it with rotated copies of the sprite\n    large_n = n * np.random.randint(5, 8)  # larger grid roughly 5-7 times the sprite size\n    large_grid = np.zeros((large_n, large_n), dtype=int)\n    \n    for i in range(0, large_n, n):\n        for j in range(0, large_n, n):\n            rotated_sprite = np.rot90(sprite, k=np.random.choice([0, 1, 2, 3]))\n            blit_sprite(large_grid, rotated_sprite, i, j)\n    \n    return large_grid"
}