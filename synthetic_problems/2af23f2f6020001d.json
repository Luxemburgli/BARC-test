{
  "uid": "2af23f2f6020001d",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng16_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          0,
          0
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          0,
          0,
          0,
          0
        ],
        [
          0,
          5,
          0,
          0,
          0,
          0
        ],
        [
          0,
          5,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          5,
          0
        ],
        [
          0,
          0,
          0,
          0,
          5,
          0
        ],
        [
          0,
          0,
          0,
          0,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          0,
          0,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ]
    },
    {
      "input": [
        [
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          0,
          0,
          2,
          2,
          0,
          0
        ],
        [
          0,
          0,
          2,
          2,
          0,
          0
        ],
        [
          0,
          0,
          2,
          2,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          2,
          2,
          0,
          0
        ],
        [
          0,
          0,
          2,
          2,
          0,
          0
        ],
        [
          0,
          0,
          2,
          2,
          0,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          9,
          9,
          9,
          9
        ],
        [
          0,
          0,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          0,
          9,
          0,
          9
        ],
        [
          9,
          9,
          9,
          0,
          0,
          9
        ],
        [
          9,
          9,
          0,
          0,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9
        ]
      ],
      "output": [
        [
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          0,
          0,
          9,
          9
        ],
        [
          9,
          0,
          0,
          9,
          9,
          9
        ],
        [
          9,
          0,
          9,
          0,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          0,
          0
        ],
        [
          9,
          9,
          9,
          9,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          9,
          9,
          9,
          9,
          0
        ],
        [
          9,
          9,
          9,
          9,
          9,
          0
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          0,
          0,
          0
        ],
        [
          9,
          9,
          9,
          0,
          0,
          0
        ],
        [
          9,
          9,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          9,
          9
        ],
        [
          0,
          0,
          0,
          9,
          9,
          9
        ],
        [
          0,
          0,
          0,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          0,
          9,
          9,
          9,
          9,
          9
        ],
        [
          0,
          9,
          9,
          9,
          9,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# reflection, symmetry\n\n# description:\n# In the input you will see a grid with an arbitrary colored pattern.\n# To make the output, reflect the pattern horizontally and vertically around the central point of the grid.\n\ndef main(input_grid):\n    h, w = input_grid.shape\n    output_grid = np.copy(input_grid)\n    \n    # Reflect horizontally\n    for x in range(h):\n        for y in range(w // 2):\n            output_grid[x, y], output_grid[x, w - y - 1] = output_grid[x, w - y - 1], output_grid[x, y]\n    \n    # Reflect vertically\n    for y in range(w):\n        for x in range(h // 2):\n            output_grid[x, y], output_grid[h - x - 1, y] = output_grid[h - x - 1, y], output_grid[x, y]\n    \n    return output_grid\n\n\ndef generate_input():\n    # Create a grid with a random color pattern\n    n = m = np.random.randint(5, 10)\n    input_grid = random_sprite(n, m)\n\n    return input_grid"
}