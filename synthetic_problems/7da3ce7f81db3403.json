{
  "uid": "7da3ce7f81db3403",
  "annotations": {
    "example": "good",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          1,
          1
        ],
        [
          1,
          0,
          0,
          1,
          0
        ],
        [
          1,
          1,
          1,
          0,
          1
        ],
        [
          0,
          1,
          1,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          1,
          1,
          0,
          0,
          1
        ],
        [
          5,
          5,
          5,
          5,
          5
        ],
        [
          1,
          0,
          1,
          0,
          1
        ],
        [
          1,
          0,
          1,
          1,
          1
        ],
        [
          1,
          1,
          0,
          1,
          0
        ],
        [
          1,
          1,
          0,
          0,
          0
        ],
        [
          1,
          1,
          1,
          1,
          0
        ],
        [
          1,
          1,
          1,
          0,
          1
        ],
        [
          1,
          1,
          1,
          0,
          1
        ]
      ],
      "output": [
        [
          2,
          1,
          2,
          0,
          1
        ],
        [
          1,
          1,
          2,
          1,
          2
        ],
        [
          1,
          1,
          0,
          2,
          0
        ],
        [
          2,
          1,
          0,
          1,
          0
        ],
        [
          2,
          2,
          2,
          2,
          1
        ],
        [
          2,
          1,
          1,
          0,
          2
        ],
        [
          1,
          1,
          2,
          1,
          1
        ]
      ]
    },
    {
      "input": [
        [
          1,
          0,
          0,
          0,
          0,
          1,
          1
        ],
        [
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ],
        [
          1,
          0,
          0,
          1,
          1,
          1,
          0
        ],
        [
          1,
          0,
          1,
          1,
          1,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          1,
          1,
          1,
          1,
          1,
          0,
          1
        ],
        [
          1,
          0,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ],
        [
          1,
          0,
          1,
          0,
          0,
          1,
          1
        ]
      ],
      "output": [
        [
          1,
          2,
          2,
          2,
          2,
          0,
          1
        ],
        [
          2,
          1,
          2,
          2,
          1,
          1,
          1
        ],
        [
          0,
          1,
          1,
          0,
          1,
          1,
          2
        ],
        [
          1,
          1,
          1,
          0,
          0,
          2,
          2
        ]
      ]
    },
    {
      "input": [
        [
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0
        ],
        [
          0,
          1,
          0,
          1,
          0,
          1,
          1,
          1
        ],
        [
          1,
          0,
          1,
          1,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          1,
          0,
          1,
          0,
          0,
          1,
          1,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0
        ],
        [
          1,
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          0,
          0,
          1,
          1,
          1,
          0
        ]
      ],
      "output": [
        [
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1
        ],
        [
          2,
          0,
          1,
          0,
          1,
          1,
          1,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0,
          1,
          1,
          1
        ],
        [
          2,
          2,
          0,
          1,
          2,
          2,
          2,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          1,
          1,
          0,
          1,
          0
        ],
        [
          1,
          0,
          0,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          0,
          1,
          0
        ],
        [
          1,
          0,
          0,
          1,
          0,
          0
        ],
        [
          0,
          1,
          0,
          1,
          1,
          0
        ],
        [
          1,
          1,
          0,
          1,
          1,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          1,
          0,
          1,
          1
        ],
        [
          1,
          1,
          0,
          0,
          0,
          0
        ],
        [
          1,
          0,
          0,
          1,
          0,
          1
        ],
        [
          1,
          0,
          0,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          1,
          0,
          1
        ],
        [
          1,
          0,
          1,
          1,
          1,
          1
        ]
      ],
      "output": [
        [
          1,
          0,
          1,
          1,
          1,
          2
        ],
        [
          1,
          2,
          1,
          0,
          0,
          0
        ],
        [
          2,
          1,
          1,
          2,
          0,
          2
        ],
        [
          1,
          1,
          1,
          1,
          2,
          1
        ],
        [
          1,
          0,
          1,
          1,
          0,
          2
        ],
        [
          1,
          0,
          2,
          1,
          1,
          2
        ]
      ]
    }
  ],
  "code": "import numpy as np\nfrom typing import *\nfrom common import *\n\n# concepts:\n# bitmasks with separator, boolean logical operations\n\n# description:\n# In the input, you will see two blue bitmasks separated by a grey vertical bar.\n# To make the output, flip colors on the right side bitmask according to the complement of the left bitmask:\n#     if left is blue, right stays the same.\n#     if left is black, flip the right blue pixel to red and the black to blue.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the grey vertical bar. Vertical means constant X\n    for x_bar in range(input_grid.shape[0]):\n        if np.all(input_grid[x_bar, :] == Color.GREY):\n            break\n\n    left_mask = input_grid[:x_bar, :]\n    right_mask = input_grid[x_bar+1:, :]\n\n    output_grid = np.zeros_like(right_mask)\n    \n    # Perform the flipping transformation\n    output_grid[(left_mask == Color.BLACK) & (right_mask == Color.BLUE)] = Color.RED\n    output_grid[(left_mask == Color.BLACK) & (right_mask == Color.BLACK)] = Color.BLUE\n    output_grid[(left_mask == Color.BLUE) & (right_mask == Color.BLUE)] = Color.BLUE\n    output_grid[(left_mask == Color.BLUE) & (right_mask == Color.BLACK)] = Color.BLACK\n    \n    return output_grid\n\n\ndef generate_input() -> np.ndarray:\n    # create a pair of equally sized bitmasks\n    width, height = np.random.randint(2, 10), np.random.randint(2, 10)\n\n    grid1 = np.zeros((width, height), dtype=int)\n    grid2 = np.zeros((width, height), dtype=int)\n\n    for x in range(width):\n        for y in range(height):\n            grid1[x, y] = np.random.choice([Color.BLUE, Color.BLACK])\n            grid2[x, y] = np.random.choice([Color.BLUE, Color.BLACK])\n    \n    # create a grey vertical bar\n    bar = np.zeros((1, height), dtype=int)\n    bar[0, :] = Color.GREY\n\n    grid = np.concatenate((grid1, bar, grid2), axis=0)\n\n    return grid"
}