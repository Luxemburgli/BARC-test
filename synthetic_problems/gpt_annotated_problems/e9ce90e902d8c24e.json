{
  "uid": "e9ce90e902d8c24e",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          3,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          2,
          0,
          0,
          0,
          0,
          3,
          0,
          1,
          2
        ],
        [
          0,
          2,
          0,
          0,
          0,
          3,
          0,
          2,
          0
        ],
        [
          0,
          0,
          2,
          0,
          0,
          3,
          2,
          1,
          0
        ],
        [
          1,
          1,
          1,
          2,
          1,
          2,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          0,
          2,
          3,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          2,
          0,
          2,
          0,
          1,
          0
        ],
        [
          3,
          3,
          2,
          3,
          3,
          3,
          2,
          3,
          3
        ],
        [
          0,
          2,
          0,
          0,
          0,
          3,
          0,
          2,
          0
        ],
        [
          2,
          0,
          0,
          0,
          0,
          3,
          0,
          1,
          2
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          6,
          0,
          0,
          3,
          0,
          1,
          0,
          0,
          6
        ],
        [
          0,
          2,
          0,
          3,
          0,
          1,
          0,
          2,
          0
        ],
        [
          1,
          1,
          2,
          3,
          1,
          1,
          2,
          1,
          1
        ],
        [
          0,
          0,
          0,
          2,
          0,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          3,
          2,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          2,
          0,
          2,
          0,
          0,
          0
        ],
        [
          3,
          3,
          2,
          3,
          3,
          3,
          2,
          3,
          3
        ],
        [
          0,
          2,
          0,
          3,
          0,
          1,
          0,
          2,
          0
        ],
        [
          6,
          0,
          0,
          3,
          0,
          1,
          0,
          0,
          6
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          2,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          2
        ],
        [
          0,
          2,
          0,
          0,
          0,
          0,
          1,
          2,
          3
        ],
        [
          1,
          1,
          2,
          1,
          1,
          1,
          2,
          1,
          3
        ],
        [
          0,
          0,
          0,
          2,
          0,
          2,
          1,
          0,
          3
        ],
        [
          3,
          3,
          3,
          3,
          2,
          3,
          3,
          3,
          3
        ],
        [
          0,
          0,
          0,
          2,
          0,
          2,
          1,
          0,
          3
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          3
        ],
        [
          0,
          2,
          0,
          0,
          0,
          0,
          1,
          2,
          3
        ],
        [
          2,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          2
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          3,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          2,
          0,
          0,
          0,
          1,
          3,
          0,
          0,
          2
        ],
        [
          0,
          2,
          0,
          0,
          1,
          3,
          0,
          2,
          0
        ],
        [
          3,
          3,
          2,
          3,
          3,
          3,
          2,
          3,
          3
        ],
        [
          0,
          0,
          0,
          2,
          1,
          2,
          0,
          0,
          0
        ],
        [
          1,
          1,
          1,
          1,
          2,
          3,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          2,
          1,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          0,
          1,
          3,
          2,
          0,
          0
        ],
        [
          0,
          2,
          0,
          0,
          1,
          3,
          0,
          2,
          0
        ],
        [
          2,
          0,
          0,
          0,
          1,
          3,
          0,
          0,
          2
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# lines, intersection, symmetry detection\n\n# description:\n# In the input, you will see a grid with two colored pixels: one blue and one green.\n# To make the output:\n# 1. Draw blue horizontal and vertical lines through the blue pixel, extending to the edges of the grid.\n# 2. Draw green horizontal and vertical lines through the green pixel, extending to the edges of the grid.\n# 3. Find the center point between the blue and green pixels.\n# 4. Draw red diagonal lines through this center point, extending from corner to corner of the grid.\n# 5. Where any lines intersect (including with the diagonal lines), place a yellow pixel.\n# 6. If the center point has rotational symmetry (i.e., it's exactly in the middle of the grid), \n#    fill the four corners of the grid with pink pixels.\n\ndef main(input_grid):\n    n, m = input_grid.shape\n    output_grid = np.full((n, m), Color.BLACK)\n\n    # Find blue and green pixels\n    blue_coords = np.argwhere(input_grid == Color.BLUE)[0]\n    green_coords = np.argwhere(input_grid == Color.GREEN)[0]\n\n    # Draw blue lines\n    output_grid[blue_coords[0], :] = Color.BLUE\n    output_grid[:, blue_coords[1]] = Color.BLUE\n\n    # Draw green lines\n    output_grid[green_coords[0], :] = Color.GREEN\n    output_grid[:, green_coords[1]] = Color.GREEN\n\n    # Find center point\n    center_x = (blue_coords[0] + green_coords[0]) // 2\n    center_y = (blue_coords[1] + green_coords[1]) // 2\n\n    # Draw red diagonal lines\n    for i in range(n):\n        output_grid[i, i] = Color.RED\n        output_grid[i, n-1-i] = Color.RED\n\n    # Mark intersections with yellow\n    for i in range(n):\n        for j in range(m):\n            if np.sum(output_grid[i, j] != Color.BLACK) > 1:\n                output_grid[i, j] = Color.YELLOW\n\n    # Check for rotational symmetry and fill corners if symmetric\n    if center_x == n // 2 and center_y == m // 2:\n        output_grid[0, 0] = Color.PINK\n        output_grid[0, m-1] = Color.PINK\n        output_grid[n-1, 0] = Color.PINK\n        output_grid[n-1, m-1] = Color.PINK\n\n    return output_grid\n\ndef generate_input():\n    n = m = 9\n    grid = np.full((n, m), Color.BLACK)\n\n    # Place blue pixel\n    blue_x, blue_y = np.random.randint(0, n), np.random.randint(0, m)\n    grid[blue_x, blue_y] = Color.BLUE\n\n    # Place green pixel (not in the same row or column as blue)\n    while True:\n        green_x, green_y = np.random.randint(0, n), np.random.randint(0, m)\n        if green_x != blue_x and green_y != blue_y:\n            grid[green_x, green_y] = Color.GREEN\n            break\n\n    return grid"
}