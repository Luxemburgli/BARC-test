{
  "uid": "826f26f4ad9b0560",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          2,
          0,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          0,
          2,
          0,
          2,
          0,
          0
        ],
        [
          0,
          2,
          2,
          0,
          2,
          2,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          0,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          2
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          1,
          0,
          1,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          1,
          1,
          1,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          0,
          0,
          0
        ],
        [
          0,
          1,
          0,
          1,
          0,
          1,
          1
        ],
        [
          0,
          0,
          0,
          1,
          0,
          1,
          1
        ],
        [
          0,
          0,
          1,
          1,
          1,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          3,
          0,
          3,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          3,
          0,
          3,
          0,
          3,
          0
        ],
        [
          0,
          3,
          3,
          0,
          3,
          3
        ],
        [
          0,
          0,
          0,
          0,
          3,
          0
        ],
        [
          3,
          3,
          3,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          2,
          0
        ],
        [
          2,
          2,
          0
        ],
        [
          0,
          2,
          0
        ],
        [
          0,
          0,
          0
        ],
        [
          4,
          4,
          4
        ],
        [
          1,
          1,
          1
        ],
        [
          0,
          0,
          1
        ],
        [
          1,
          1,
          1
        ],
        [
          1,
          1,
          0
        ],
        [
          0,
          0,
          1
        ]
      ],
      "output": [
        [
          0,
          3
        ],
        [
          3,
          3
        ],
        [
          0,
          3
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          2,
          2,
          0,
          0
        ],
        [
          0,
          0,
          2,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          2,
          2
        ],
        [
          0,
          0,
          2,
          2,
          2
        ],
        [
          0,
          2,
          0,
          0,
          0
        ],
        [
          4,
          4,
          4,
          4,
          4
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          0,
          0,
          1,
          0
        ],
        [
          1,
          1,
          0,
          1,
          1
        ],
        [
          0,
          0,
          0,
          1,
          1
        ],
        [
          1,
          0,
          1,
          0,
          1
        ],
        [
          1,
          1,
          0,
          0,
          0
        ],
        [
          1,
          1,
          0,
          1,
          1
        ]
      ],
      "output": [
        [
          0,
          3,
          3,
          0
        ],
        [
          0,
          0,
          3,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          3
        ],
        [
          0,
          0,
          3,
          3
        ],
        [
          0,
          3,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          2,
          0,
          2
        ],
        [
          2,
          2,
          0
        ],
        [
          0,
          0,
          2
        ],
        [
          0,
          2,
          0
        ],
        [
          4,
          4,
          4
        ],
        [
          0,
          1,
          1
        ],
        [
          0,
          1,
          0
        ],
        [
          0,
          1,
          1
        ],
        [
          1,
          0,
          0
        ],
        [
          1,
          0,
          1
        ]
      ],
      "output": [
        [
          3,
          0
        ],
        [
          3,
          3
        ],
        [
          0,
          0
        ],
        [
          0,
          3
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ]
      ]
    }
  ],
  "code": "import numpy as np\nfrom typing import *\nfrom common import *\n\n# concepts:\n# bitmasks with separator, boolean logical operations, rotation\n\n# description:\n# In the input you will see two bitmasks separated by a yellow horizontal bar.\n# The top bitmask is in red, and the bottom bitmask is in blue.\n# To make the output, perform the following steps:\n# 1. Rotate the bottom (blue) bitmask 90 degrees clockwise\n# 2. Perform a logical XOR operation between the top (red) bitmask and the rotated bottom bitmask\n# 3. Color the resulting pixels green where the XOR operation is true, and black otherwise\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the yellow horizontal bar\n    for y_bar in range(input_grid.shape[1]):\n        if np.all(input_grid[:, y_bar] == Color.YELLOW):\n            break\n\n    top_mask = input_grid[:, :y_bar]\n    bottom_mask = input_grid[:, y_bar+1:]\n\n    # Rotate the bottom mask 90 degrees clockwise\n    rotated_bottom_mask = np.rot90(bottom_mask, k=-1)\n\n    # Ensure the rotated mask has the same shape as the top mask\n    if rotated_bottom_mask.shape != top_mask.shape:\n        pad_width = ((0, max(0, top_mask.shape[0] - rotated_bottom_mask.shape[0])),\n                     (0, max(0, top_mask.shape[1] - rotated_bottom_mask.shape[1])))\n        rotated_bottom_mask = np.pad(rotated_bottom_mask, pad_width, mode='constant', constant_values=Color.BLACK)\n        rotated_bottom_mask = rotated_bottom_mask[:top_mask.shape[0], :top_mask.shape[1]]\n\n    # Perform XOR operation\n    output_grid = np.zeros_like(top_mask)\n    output_grid[(top_mask == Color.RED) ^ (rotated_bottom_mask == Color.BLUE)] = Color.GREEN\n    \n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a pair of bitmasks with different sizes\n    width1, height1 = np.random.randint(3, 8), np.random.randint(3, 8)\n    width2, height2 = np.random.randint(3, 8), np.random.randint(3, 8)\n\n    grid1 = np.zeros((width1, height1), dtype=int)\n    grid2 = np.zeros((width2, height2), dtype=int)\n\n    for x in range(width1):\n        for y in range(height1):\n            grid1[x, y] = np.random.choice([Color.RED, Color.BLACK])\n\n    for x in range(width2):\n        for y in range(height2):\n            grid2[x, y] = np.random.choice([Color.BLUE, Color.BLACK])\n\n    # Create a yellow horizontal bar\n    bar = np.full((1, max(height1, height2)), Color.YELLOW)\n\n    # Combine the grids and bar\n    grid = np.vstack((grid1, bar, grid2))\n\n    return grid"
}