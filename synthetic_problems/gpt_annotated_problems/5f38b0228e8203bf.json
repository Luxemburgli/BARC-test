{
  "uid": "5f38b0228e8203bf",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          7,
          6,
          5,
          3,
          9,
          5,
          8,
          9
        ]
      ],
      "output": [
        [
          7,
          6,
          5,
          3,
          9,
          5,
          8,
          9
        ],
        [
          8,
          7,
          6,
          4,
          1,
          6,
          9,
          1
        ],
        [
          9,
          8,
          7,
          5,
          2,
          7,
          1,
          2
        ],
        [
          1,
          9,
          8,
          6,
          3,
          8,
          2,
          3
        ],
        [
          2,
          1,
          9,
          7,
          4,
          9,
          3,
          4
        ],
        [
          3,
          2,
          1,
          8,
          5,
          1,
          4,
          5
        ],
        [
          4,
          3,
          2,
          9,
          6,
          2,
          5,
          6
        ],
        [
          5,
          4,
          3,
          1,
          7,
          3,
          6,
          7
        ]
      ]
    },
    {
      "input": [
        [
          5,
          6,
          3,
          0,
          1,
          2,
          5
        ]
      ],
      "output": [
        [
          5,
          6,
          3,
          0,
          1,
          2,
          5
        ],
        [
          6,
          7,
          4,
          0,
          2,
          3,
          6
        ],
        [
          7,
          8,
          5,
          0,
          3,
          4,
          7
        ],
        [
          8,
          9,
          6,
          0,
          4,
          5,
          8
        ],
        [
          9,
          1,
          7,
          0,
          5,
          6,
          9
        ],
        [
          1,
          2,
          8,
          0,
          6,
          7,
          1
        ]
      ]
    },
    {
      "input": [
        [
          6,
          4,
          8,
          3,
          3,
          1,
          9
        ]
      ],
      "output": [
        [
          6,
          4,
          8,
          3,
          3,
          1,
          9
        ],
        [
          7,
          5,
          9,
          4,
          4,
          2,
          1
        ],
        [
          8,
          6,
          1,
          5,
          5,
          3,
          2
        ],
        [
          9,
          7,
          2,
          6,
          6,
          4,
          3
        ],
        [
          1,
          8,
          3,
          7,
          7,
          5,
          4
        ],
        [
          2,
          9,
          4,
          8,
          8,
          6,
          5
        ],
        [
          3,
          1,
          5,
          9,
          9,
          7,
          6
        ]
      ]
    },
    {
      "input": [
        [
          4,
          5,
          9,
          4,
          2,
          5,
          8,
          4,
          8
        ]
      ],
      "output": [
        [
          4,
          5,
          9,
          4,
          2,
          5,
          8,
          4,
          8
        ],
        [
          5,
          6,
          1,
          5,
          3,
          6,
          9,
          5,
          9
        ],
        [
          6,
          7,
          2,
          6,
          4,
          7,
          1,
          6,
          1
        ],
        [
          7,
          8,
          3,
          7,
          5,
          8,
          2,
          7,
          2
        ],
        [
          8,
          9,
          4,
          8,
          6,
          9,
          3,
          8,
          3
        ],
        [
          9,
          1,
          5,
          9,
          7,
          1,
          4,
          9,
          4
        ],
        [
          1,
          2,
          6,
          1,
          8,
          2,
          5,
          1,
          5
        ],
        [
          2,
          3,
          7,
          2,
          9,
          3,
          6,
          2,
          6
        ],
        [
          3,
          4,
          8,
          3,
          1,
          4,
          7,
          3,
          7
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# counting, incrementing, colors as indicators, repeating patterns\n\n# description:\n# In the input, you will see a single row with pixels of various colors.\n# To make the output:\n# 1. Take the input row as the first row of the output\n# 2. For each subsequent row:\n#    - If the pixel above is black, copy it\n#    - If the pixel above is colored, change it to the next color in the sequence:\n#      BLUE -> RED -> GREEN -> YELLOW -> GREY -> PINK -> ORANGE -> TEAL -> MAROON -> BLUE\n# 3. Repeat until the number of rows equals the number of non-black pixels in the original input row\n\ndef main(input_grid):\n    # Define the color sequence\n    color_sequence = [Color.BLUE, Color.RED, Color.GREEN, Color.YELLOW, Color.GREY, \n                      Color.PINK, Color.ORANGE, Color.TEAL, Color.MAROON]\n    \n    # Count non-black pixels in the input row\n    non_black_count = np.sum(input_grid != Color.BLACK)\n    \n    # Create the output grid\n    output_grid = np.zeros((non_black_count, input_grid.shape[1]), dtype=object)\n    output_grid[0] = input_grid[0]  # Copy the input row as the first row\n    \n    # Fill in the subsequent rows\n    for row in range(1, non_black_count):\n        for col in range(input_grid.shape[1]):\n            if output_grid[row-1, col] == Color.BLACK:\n                output_grid[row, col] = Color.BLACK\n            else:\n                current_color_index = color_sequence.index(output_grid[row-1, col])\n                next_color_index = (current_color_index + 1) % len(color_sequence)\n                output_grid[row, col] = color_sequence[next_color_index]\n    \n    return output_grid\n\ndef generate_input():\n    # Decide the length of the row\n    length = np.random.randint(5, 15)\n    \n    # Create a row with random colors (including black)\n    color_options = list(Color.ALL_COLORS)\n    row = np.array([np.random.choice(color_options) for _ in range(length)])\n    \n    # Ensure there's at least one non-black pixel\n    if np.all(row == Color.BLACK):\n        row[np.random.randint(length)] = np.random.choice(list(Color.NOT_BLACK))\n    \n    # Make this row the entire grid\n    grid = row.reshape(1, -1)\n    \n    return grid"
}