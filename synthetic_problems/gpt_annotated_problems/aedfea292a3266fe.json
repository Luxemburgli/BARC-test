{
  "uid": "aedfea292a3266fe",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          4,
          6,
          5,
          0,
          2,
          7,
          5,
          0,
          9,
          3
        ],
        [
          0,
          0,
          7,
          5,
          6,
          0,
          9,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          4,
          5,
          2,
          1,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          1,
          5,
          0,
          0,
          7,
          5,
          0,
          3,
          6
        ],
        [
          2,
          4,
          3,
          5,
          2,
          2,
          7,
          5,
          4,
          0,
          0
        ],
        [
          0,
          0,
          7,
          5,
          0,
          4,
          0,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          2,
          6,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          4,
          0
        ],
        [
          1,
          8,
          0,
          5,
          1,
          0,
          4,
          5,
          0,
          8,
          0
        ],
        [
          0,
          2,
          0,
          5,
          6,
          0,
          0,
          5,
          6,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          2,
          7,
          5,
          0,
          2,
          7,
          5,
          0,
          2,
          7
        ],
        [
          0,
          0,
          6,
          5,
          6,
          0,
          9,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          4,
          5,
          6,
          9,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          2,
          5,
          0,
          0,
          9,
          5,
          0,
          2,
          7
        ],
        [
          7,
          6,
          9,
          5,
          6,
          6,
          9,
          5,
          6,
          0,
          0
        ],
        [
          0,
          0,
          4,
          5,
          0,
          4,
          0,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          4,
          7,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          2,
          0
        ],
        [
          6,
          9,
          0,
          5,
          2,
          0,
          7,
          5,
          0,
          7,
          0
        ],
        [
          0,
          4,
          0,
          5,
          6,
          0,
          0,
          5,
          6,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          8,
          0,
          5,
          0,
          0,
          2,
          5,
          0,
          0,
          3
        ],
        [
          7,
          0,
          2,
          5,
          0,
          2,
          9,
          5,
          3,
          0,
          4
        ],
        [
          0,
          6,
          3,
          5,
          7,
          0,
          7,
          5,
          0,
          8,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          3,
          5,
          3,
          0,
          8,
          5,
          0,
          7,
          1
        ],
        [
          3,
          0,
          0,
          5,
          0,
          6,
          4,
          5,
          8,
          4,
          0
        ],
        [
          9,
          3,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          4
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          9,
          5,
          0,
          0,
          1,
          5,
          9,
          0,
          0
        ],
        [
          4,
          0,
          1,
          5,
          2,
          8,
          6,
          5,
          6,
          8,
          0
        ],
        [
          4,
          0,
          1,
          5,
          0,
          0,
          6,
          5,
          3,
          0,
          7
        ]
      ],
      "output": [
        [
          0,
          8,
          0,
          5,
          0,
          0,
          7,
          5,
          0,
          0,
          7
        ],
        [
          7,
          0,
          2,
          5,
          0,
          7,
          2,
          5,
          7,
          0,
          2
        ],
        [
          0,
          6,
          3,
          5,
          3,
          0,
          3,
          5,
          0,
          6,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          6,
          5,
          8,
          0,
          7,
          5,
          0,
          8,
          7
        ],
        [
          6,
          0,
          0,
          5,
          0,
          2,
          6,
          5,
          2,
          3,
          0
        ],
        [
          2,
          6,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          3
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          8,
          5,
          0,
          0,
          8,
          5,
          8,
          0,
          0
        ],
        [
          6,
          0,
          3,
          5,
          7,
          2,
          3,
          5,
          7,
          2,
          0
        ],
        [
          6,
          0,
          3,
          5,
          0,
          0,
          3,
          5,
          6,
          0,
          3
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          5,
          0,
          9,
          0,
          5,
          0,
          1,
          0
        ],
        [
          3,
          3,
          0,
          5,
          0,
          3,
          0,
          5,
          8,
          4,
          0
        ],
        [
          1,
          0,
          0,
          5,
          9,
          0,
          0,
          5,
          3,
          0,
          2
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          4,
          5,
          0,
          0,
          8
        ],
        [
          1,
          9,
          3,
          5,
          4,
          7,
          8,
          5,
          6,
          0,
          0
        ],
        [
          0,
          3,
          8,
          5,
          1,
          0,
          0,
          5,
          0,
          0,
          9
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          7,
          5,
          0,
          4,
          0,
          5,
          0,
          0,
          9
        ],
        [
          3,
          0,
          2,
          5,
          0,
          6,
          2,
          5,
          2,
          2,
          0
        ],
        [
          0,
          0,
          8,
          5,
          0,
          0,
          0,
          5,
          1,
          0,
          2
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          5,
          0,
          4,
          0,
          5,
          0,
          1,
          0
        ],
        [
          8,
          8,
          0,
          5,
          0,
          8,
          0,
          5,
          8,
          4,
          0
        ],
        [
          4,
          0,
          0,
          5,
          4,
          0,
          0,
          5,
          3,
          0,
          2
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          8,
          5,
          0,
          0,
          1
        ],
        [
          1,
          8,
          3,
          5,
          8,
          4,
          3,
          5,
          8,
          0,
          0
        ],
        [
          0,
          3,
          2,
          5,
          2,
          0,
          0,
          5,
          0,
          0,
          4
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          1,
          5,
          0,
          1,
          0,
          5,
          0,
          0,
          1
        ],
        [
          8,
          0,
          4,
          5,
          0,
          8,
          4,
          5,
          2,
          2,
          0
        ],
        [
          0,
          0,
          3,
          5,
          0,
          0,
          0,
          5,
          3,
          0,
          2
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          7,
          5,
          0,
          0,
          9,
          5,
          6,
          0,
          8
        ],
        [
          0,
          0,
          0,
          5,
          9,
          0,
          7,
          5,
          1,
          2,
          0
        ],
        [
          8,
          4,
          0,
          5,
          0,
          0,
          4,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          9,
          8,
          5,
          6,
          4,
          0,
          5,
          9,
          4,
          3
        ],
        [
          6,
          0,
          0,
          5,
          0,
          7,
          0,
          5,
          6,
          0,
          0
        ],
        [
          3,
          0,
          2,
          5,
          0,
          7,
          3,
          5,
          0,
          0,
          4
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          6,
          0,
          3,
          5,
          0,
          4,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          8,
          0,
          0,
          5,
          4,
          9,
          0
        ],
        [
          0,
          1,
          4,
          5,
          0,
          0,
          4,
          5,
          0,
          0,
          6
        ]
      ],
      "output": [
        [
          0,
          0,
          9,
          5,
          0,
          0,
          8,
          5,
          9,
          0,
          8
        ],
        [
          0,
          0,
          0,
          5,
          8,
          0,
          6,
          5,
          6,
          3,
          0
        ],
        [
          8,
          6,
          0,
          5,
          0,
          0,
          3,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          9,
          8,
          5,
          9,
          8,
          0,
          5,
          9,
          2,
          6
        ],
        [
          6,
          0,
          0,
          5,
          0,
          3,
          0,
          5,
          3,
          0,
          0
        ],
        [
          3,
          0,
          2,
          5,
          0,
          3,
          2,
          5,
          0,
          0,
          2
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          9,
          0,
          8,
          5,
          0,
          6,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          8,
          0,
          0,
          5,
          9,
          8,
          0
        ],
        [
          0,
          6,
          3,
          5,
          0,
          0,
          6,
          5,
          0,
          0,
          6
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rectangular cells, color guide, pixel manipulation\n\n# description:\n# In the input, you will see grey horizontal and vertical bars that divide the grid into nine 3x3 rectangular regions. \n# Each region contains 3-5 colored pixels.\n# To make the output:\n# 1. Find the region with exactly 5 colored pixels. This is the \"guide\" region.\n# 2. For each other region:\n#    a. Count the number of colored pixels (N) in that region.\n#    b. Copy the N most common colors from the guide region to this region.\n#    c. Place these colors in the region, starting from the top-left and moving right then down.\n# 3. The grey dividers should remain unchanged in the output.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    divider_color = Color.GRAY\n\n    # Find regions\n    regions = find_connected_components(input_grid, background=divider_color, monochromatic=False)\n\n    # Find the guide region (the one with exactly 5 colored pixels)\n    guide_region = None\n    for region in regions:\n        colored_pixels = np.sum((region != divider_color) & (region != Color.BLACK))\n        if colored_pixels == 5:\n            guide_region = region\n            break\n    \n    assert guide_region is not None, \"No guide region found\"\n\n    # Get color frequencies in the guide region\n    guide_colors = [color for color in guide_region.flatten() if color not in [Color.BLACK, divider_color]]\n    color_freq = {}\n    for color in guide_colors:\n        color_freq[color] = color_freq.get(color, 0) + 1\n    sorted_colors = sorted(color_freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Create output grid\n    output_grid = np.full_like(input_grid, Color.BLACK)\n\n    # Copy dividers\n    output_grid[input_grid == divider_color] = divider_color\n\n    # Process each region\n    for region in regions:\n        if np.array_equal(region, guide_region):\n            output_grid[region != divider_color] = guide_region[region != divider_color]\n        else:\n            colored_pixels = np.sum((region != divider_color) & (region != Color.BLACK))\n            colors_to_use = [color for color, _ in sorted_colors[:colored_pixels]]\n            \n            # Place colors in the region\n            region_mask = (region != divider_color) & (region != Color.BLACK)\n            flat_indices = np.where(region_mask.flatten())[0]\n            for i, index in enumerate(flat_indices):\n                x, y = np.unravel_index(index, region.shape)\n                output_grid[np.where(region == region[x, y])] = colors_to_use[i]\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    divider_color = Color.GRAY\n\n    # Create grid with dividers\n    cell_size = 3\n    n_cells = 3\n    divider_size = 1\n    n_dividers = n_cells - 1\n    distance_between_cells = cell_size + divider_size\n    m = cell_size * n_cells + divider_size * n_dividers\n    grid = np.full((m, m), Color.BLACK)\n\n    # Add dividers\n    for i in range(n_dividers):\n        grid[cell_size + i * (cell_size + divider_size), :] = divider_color\n        grid[:, cell_size + i * (cell_size + divider_size)] = divider_color\n\n    # Pick one cell to have exactly 5 colors (the guide cell)\n    guide_cell_x, guide_cell_y = np.random.randint(3), np.random.randint(3)\n\n    for x in range(3):\n        for y in range(3):\n            if x == guide_cell_x and y == guide_cell_y:\n                n_colors = 5\n            else:\n                n_colors = np.random.randint(3, 6)  # 3 to 5 colors\n\n            cell = grid[x*distance_between_cells : x*distance_between_cells + cell_size,\n                        y*distance_between_cells : y*distance_between_cells + cell_size]\n\n            while np.sum(cell != Color.BLACK) < n_colors:\n                cell_x, cell_y = np.random.randint(cell_size), np.random.randint(cell_size)\n                cell[cell_x, cell_y] = random.choice([color for color in Color.ALL_COLORS if color != Color.BLACK and color != divider_color])\n\n    return grid"
}