{
  "uid": "d0a938cadb824630",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          5,
          3,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          5,
          0,
          0,
          2,
          5,
          0,
          0,
          1
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          2,
          5,
          3,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          3,
          0,
          5,
          0,
          2,
          0,
          5,
          0,
          4,
          0
        ],
        [
          0,
          0,
          4,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          4,
          0,
          2,
          5,
          9,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          8,
          0,
          0,
          5,
          9,
          0,
          0
        ],
        [
          1,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          9,
          8,
          0
        ],
        [
          6,
          1,
          0,
          5,
          1,
          7,
          0,
          5,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          2,
          2,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          2,
          2,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          5,
          1,
          0,
          0,
          5,
          0,
          9,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          9,
          0,
          5,
          0,
          0,
          7,
          5,
          0,
          0,
          4
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          1,
          0,
          5,
          0,
          0,
          8,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          3,
          4,
          5,
          0,
          0,
          9,
          5,
          1,
          0,
          8
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          3,
          0,
          0,
          5,
          0,
          0,
          6,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          3,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          2,
          0,
          5,
          9,
          0,
          8,
          5,
          4,
          0,
          3
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          9,
          9,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          9,
          9,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          1,
          5,
          7,
          0,
          0,
          5,
          0,
          2,
          0
        ],
        [
          0,
          0,
          8,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          6,
          0,
          5,
          0,
          0,
          0,
          5,
          8,
          0,
          2
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          7,
          0,
          1,
          5,
          0,
          0,
          7,
          5,
          4,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          4,
          5,
          0,
          9,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          7
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          9,
          0,
          5,
          7,
          2,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          9,
          0
        ],
        [
          0,
          0,
          7,
          5,
          0,
          0,
          9,
          5,
          1,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          1,
          1,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          6,
          1,
          1,
          5,
          0,
          7,
          7,
          5,
          0,
          0,
          0
        ],
        [
          6,
          8,
          8,
          5,
          0,
          7,
          7,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          8,
          7,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          8
        ],
        [
          0,
          0,
          0,
          5,
          7,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          8,
          0,
          5,
          8,
          1,
          0,
          5,
          0,
          0,
          9
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          8,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          6,
          9
        ],
        [
          8,
          0,
          0,
          5,
          0,
          9,
          0,
          5,
          0,
          2,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          2,
          5,
          2,
          0,
          4,
          5,
          0,
          0,
          0
        ],
        [
          9,
          0,
          9,
          5,
          0,
          6,
          0,
          5,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          8,
          6,
          0
        ]
      ],
      "output": [
        [
          8,
          8,
          8,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          8,
          8,
          8,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          8,
          8,
          8,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          9,
          9,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          9,
          9,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rectangular cells, color guide, growing, surrounding\n\n# description:\n# In the input you will see grey horizontal and vertical bars that divide the grid into nine 3x3 rectangular regions.\n# Each region contains 1-3 colored pixels.\n# To make the output:\n# 1. Find the region with exactly 1 colored pixel. This is the \"seed\" region.\n# 2. For each other region:\n#    a. If it has 2 colored pixels, grow those pixels outward until they touch or hit a wall.\n#    b. If it has 3 colored pixels, surround each colored pixel with a 3x3 square of its color.\n# 3. Finally, fill the seed region with copies of itself, rotated 90 degrees each time, to fill the 3x3 space.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    divider_color = Color.GRAY\n    \n    # Find the regions\n    regions = find_connected_components(input_grid, background=divider_color, monochromatic=False)\n    \n    # Create the output grid\n    output_grid = np.zeros_like(input_grid)\n    output_grid[input_grid == divider_color] = divider_color\n\n    # Find the seed region (the one with exactly 1 colored pixel)\n    seed_region = None\n    for region in regions:\n        colored_pixels = np.sum((region != divider_color) & (region != Color.BLACK))\n        if colored_pixels == 1:\n            seed_region = region\n            break\n    \n    # Process each region\n    for region in regions:\n        x, y, w, h = bounding_box(region, background=divider_color)\n        colored_pixels = np.sum((region != divider_color) & (region != Color.BLACK))\n        \n        if region is seed_region:\n            # Fill seed region with rotated copies\n            seed_color = region[(region != divider_color) & (region != Color.BLACK)][0]\n            seed_pattern = np.full((3, 3), Color.BLACK)\n            seed_pattern[1, 1] = seed_color\n            for i in range(3):\n                for j in range(3):\n                    rotated = np.rot90(seed_pattern, k=(i+j)%4)\n                    output_grid[x+i:x+i+3, y+j:y+j+3] = np.where(\n                        (output_grid[x+i:x+i+3, y+j:y+j+3] == Color.BLACK) & (rotated != Color.BLACK),\n                        rotated,\n                        output_grid[x+i:x+i+3, y+j:y+j+3]\n                    )\n        elif colored_pixels == 2:\n            # Grow pixels outward\n            for i in range(w):\n                for j in range(h):\n                    if region[i, j] not in [Color.BLACK, divider_color]:\n                        color = region[i, j]\n                        draw_line(output_grid, x+i, y+j, None, color, (0, 1), [divider_color, color])\n                        draw_line(output_grid, x+i, y+j, None, color, (0, -1), [divider_color, color])\n                        draw_line(output_grid, x+i, y+j, None, color, (1, 0), [divider_color, color])\n                        draw_line(output_grid, x+i, y+j, None, color, (-1, 0), [divider_color, color])\n        elif colored_pixels == 3:\n            # Surround each colored pixel with a 3x3 square\n            for i in range(w):\n                for j in range(h):\n                    if region[i, j] not in [Color.BLACK, divider_color]:\n                        color = region[i, j]\n                        for di in range(-1, 2):\n                            for dj in range(-1, 2):\n                                if 0 <= x+i+di < output_grid.shape[0] and 0 <= y+j+dj < output_grid.shape[1]:\n                                    if output_grid[x+i+di, y+j+dj] == Color.BLACK:\n                                        output_grid[x+i+di, y+j+dj] = color\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    divider_color = Color.GRAY\n\n    # Create the grid with dividers\n    cell_size = 3\n    n_cells = 3\n    divider_size = 1\n    n_dividers = n_cells - 1\n    distance_between_cells = cell_size + divider_size\n    m = cell_size*n_cells + divider_size*n_dividers\n    grid = np.full((m, m), Color.BLACK)\n    for i in range(n_dividers):\n        grid[cell_size + i*(cell_size + divider_size), :] = divider_color\n        grid[:, cell_size + i*(cell_size + divider_size)] = divider_color\n    \n    # Choose a random cell to be the seed (1 colored pixel)\n    seed_x, seed_y = np.random.randint(3), np.random.randint(3)\n\n    for x in range(3):\n        for y in range(3):\n            if x == seed_x and y == seed_y:\n                n_colors = 1\n            else:\n                n_colors = np.random.randint(2, 4)  # 2 or 3 colors\n\n            cell = grid[x*distance_between_cells : x*distance_between_cells + cell_size,\n                        y*distance_between_cells : y*distance_between_cells + cell_size]\n\n            positions = [(i, j) for i in range(cell_size) for j in range(cell_size)]\n            np.random.shuffle(positions)\n            \n            for _ in range(n_colors):\n                i, j = positions.pop()\n                cell[i, j] = random.choice([color for color in Color.ALL_COLORS if color != Color.BLACK and color != divider_color])\n\n    return grid"
}