{
  "uid": "d859d0ed3bb0920b",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          8,
          9,
          7,
          3,
          6,
          3,
          9,
          5
        ]
      ],
      "output": [
        [
          8,
          9,
          7,
          3,
          6,
          3,
          9,
          5
        ],
        [
          5,
          9,
          3,
          6,
          3,
          7,
          9,
          8
        ],
        [
          8,
          9,
          7,
          3,
          6,
          3,
          9,
          5
        ],
        [
          5,
          9,
          3,
          6,
          3,
          7,
          9,
          8
        ],
        [
          8,
          9,
          7,
          3,
          6,
          3,
          9,
          5
        ],
        [
          5,
          9,
          3,
          6,
          3,
          7,
          9,
          8
        ],
        [
          8,
          9,
          7,
          3,
          6,
          3,
          9,
          5
        ],
        [
          5,
          9,
          3,
          6,
          3,
          7,
          9,
          8
        ]
      ]
    },
    {
      "input": [
        [
          5,
          6,
          7,
          2,
          3,
          1,
          9
        ]
      ],
      "output": [
        [
          5,
          6,
          7,
          2,
          3,
          1,
          9
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          3,
          1,
          6,
          7,
          8,
          2
        ]
      ],
      "output": [
        [
          0,
          3,
          1,
          6,
          7,
          8,
          2
        ],
        [
          2,
          8,
          7,
          6,
          1,
          3,
          0
        ],
        [
          0,
          3,
          1,
          6,
          7,
          8,
          2
        ],
        [
          2,
          8,
          7,
          6,
          1,
          3,
          0
        ],
        [
          0,
          3,
          1,
          6,
          7,
          8,
          2
        ],
        [
          2,
          8,
          7,
          6,
          1,
          3,
          0
        ]
      ]
    },
    {
      "input": [
        [
          6,
          0,
          6,
          9,
          0,
          0,
          5,
          5,
          1
        ]
      ],
      "output": [
        [
          6,
          0,
          6,
          9,
          0,
          0,
          5,
          5,
          1
        ],
        [
          1,
          5,
          5,
          0,
          0,
          9,
          6,
          0,
          6
        ],
        [
          6,
          0,
          6,
          9,
          0,
          0,
          5,
          5,
          1
        ],
        [
          1,
          5,
          5,
          0,
          0,
          9,
          6,
          0,
          6
        ],
        [
          6,
          0,
          6,
          9,
          0,
          0,
          5,
          5,
          1
        ],
        [
          1,
          5,
          5,
          0,
          0,
          9,
          6,
          0,
          6
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# counting, incrementing, colors as indicators, symmetry detection\n\n# description:\n# In the input, you will see a single row with pixels of various colors.\n# To make the output:\n# 1. Take the input row as the first row of the output\n# 2. For each subsequent row:\n#    - If the previous row has an even number of non-black pixels, mirror it horizontally\n#    - If the previous row has an odd number of non-black pixels, shift all non-black pixels one step to the right (wrapping around)\n# 3. Repeat until the number of rows equals the number of non-black pixels in the original input\n\ndef main(input_grid):\n    # Get the input row\n    row = np.copy(input_grid[0])\n    \n    # Count non-black pixels in the input\n    non_black_count = np.sum(row != Color.BLACK)\n    \n    # Initialize output grid with the input row\n    output_grid = np.copy(input_grid)\n    \n    for _ in range(non_black_count - 1):  # -1 because we already have the first row\n        prev_row = output_grid[-1]\n        non_black_pixels = prev_row != Color.BLACK\n        \n        if np.sum(non_black_pixels) % 2 == 0:  # Even number of non-black pixels\n            new_row = np.flip(prev_row)\n        else:  # Odd number of non-black pixels\n            new_row = np.copy(prev_row)\n            color_indices = np.where(non_black_pixels)[0]\n            new_indices = (color_indices + 1) % len(prev_row)\n            new_row[new_indices] = prev_row[color_indices]\n            new_row[color_indices] = Color.BLACK\n        \n        output_grid = np.vstack((output_grid, new_row))\n    \n    return output_grid\n\ndef generate_input():\n    # Decide the length of the row\n    length = np.random.randint(5, 10)\n    \n    # Create a row with random colors\n    row = np.zeros((1, length), dtype=int)\n    num_colored_pixels = np.random.randint(2, length + 1)\n    color_indices = np.random.choice(length, num_colored_pixels, replace=False)\n    colors = np.random.choice(list(Color.NOT_BLACK), num_colored_pixels)\n    row[0, color_indices] = colors\n    \n    return row"
}