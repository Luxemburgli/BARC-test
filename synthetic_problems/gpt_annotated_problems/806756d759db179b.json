{
  "uid": "806756d759db179b",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          2,
          2,
          0,
          2,
          2,
          2,
          4,
          2,
          2,
          2,
          0,
          2,
          2
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          4,
          0,
          2,
          0,
          2,
          0,
          2
        ],
        [
          0,
          2,
          2,
          2,
          0,
          0,
          4,
          0,
          2,
          2,
          2,
          0,
          0
        ],
        [
          0,
          2,
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          0,
          2,
          2
        ],
        [
          0,
          0,
          2,
          2,
          0,
          0,
          4,
          0,
          0,
          0,
          0,
          0,
          2
        ],
        [
          2,
          2,
          0,
          0,
          0,
          0,
          4,
          0,
          2,
          2,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          3,
          1,
          1,
          1,
          3,
          1
        ],
        [
          1,
          3,
          1,
          1,
          3,
          1
        ],
        [
          3,
          1,
          1,
          1,
          1,
          1
        ],
        [
          3,
          1,
          3,
          3,
          1,
          1
        ],
        [
          3,
          3,
          1,
          3,
          3,
          1
        ]
      ]
    },
    {
      "input": [
        [
          2,
          0,
          0,
          2,
          0,
          2,
          0,
          4,
          0,
          2,
          0,
          2,
          2,
          0,
          2
        ],
        [
          2,
          0,
          2,
          0,
          0,
          2,
          0,
          4,
          0,
          0,
          2,
          2,
          2,
          0,
          2
        ],
        [
          0,
          2,
          0,
          2,
          2,
          2,
          0,
          4,
          0,
          0,
          2,
          2,
          2,
          0,
          2
        ],
        [
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          2,
          2,
          2,
          0,
          2,
          2,
          2
        ],
        [
          0,
          0,
          2,
          2,
          2,
          2,
          2,
          4,
          0,
          0,
          2,
          0,
          2,
          2,
          2
        ],
        [
          0,
          2,
          0,
          0,
          0,
          0,
          2,
          4,
          2,
          0,
          2,
          2,
          0,
          0,
          2
        ],
        [
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          4,
          2,
          0,
          0,
          0,
          0,
          2,
          2
        ]
      ],
      "output": [
        [
          1,
          1,
          3,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          3,
          3,
          3,
          1
        ],
        [
          3,
          3,
          3,
          1,
          1,
          3,
          1
        ],
        [
          1,
          3,
          3,
          1,
          3,
          3,
          3
        ],
        [
          3,
          3,
          1,
          3,
          1,
          3,
          3
        ],
        [
          3,
          3,
          1,
          3,
          3,
          1,
          1
        ],
        [
          3,
          3,
          1,
          3,
          3,
          1,
          3
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          2,
          2,
          2,
          0,
          4,
          2,
          0,
          2,
          0,
          0,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          0,
          0,
          0,
          4,
          2,
          2,
          0,
          2,
          0,
          2,
          0
        ],
        [
          0,
          2,
          2,
          2,
          0,
          0,
          2,
          4,
          0,
          2,
          0,
          2,
          0,
          2,
          2
        ],
        [
          2,
          2,
          0,
          2,
          2,
          2,
          0,
          4,
          0,
          0,
          2,
          0,
          0,
          2,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          4,
          0,
          2,
          0,
          0,
          2,
          2,
          0
        ],
        [
          2,
          2,
          0,
          0,
          0,
          2,
          0,
          4,
          0,
          2,
          2,
          2,
          0,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          4,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          3,
          3,
          1,
          3,
          1,
          3,
          3
        ],
        [
          3,
          1,
          3,
          1,
          1,
          3,
          3
        ],
        [
          3,
          1,
          3,
          1,
          1,
          3,
          3
        ],
        [
          3,
          1,
          1,
          3,
          1,
          3,
          1
        ],
        [
          1,
          3,
          3,
          1,
          3,
          3,
          1
        ],
        [
          1,
          1,
          1,
          3,
          3,
          1,
          1
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          0,
          2,
          2,
          0,
          2,
          4,
          2,
          0,
          2,
          2,
          2
        ],
        [
          0,
          0,
          2,
          2,
          0,
          4,
          2,
          2,
          0,
          0,
          2
        ],
        [
          0,
          2,
          0,
          0,
          0,
          4,
          2,
          0,
          0,
          0,
          2
        ],
        [
          2,
          0,
          2,
          2,
          0,
          4,
          2,
          2,
          2,
          0,
          0
        ],
        [
          2,
          0,
          2,
          0,
          2,
          4,
          2,
          0,
          2,
          2,
          2
        ]
      ],
      "output": [
        [
          3,
          1,
          1,
          1,
          1
        ],
        [
          3,
          1,
          3,
          1,
          3
        ],
        [
          3,
          3,
          1,
          1,
          3
        ],
        [
          3,
          1,
          1,
          1,
          3
        ],
        [
          1,
          3,
          1,
          1,
          1
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# bitmasks with separator, boolean logical operations, symmetry, color guide\n\n# description:\n# The input grid consists of two square patterns separated by a vertical yellow line.\n# Each pattern is made up of red and black pixels.\n# To create the output:\n# 1. Perform an XOR operation between the left pattern and the vertical mirror of the right pattern.\n# 2. Where the XOR result is true (different), color the output green.\n# 3. Where the XOR result is false (same), color the output blue.\n# The output should be a single square pattern of the same size as each input pattern.\n\ndef main(input_grid):\n    height, width = input_grid.shape\n    \n    # Find the yellow vertical line\n    for x_bar in range(width):\n        if np.all(input_grid[:, x_bar] == Color.YELLOW):\n            break\n    \n    # Extract left and right patterns\n    left_pattern = input_grid[:, :x_bar]\n    right_pattern = input_grid[:, x_bar+1:]\n    \n    # Mirror the right pattern\n    mirrored_right = np.fliplr(right_pattern)\n    \n    # Initialize output grid\n    output_grid = np.zeros_like(left_pattern)\n    \n    # Perform XOR operation and apply color mapping\n    xor_result = (left_pattern != mirrored_right)\n    output_grid[xor_result] = Color.GREEN\n    output_grid[~xor_result] = Color.BLUE\n    \n    return output_grid\n\ndef generate_input():\n    # Define the size of each pattern (square)\n    size = np.random.randint(5, 9)\n    \n    # Initialize the input grid\n    input_grid = np.full((size, size * 2 + 1), Color.BLACK)\n    \n    # Generate left pattern\n    left_pattern = np.random.choice([Color.BLACK, Color.RED], size=(size, size))\n    \n    # Generate right pattern (ensuring it's different from left)\n    right_pattern = np.random.choice([Color.BLACK, Color.RED], size=(size, size))\n    while np.array_equal(left_pattern, right_pattern):\n        right_pattern = np.random.choice([Color.BLACK, Color.RED], size=(size, size))\n    \n    # Place patterns in the input grid\n    input_grid[:, :size] = left_pattern\n    input_grid[:, size+1:] = right_pattern\n    \n    # Add yellow separator\n    input_grid[:, size] = Color.YELLOW\n    \n    return input_grid"
}