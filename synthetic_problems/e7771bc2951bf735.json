{
  "uid": "e7771bc2951bf735",
  "annotations": {
    "example": "bad",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          5,
          0,
          0,
          0
        ],
        [
          5,
          9,
          0,
          0,
          9
        ],
        [
          9,
          0,
          5,
          9,
          9
        ],
        [
          5,
          0,
          5,
          5,
          0
        ],
        [
          5,
          0,
          0,
          0,
          5
        ],
        [
          0,
          0,
          0,
          9,
          9
        ],
        [
          5,
          9,
          5,
          9,
          5
        ],
        [
          1,
          1,
          1,
          1,
          1
        ],
        [
          5,
          0,
          5,
          0,
          9
        ],
        [
          5,
          0,
          5,
          0,
          0
        ],
        [
          0,
          9,
          0,
          0,
          5
        ],
        [
          5,
          5,
          9,
          9,
          9
        ],
        [
          5,
          0,
          0,
          9,
          0
        ],
        [
          0,
          0,
          9,
          9,
          9
        ],
        [
          0,
          0,
          0,
          9,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          9
        ],
        [
          0,
          0,
          0,
          0,
          9
        ]
      ]
    },
    {
      "input": [
        [
          0,
          9,
          5,
          5,
          9,
          9,
          5
        ],
        [
          5,
          9,
          9,
          9,
          0,
          9,
          5
        ],
        [
          9,
          9,
          0,
          0,
          0,
          0,
          5
        ],
        [
          9,
          5,
          9,
          5,
          9,
          9,
          5
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          9,
          5,
          0,
          9
        ],
        [
          5,
          9,
          9,
          0,
          9,
          9,
          0
        ],
        [
          0,
          5,
          0,
          5,
          0,
          0,
          9
        ],
        [
          0,
          0,
          0,
          5,
          5,
          5,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          9,
          9,
          0,
          0,
          9
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          9,
          0,
          5,
          5,
          0,
          0,
          0,
          5
        ],
        [
          5,
          5,
          0,
          9,
          9,
          5,
          0,
          9
        ],
        [
          5,
          5,
          0,
          0,
          5,
          0,
          5,
          9
        ],
        [
          5,
          5,
          9,
          0,
          5,
          9,
          9,
          9
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          9,
          5,
          5,
          9,
          9,
          5,
          9,
          5
        ],
        [
          9,
          0,
          0,
          0,
          9,
          9,
          0,
          5
        ],
        [
          5,
          5,
          5,
          9,
          5,
          9,
          9,
          9
        ],
        [
          0,
          9,
          5,
          9,
          0,
          9,
          5,
          0
        ]
      ],
      "output": [
        [
          0,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          0
        ]
      ]
    },
    {
      "input": [
        [
          9,
          9,
          5,
          5,
          5,
          0,
          0,
          5
        ],
        [
          9,
          9,
          5,
          5,
          5,
          0,
          5,
          0
        ],
        [
          9,
          5,
          9,
          0,
          0,
          9,
          5,
          0
        ],
        [
          9,
          5,
          9,
          9,
          9,
          5,
          9,
          9
        ],
        [
          0,
          9,
          5,
          9,
          9,
          5,
          0,
          9
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          9,
          0,
          5,
          5,
          9,
          5,
          5,
          5
        ],
        [
          9,
          0,
          5,
          9,
          9,
          0,
          5,
          0
        ],
        [
          0,
          0,
          9,
          9,
          0,
          5,
          0,
          9
        ],
        [
          5,
          5,
          0,
          0,
          9,
          5,
          5,
          5
        ],
        [
          0,
          9,
          0,
          0,
          9,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0
        ],
        [
          0,
          0,
          9,
          0,
          0,
          9,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# boolean logical operations, bitmasks with separator, sliding objects\n\n# description:\n# In the input you will see two maroon bitmasks separated by a blue vertical bar\n# First, produce a new bitmask by taking the logical AND of the maroon pixels from both bitmasks\n# Then, move this resulting bitmask one pixel down in the output grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the blue vertical bar. Vertical means constant X\n    for x_bar in range(input_grid.shape[0]):\n        if np.all(input_grid[x_bar, :] == Color.BLUE):\n            break\n\n    left_mask = input_grid[:x_bar, :]\n    right_mask = input_grid[x_bar+1:, :]\n\n    # Create the AND bitmask\n    and_mask = (left_mask == Color.MAROON) & (right_mask == Color.MAROON)\n    merged_mask = np.zeros_like(left_mask)\n    merged_mask[and_mask] = Color.MAROON\n\n    # Slide down by one pixel\n    output_grid = translate(merged_mask, 0, 1, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # create a pair of equally sized maroon bitmasks\n    width, height = np.random.randint(2, 10), np.random.randint(2, 10)\n\n    grid1 = np.zeros((width, height), dtype=int)\n    grid2 = np.zeros((width, height), dtype=int)\n\n    for x in range(width):\n        for y in range(height):\n            grid1[x, y] = np.random.choice([Color.MAROON, Color.GREY, Color.BLACK])\n            grid2[x, y] = np.random.choice([Color.MAROON, Color.GREY, Color.BLACK])\n    \n    # create a blue vertical bar\n    bar = np.zeros((1, height), dtype=int)\n    bar[0, :] = Color.BLUE\n\n    grid = np.concatenate((grid1, bar, grid2), axis=0)\n\n    return grid"
}