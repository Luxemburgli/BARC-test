{
  "uid": "39f8cb7f61eb6230",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0,
          7,
          7
        ],
        [
          9,
          9,
          9,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0,
          0
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          8,
          7,
          7,
          7,
          7,
          7,
          4,
          4,
          7
        ],
        [
          8,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          4,
          4,
          7
        ],
        [
          7,
          7,
          8,
          7,
          7,
          7,
          7,
          7,
          4,
          7,
          4
        ]
      ],
      "output": [
        [
          9,
          9,
          0,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          9,
          9,
          0,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          8,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ]
      ]
    },
    {
      "input": [
        [
          6,
          7,
          6,
          6,
          6,
          6,
          6,
          8,
          6
        ],
        [
          6,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          4,
          4,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          4,
          4,
          4,
          6,
          6,
          6,
          5,
          6,
          6
        ],
        [
          6,
          4,
          6,
          6,
          6,
          6,
          6,
          5,
          5
        ]
      ],
      "output": [
        [
          8,
          8,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          8,
          8,
          4,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          5,
          5,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ]
      ]
    },
    {
      "input": [
        [
          4,
          4,
          6,
          4,
          4,
          4,
          4,
          0,
          4,
          0
        ],
        [
          6,
          6,
          4,
          4,
          4,
          4,
          4,
          0,
          0,
          4
        ],
        [
          4,
          6,
          6,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          7,
          4,
          4,
          4,
          4,
          4,
          5,
          4,
          5
        ],
        [
          4,
          7,
          7,
          4,
          4,
          4,
          4,
          5,
          5,
          5
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          5,
          5,
          5
        ]
      ],
      "output": [
        [
          0,
          0,
          7,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          0,
          0,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          5,
          5,
          6,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ]
      ]
    },
    {
      "input": [
        [
          5,
          1,
          5,
          5,
          5,
          5,
          7,
          7
        ],
        [
          1,
          1,
          5,
          5,
          5,
          5,
          7,
          7
        ],
        [
          1,
          5,
          1,
          5,
          5,
          7,
          7,
          7
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          8,
          5,
          5,
          3,
          3,
          5
        ],
        [
          8,
          5,
          5,
          5,
          5,
          5,
          3,
          5
        ],
        [
          5,
          8,
          8,
          5,
          5,
          3,
          3,
          3
        ]
      ],
      "output": [
        [
          7,
          7,
          8,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          7,
          7,
          8,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          3,
          3,
          1,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# patterns, positioning, copying, color guide, rotation\n\n# description:\n# In the input, you will see four square patterns of pixels, one in each corner of the grid. Each pattern is made up of two colors: a background color and a foreground color. The background color is the same for all patterns, but the foreground color may vary.\n# To create the output:\n# 1. Determine the size of the output grid by adding 2 to the size of the largest pattern.\n# 2. Copy each pattern to the corresponding corner of the output grid.\n# 3. Rotate each pattern 90 degrees clockwise.\n# 4. Change the foreground color of each pattern to match the foreground color of the pattern that was originally in the clockwise-next corner.\n\ndef main(input_grid):\n    # Find the patterns\n    background_color = input_grid[0, 0]  # Assuming the background color is in the top-left corner\n    objects = find_connected_components(input_grid, background=background_color, connectivity=8, monochromatic=False)\n\n    # Find the bounding box of each pattern\n    bounding_boxes = [bounding_box(obj) for obj in objects]\n\n    # Determine the size of the output grid\n    pattern_size = max([max(bb[2], bb[3]) for bb in bounding_boxes])\n    output_size = pattern_size + 2\n\n    # Create the output grid\n    output_grid = np.full((output_size, output_size), background_color)\n\n    # Process each pattern\n    corner_positions = [(0, 0), (0, output_size - pattern_size), (output_size - pattern_size, 0), (output_size - pattern_size, output_size - pattern_size)]\n    foreground_colors = []\n\n    for obj, (x, y, w, h) in zip(objects, bounding_boxes):\n        # Determine the corner of the pattern\n        if x < input_grid.shape[0] // 2:\n            if y < input_grid.shape[1] // 2:\n                corner = 0  # Top-left\n            else:\n                corner = 1  # Top-right\n        else:\n            if y < input_grid.shape[1] // 2:\n                corner = 2  # Bottom-left\n            else:\n                corner = 3  # Bottom-right\n\n        # Crop and rotate the pattern\n        pattern = crop(obj, background=background_color)\n        rotated_pattern = np.rot90(pattern, k=-1)  # Rotate 90 degrees clockwise\n\n        # Find the foreground color\n        foreground_color = next(color for color in np.unique(pattern) if color != background_color)\n        foreground_colors.append(foreground_color)\n\n        # Copy the rotated pattern to the output grid\n        blit_sprite(output_grid, rotated_pattern, x=corner_positions[corner][0], y=corner_positions[corner][1], background=background_color)\n\n    # Change the foreground colors\n    for i, (x, y) in enumerate(corner_positions):\n        next_color = foreground_colors[(i + 1) % 4]\n        mask = (output_grid[x:x+pattern_size, y:y+pattern_size] != background_color)\n        output_grid[x:x+pattern_size, y:y+pattern_size][mask] = next_color\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random sized grid with a random background color\n    n = np.random.randint(8, 12)\n    m = np.random.randint(8, 12)\n    background_color = np.random.choice(list(Color.ALL_COLORS))\n    grid = np.full((n, m), background_color)\n\n    # Select four different colors for the patterns (excluding the background color)\n    pattern_colors = np.random.choice([c for c in Color.ALL_COLORS if c != background_color], size=4, replace=False)\n\n    # Generate patterns for each corner\n    pattern_size = np.random.randint(3, min(n, m) // 2)\n    corners = [(0, 0), (0, m - pattern_size), (n - pattern_size, 0), (n - pattern_size, m - pattern_size)]\n\n    for (x, y), color in zip(corners, pattern_colors):\n        pattern = np.random.choice([background_color, color], size=(pattern_size, pattern_size))\n        grid[x:x+pattern_size, y:y+pattern_size] = pattern\n\n    return grid"
}