{
  "uid": "3aad529fcd0cd58a",
  "annotations": {
    "example": "ok",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          8,
          7,
          6,
          4,
          6,
          9
        ],
        [
          8,
          5,
          6,
          7,
          9,
          3
        ],
        [
          3,
          7,
          7,
          9,
          7,
          5
        ],
        [
          7,
          1,
          6,
          5,
          8,
          7
        ],
        [
          4,
          8,
          2,
          7,
          7,
          3
        ],
        [
          7,
          1,
          8,
          3,
          3,
          3
        ],
        [
          8,
          4,
          5,
          9,
          8,
          9
        ],
        [
          7,
          4,
          4,
          3,
          7,
          8
        ]
      ],
      "output": [
        [
          9,
          6,
          4,
          6,
          7,
          8
        ],
        [
          3,
          9,
          7,
          6,
          5,
          8
        ],
        [
          5,
          7,
          9,
          7,
          7,
          3
        ],
        [
          7,
          8,
          5,
          6,
          1,
          7
        ],
        [
          3,
          7,
          7,
          2,
          8,
          4
        ],
        [
          3,
          3,
          3,
          8,
          1,
          7
        ],
        [
          9,
          8,
          9,
          5,
          4,
          8
        ],
        [
          8,
          7,
          3,
          4,
          4,
          7
        ]
      ]
    },
    {
      "input": [
        [
          7,
          4,
          1,
          2,
          3,
          6,
          1,
          5
        ],
        [
          2,
          7,
          9,
          1,
          8,
          9,
          5,
          9
        ],
        [
          9,
          8,
          8,
          9,
          6,
          7,
          1,
          7
        ],
        [
          9,
          6,
          3,
          3,
          4,
          4,
          7,
          4
        ],
        [
          1,
          8,
          8,
          6,
          7,
          1,
          3,
          2
        ]
      ],
      "output": [
        [
          5,
          1,
          6,
          3,
          2,
          1,
          4,
          7
        ],
        [
          9,
          5,
          9,
          8,
          1,
          9,
          7,
          2
        ],
        [
          7,
          1,
          7,
          6,
          9,
          8,
          8,
          9
        ],
        [
          4,
          7,
          4,
          4,
          3,
          3,
          6,
          9
        ],
        [
          2,
          3,
          1,
          7,
          6,
          8,
          8,
          1
        ]
      ]
    },
    {
      "input": [
        [
          5,
          9,
          4,
          4,
          2,
          3,
          1,
          7,
          8
        ],
        [
          6,
          7,
          5,
          6,
          1,
          8,
          4,
          7,
          3
        ],
        [
          8,
          1,
          1,
          9,
          3,
          7,
          5,
          2,
          4
        ],
        [
          6,
          8,
          7,
          5,
          6,
          8,
          9,
          4,
          9
        ],
        [
          6,
          1,
          5,
          3,
          5,
          1,
          1,
          8,
          7
        ]
      ],
      "output": [
        [
          8,
          7,
          1,
          3,
          2,
          4,
          4,
          9,
          5
        ],
        [
          3,
          7,
          4,
          8,
          1,
          6,
          5,
          7,
          6
        ],
        [
          4,
          2,
          5,
          7,
          3,
          9,
          1,
          1,
          8
        ],
        [
          9,
          4,
          9,
          8,
          6,
          5,
          7,
          8,
          6
        ],
        [
          7,
          8,
          1,
          1,
          5,
          3,
          5,
          1,
          6
        ]
      ]
    },
    {
      "input": [
        [
          6,
          5,
          3,
          6,
          9,
          5,
          9
        ],
        [
          1,
          6,
          5,
          6,
          5,
          6,
          9
        ],
        [
          9,
          7,
          6,
          6,
          6,
          8,
          9
        ],
        [
          4,
          1,
          7,
          7,
          6,
          5,
          1
        ],
        [
          2,
          6,
          9,
          2,
          8,
          7,
          1
        ],
        [
          7,
          4,
          8,
          3,
          5,
          7,
          2
        ],
        [
          6,
          3,
          3,
          9,
          7,
          8,
          8
        ]
      ],
      "output": [
        [
          9,
          5,
          9,
          6,
          3,
          5,
          6
        ],
        [
          9,
          6,
          5,
          6,
          5,
          6,
          1
        ],
        [
          9,
          8,
          6,
          6,
          6,
          7,
          9
        ],
        [
          1,
          5,
          6,
          7,
          7,
          1,
          4
        ],
        [
          1,
          7,
          8,
          2,
          9,
          6,
          2
        ],
        [
          2,
          7,
          5,
          3,
          8,
          4,
          7
        ],
        [
          8,
          8,
          7,
          9,
          3,
          3,
          6
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# colors, patterns, symmetry\n\n# description:\n# In the input, you will see a colored grid with multiple colors.\n# To create the output grid, swap vertical mirrors of distinct colors: for any color in the left half of the grid, swap it with its mirror image in the right half of the grid.\n# If the grid has an odd number of columns, the middle column's colors stay the same.\n\ndef main(input_grid):\n    # Get the input grid dimensions\n    n, m = input_grid.shape\n\n    # Create a copy of the input grid to store the output\n    output_grid = input_grid.copy()\n\n    # Define the halfway point\n    mid = m // 2\n\n    # Iterate over the left half and right half of the grid, swapping mirrors\n    for i in range(n):\n        for j in range(mid):\n            mirrored_j = m - 1 - j\n            # Swap the colors\n            output_grid[i, j], output_grid[i, mirrored_j] = input_grid[i, mirrored_j], input_grid[i, j]\n\n    return output_grid\n\ndef generate_input():\n    # Randomly decide the grid dimensions\n    n = np.random.randint(3, 10)\n    m = np.random.randint(3, 10)\n\n    # Create a random grid with colors (excluding black)\n    input_grid = np.random.choice(list(Color.NOT_BLACK), size=(n, m))\n\n    return input_grid"
}