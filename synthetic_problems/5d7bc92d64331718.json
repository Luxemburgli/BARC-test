{
  "uid": "5d7bc92d64331718",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          3,
          9,
          7,
          6,
          6,
          7,
          9,
          3
        ],
        [
          7,
          7,
          9,
          7,
          5,
          7,
          1,
          6
        ],
        [
          7,
          3,
          7,
          7,
          7,
          7,
          3,
          7
        ],
        [
          8,
          3,
          3,
          3,
          8,
          4,
          5,
          9
        ],
        [
          9,
          7,
          4,
          4,
          3,
          7,
          8,
          5
        ],
        [
          4,
          4,
          8,
          8,
          8,
          8,
          4,
          4
        ],
        [
          5,
          4,
          6,
          1,
          3,
          8,
          9,
          8
        ],
        [
          2,
          5,
          6,
          7,
          2,
          9,
          2,
          9
        ]
      ],
      "output": [
        [
          3,
          9,
          7,
          6,
          6,
          7,
          9,
          3
        ],
        [
          7,
          7,
          9,
          7,
          7,
          9,
          7,
          7
        ],
        [
          7,
          3,
          7,
          7,
          7,
          7,
          3,
          7
        ],
        [
          8,
          3,
          3,
          3,
          3,
          3,
          3,
          8
        ],
        [
          9,
          7,
          4,
          4,
          4,
          4,
          7,
          9
        ],
        [
          4,
          4,
          8,
          8,
          8,
          8,
          4,
          4
        ],
        [
          5,
          4,
          6,
          1,
          1,
          6,
          4,
          5
        ],
        [
          2,
          5,
          6,
          7,
          7,
          6,
          5,
          2
        ]
      ]
    },
    {
      "input": [
        [
          5,
          1,
          6,
          3,
          6,
          1,
          5
        ],
        [
          7,
          9,
          1,
          8,
          9,
          5,
          9
        ],
        [
          9,
          8,
          8,
          9,
          6,
          7,
          1
        ],
        [
          4,
          7,
          4,
          4,
          4,
          7,
          4
        ],
        [
          1,
          8,
          8,
          6,
          7,
          1,
          3
        ],
        [
          1,
          8,
          2,
          8,
          5,
          6,
          5
        ],
        [
          9,
          4,
          7,
          6,
          7,
          4,
          9
        ]
      ],
      "output": [
        [
          5,
          1,
          6,
          3,
          6,
          1,
          5
        ],
        [
          7,
          9,
          1,
          8,
          1,
          9,
          7
        ],
        [
          9,
          8,
          8,
          9,
          8,
          8,
          9
        ],
        [
          4,
          7,
          4,
          4,
          4,
          7,
          4
        ],
        [
          1,
          8,
          8,
          6,
          8,
          8,
          1
        ],
        [
          1,
          8,
          2,
          8,
          2,
          8,
          1
        ],
        [
          9,
          4,
          7,
          6,
          7,
          4,
          9
        ]
      ]
    },
    {
      "input": [
        [
          9,
          4,
          4,
          2,
          3,
          1,
          7,
          8,
          6
        ],
        [
          1,
          8,
          3,
          7,
          4,
          7,
          3,
          8,
          1
        ],
        [
          9,
          3,
          7,
          5,
          2,
          4,
          6,
          8,
          7
        ],
        [
          5,
          1,
          6,
          9,
          4,
          9,
          6,
          1,
          5
        ],
        [
          3,
          9,
          2,
          8,
          7,
          8,
          2,
          9,
          3
        ],
        [
          7,
          1,
          4,
          4,
          1,
          4,
          4,
          1,
          7
        ],
        [
          9,
          9,
          6,
          8,
          1,
          7,
          3,
          5,
          1
        ]
      ],
      "output": [
        [
          9,
          4,
          4,
          2,
          3,
          2,
          4,
          4,
          9
        ],
        [
          1,
          8,
          3,
          7,
          4,
          7,
          3,
          8,
          1
        ],
        [
          9,
          3,
          7,
          5,
          2,
          5,
          7,
          3,
          9
        ],
        [
          5,
          1,
          6,
          9,
          4,
          9,
          6,
          1,
          5
        ],
        [
          3,
          9,
          2,
          8,
          7,
          8,
          2,
          9,
          3
        ],
        [
          7,
          1,
          4,
          4,
          1,
          4,
          4,
          1,
          7
        ],
        [
          9,
          9,
          6,
          8,
          1,
          8,
          6,
          9,
          9
        ]
      ]
    },
    {
      "input": [
        [
          6,
          5,
          3,
          6,
          9,
          5,
          9,
          1,
          6
        ],
        [
          6,
          6,
          6,
          7,
          9,
          7,
          6,
          6,
          6
        ],
        [
          9,
          4,
          1,
          7,
          7,
          6,
          5,
          1,
          2
        ],
        [
          8,
          4,
          7,
          1,
          7,
          1,
          7,
          4,
          8
        ],
        [
          8,
          7,
          9,
          3,
          3,
          3,
          9,
          7,
          8
        ],
        [
          4,
          9,
          7,
          9,
          8,
          9,
          7,
          9,
          4
        ],
        [
          1,
          4,
          5,
          5,
          2,
          8,
          1,
          2,
          4
        ],
        [
          2,
          6,
          3,
          8,
          3,
          8,
          3,
          6,
          2
        ],
        [
          9,
          5,
          7,
          3,
          7,
          2,
          9,
          4,
          1
        ]
      ],
      "output": [
        [
          6,
          5,
          3,
          6,
          9,
          6,
          3,
          5,
          6
        ],
        [
          6,
          6,
          6,
          7,
          9,
          7,
          6,
          6,
          6
        ],
        [
          9,
          4,
          1,
          7,
          7,
          7,
          1,
          4,
          9
        ],
        [
          8,
          4,
          7,
          1,
          7,
          1,
          7,
          4,
          8
        ],
        [
          8,
          7,
          9,
          3,
          3,
          3,
          9,
          7,
          8
        ],
        [
          4,
          9,
          7,
          9,
          8,
          9,
          7,
          9,
          4
        ],
        [
          1,
          4,
          5,
          5,
          2,
          5,
          5,
          4,
          1
        ],
        [
          2,
          6,
          3,
          8,
          3,
          8,
          3,
          6,
          2
        ],
        [
          9,
          5,
          7,
          3,
          7,
          3,
          7,
          5,
          9
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n\n# concepts:\n# symmetry detection, patterns, sprites\n\n# description:\n# In the input, you will get a grid where each row contains colored objects. If a row is symmetric around its center, it remains unchanged.\n# If a row is asymmetric, transform it to be symmetric by reflecting its right side to its left.\n\ndef main(input_grid):\n    n, m = input_grid.shape\n\n    output_grid = input_grid.copy()\n\n    for y in range(n):\n        left = input_grid[y, :m//2]\n        if m % 2 == 0:\n            # even number of columns\n            right = input_grid[y, m//2:]\n        else:\n            # odd number of columns, exclude middle element from the right part\n            right = input_grid[y, m//2+1:]\n\n        # Check if left and right are reflections of each other\n        if not np.array_equal(left, right[::-1]):\n            right_reflected = left[::-1]\n            if m % 2 == 0:\n                output_grid[y, m//2:] = right_reflected\n            else:\n                output_grid[y, m//2+1:] = right_reflected\n                \n    return output_grid\n\ndef generate_input():\n    n = np.random.randint(5, 10)  # number of rows\n    m = np.random.randint(5, 10)  # number of columns\n    \n    grid = np.empty((n, m), dtype=int)\n\n    for y in range(n):\n        row = np.random.choice(Color.NOT_BLACK, size=m)\n        if np.random.rand() > 0.5:\n            # Make the row symmetric\n            row[:m//2] = row[m//2+m%2:][::-1]\n        grid[y] = row\n\n    return grid"
}