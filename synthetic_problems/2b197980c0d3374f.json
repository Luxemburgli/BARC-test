{
  "uid": "2b197980c0d3374f",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          6,
          9,
          8,
          5,
          6,
          7,
          9,
          3
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          6,
          9,
          8,
          5,
          6,
          7,
          9,
          3
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          6,
          9,
          8,
          5,
          6,
          7,
          9,
          3
        ],
        [
          3,
          9,
          7,
          6,
          5,
          8,
          9,
          6
        ],
        [
          6,
          9,
          8,
          5,
          6,
          7,
          9,
          3
        ],
        [
          3,
          9,
          7,
          6,
          5,
          8,
          9,
          6
        ],
        [
          6,
          9,
          8,
          5,
          6,
          7,
          9,
          3
        ],
        [
          3,
          9,
          7,
          6,
          5,
          8,
          9,
          6
        ]
      ]
    },
    {
      "input": [
        [
          4,
          1,
          2,
          3,
          6,
          1,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          4,
          1,
          2,
          3,
          6,
          1,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          4,
          1,
          2,
          3,
          6,
          1,
          5
        ],
        [
          5,
          1,
          6,
          3,
          2,
          1,
          4
        ],
        [
          4,
          1,
          2,
          3,
          6,
          1,
          5
        ],
        [
          5,
          1,
          6,
          3,
          2,
          1,
          4
        ],
        [
          4,
          1,
          2,
          3,
          6,
          1,
          5
        ]
      ]
    },
    {
      "input": [
        [
          9,
          4,
          4,
          2,
          3,
          1,
          7,
          8,
          6
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          9,
          4,
          4,
          2,
          3,
          1,
          7,
          8,
          6
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          9,
          4,
          4,
          2,
          3,
          1,
          7,
          8,
          6
        ],
        [
          6,
          8,
          7,
          1,
          3,
          2,
          4,
          4,
          9
        ],
        [
          9,
          4,
          4,
          2,
          3,
          1,
          7,
          8,
          6
        ],
        [
          6,
          8,
          7,
          1,
          3,
          2,
          4,
          4,
          9
        ],
        [
          9,
          4,
          4,
          2,
          3,
          1,
          7,
          8,
          6
        ]
      ]
    },
    {
      "input": [
        [
          6,
          5,
          3,
          6,
          9,
          5,
          9,
          1,
          6
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          6,
          5,
          3,
          6,
          9,
          5,
          9,
          1,
          6
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          6,
          5,
          3,
          6,
          9,
          5,
          9,
          1,
          6
        ],
        [
          6,
          1,
          9,
          5,
          9,
          6,
          3,
          5,
          6
        ],
        [
          6,
          5,
          3,
          6,
          9,
          5,
          9,
          1,
          6
        ],
        [
          6,
          1,
          9,
          5,
          9,
          6,
          3,
          5,
          6
        ],
        [
          6,
          5,
          3,
          6,
          9,
          5,
          9,
          1,
          6
        ],
        [
          6,
          1,
          9,
          5,
          9,
          6,
          3,
          5,
          6
        ],
        [
          6,
          5,
          3,
          6,
          9,
          5,
          9,
          1,
          6
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# patterns, lines, repetition, symmetry\n\n# description:\n# In the input, you will see a sequence of colored pixels forming a pattern on the first row of the grid.\n# Below that row, there will be a grey line.\n# To make the output, copy the first two rows of the input.\n# Then, starting below the grey line, repeat the pattern of colors from the first row in a symmetrical manner.\n# Fill the subsequent rows, alternating the pattern and its mirror image until you reach the bottom of the grid.\n\ndef main(input_grid):\n    # Copy the first two rows to the output grid\n    output_grid = np.copy(input_grid[:2, :])\n    \n    # Get the colors from the first row\n    colors = input_grid[0, :]\n\n    # Find the y-coordinate of the grey line\n    grey_line_y = np.where(input_grid[1, :] == Color.GREY)[0][0]\n\n    # Determine the height of the grid to know how many rows to fill below the grey line\n    grid_height = input_grid.shape[0]\n    fill_rows = grid_height - 2  # The number of rows we need to fill below the grey line\n    \n    # Fill rows below the grey line with the color pattern and its mirror images\n    for i in range(fill_rows):\n        if i % 2 == 0:\n            # Direct copy of the color pattern\n            output_grid = np.vstack((output_grid, colors))\n        else:\n            # Mirror image of the color pattern\n            output_grid = np.vstack((output_grid, np.flip(colors)))\n    \n    return output_grid\n\n\ndef generate_input():\n    # Set up grid dimensions with at least 5 rows and 5 columns\n    rows = np.random.randint(5, 10)\n    cols = np.random.randint(5, 10)\n    grid = np.zeros((rows, cols), dtype=int)\n\n    # Create random colors for the top row\n    colors = np.random.choice(list(Color.NOT_BLACK), cols, replace=True)\n    grid[0, :] = colors\n\n    # Put a grey line below the top row\n    grid[1, :] = Color.GREY\n\n    return grid"
}