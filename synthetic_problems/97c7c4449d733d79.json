{
  "uid": "97c7c4449d733d79",
  "annotations": {
    "example": "good",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          9,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          9,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0
        ],
        [
          8,
          8,
          8,
          8,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          0,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          0
        ]
      ]
    },
    {
      "input": [
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          8,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          6,
          6,
          0,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          2,
          0,
          0,
          0
        ],
        [
          8,
          8,
          8,
          8,
          8,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          8,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          3,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          8,
          8,
          0,
          0,
          0,
          0,
          0
        ],
        [
          9,
          9,
          9,
          0,
          0,
          0,
          0
        ],
        [
          6,
          6,
          6,
          6,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          0,
          0
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          0
        ]
      ]
    },
    {
      "input": [
        [
          4,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          9,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          4,
          4,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          9,
          9,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# patterns, lines, pixel manipulation\n\n# description:\n# In the input, you will see a grid with a top row consisting of a sequence of colored pixels, with each color representing a pattern.\n# To make the output, copy the first row of the input to the output.\n# Then, starting from the second row onwards, draw diagonal lines starting from each pixel in the first row.\n# The color of each diagonal line will match the color of the corresponding pixel in the first row.\n# Each diagonal line will slope downwards to the right.\n\ndef main(input_grid):\n    # create an output grid initialized with the input grid\n    output_grid = np.copy(input_grid)\n    \n    # get the colors from the top row\n    colors = input_grid[:, 0]\n    \n    # draw the diagonal lines for each color in the top row\n    for col in range(len(colors)):\n        for row in range(1, input_grid.shape[1]):\n            x = col\n            y = row\n            if x < input_grid.shape[0] and y < input_grid.shape[1]:\n                output_grid[x, y] = colors[col]\n                col += 1\n    \n    return output_grid\n\ndef generate_input():\n    # random grid height (rows count more than colors count)\n    n = np.random.randint(5, 10)\n    # number of colors in the top row\n    num_colors = np.random.randint(3, 7)\n    \n    # creating a grid with initial background color\n    grid = np.zeros((num_colors, n), dtype=int)\n    \n    # fill the top row with random colors\n    colors = np.random.choice(list(Color.NOT_BLACK), num_colors, replace=False)\n    for i in range(num_colors):\n        grid[i, 0] = colors[i]\n    \n    return grid"
}