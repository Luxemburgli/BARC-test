{
  "uid": "24cca0c44a10a6cc",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          3,
          1,
          4,
          0,
          4,
          2,
          0
        ],
        [
          1,
          6,
          4,
          0,
          4,
          2,
          4,
          6
        ],
        [
          4,
          3,
          6,
          0,
          2,
          6,
          0,
          0
        ],
        [
          1,
          0,
          1,
          2,
          0,
          6,
          3,
          6
        ],
        [
          1,
          1,
          4,
          2,
          0,
          4,
          4,
          4
        ],
        [
          4,
          3,
          6,
          2,
          6,
          2,
          6,
          0
        ],
        [
          3,
          6,
          4,
          0,
          4,
          6,
          3,
          3
        ],
        [
          6,
          1,
          4,
          4,
          4,
          6,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          1,
          0,
          0,
          0,
          2,
          3,
          0
        ],
        [
          6,
          0,
          4,
          0,
          0,
          4,
          6,
          2
        ],
        [
          0,
          0,
          6,
          1,
          0,
          6,
          3,
          0
        ],
        [
          6,
          4,
          6,
          0,
          4,
          2,
          4,
          4
        ],
        [
          0,
          0,
          0,
          0,
          1,
          0,
          2,
          4
        ],
        [
          0,
          4,
          1,
          6,
          1,
          6,
          4,
          4
        ],
        [
          4,
          3,
          6,
          0,
          4,
          0,
          6,
          3
        ],
        [
          0,
          4,
          6,
          0,
          0,
          0,
          2,
          6
        ]
      ]
    },
    {
      "input": [
        [
          0,
          4,
          3,
          2,
          3,
          4,
          1
        ],
        [
          4,
          0,
          2,
          6,
          1,
          6,
          1
        ],
        [
          2,
          0,
          1,
          2,
          6,
          2,
          6
        ],
        [
          2,
          4,
          6,
          2,
          3,
          3,
          2
        ],
        [
          0,
          2,
          2,
          0,
          4,
          4,
          4
        ],
        [
          1,
          3,
          4,
          4,
          3,
          0,
          3
        ],
        [
          6,
          3,
          2,
          0,
          3,
          2,
          4
        ]
      ],
      "output": [
        [
          2,
          4,
          3,
          1,
          3,
          0,
          0
        ],
        [
          4,
          6,
          2,
          4,
          1,
          0,
          0
        ],
        [
          6,
          1,
          6,
          1,
          2,
          4,
          1
        ],
        [
          1,
          3,
          3,
          1,
          6,
          4,
          1
        ],
        [
          0,
          0,
          0,
          0,
          4,
          1,
          0
        ],
        [
          4,
          0,
          3,
          0,
          0,
          3,
          2
        ],
        [
          0,
          1,
          3,
          0,
          4,
          3,
          4
        ]
      ]
    },
    {
      "input": [
        [
          6,
          2,
          3,
          3,
          4,
          0,
          1
        ],
        [
          0,
          1,
          6,
          4,
          2,
          0,
          6
        ],
        [
          0,
          1,
          1,
          2,
          0,
          3,
          4
        ],
        [
          4,
          6,
          4,
          2,
          2,
          0,
          2
        ],
        [
          4,
          3,
          6,
          1,
          3,
          0,
          0
        ],
        [
          3,
          1,
          1,
          0,
          6,
          0,
          3
        ],
        [
          0,
          6,
          1,
          2,
          6,
          3,
          2
        ]
      ],
      "output": [
        [
          2,
          0,
          0,
          4,
          4,
          1,
          6
        ],
        [
          6,
          0,
          1,
          0,
          6,
          2,
          0
        ],
        [
          0,
          3,
          0,
          4,
          2,
          2,
          0
        ],
        [
          1,
          4,
          1,
          1,
          0,
          6,
          0
        ],
        [
          4,
          0,
          3,
          2,
          6,
          3,
          0
        ],
        [
          3,
          0,
          6,
          0,
          2,
          2,
          3
        ],
        [
          1,
          3,
          4,
          1,
          2,
          6,
          0
        ]
      ]
    },
    {
      "input": [
        [
          6,
          0,
          0,
          6,
          1,
          6,
          4,
          0,
          2
        ],
        [
          6,
          3,
          4,
          2,
          2,
          0,
          6,
          0,
          6
        ],
        [
          0,
          2,
          3,
          2,
          0,
          0,
          0,
          0,
          2
        ],
        [
          4,
          3,
          2,
          0,
          1,
          3,
          6,
          2,
          1
        ],
        [
          6,
          0,
          0,
          1,
          1,
          2,
          1,
          2,
          3
        ],
        [
          4,
          6,
          1,
          0,
          6,
          4,
          6,
          4,
          2
        ],
        [
          4,
          3,
          2,
          4,
          1,
          3,
          1,
          1,
          2
        ],
        [
          2,
          0,
          0,
          3,
          2,
          0,
          6,
          3,
          2
        ],
        [
          6,
          3,
          6,
          6,
          1,
          4,
          1,
          2,
          1
        ]
      ],
      "output": [
        [
          1,
          0,
          0,
          4,
          2,
          4,
          4,
          0,
          6
        ],
        [
          6,
          0,
          6,
          0,
          1,
          1,
          0,
          3,
          6
        ],
        [
          1,
          4,
          0,
          0,
          0,
          1,
          3,
          1,
          0
        ],
        [
          2,
          1,
          6,
          3,
          2,
          0,
          4,
          3,
          0
        ],
        [
          3,
          1,
          2,
          1,
          2,
          2,
          0,
          0,
          6
        ],
        [
          1,
          0,
          6,
          0,
          6,
          4,
          2,
          6,
          4
        ],
        [
          4,
          2,
          2,
          3,
          2,
          0,
          1,
          3,
          0
        ],
        [
          1,
          3,
          6,
          0,
          1,
          4,
          0,
          0,
          1
        ],
        [
          2,
          1,
          2,
          0,
          2,
          6,
          6,
          3,
          6
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# colors, symmetry\n\n# description:\n# The input grid contains various colored pixels. To create the output grid:\n# 1. Swap the red and blue colors.\n# 2. Then, apply vertical symmetry to the entire grid (mirror it left-to-right).\n# 3. Finally, rotate any yellow pixels by 90 degrees clockwise around the center of the grid.\n\ndef main(input_grid):\n    # Step 1: Swap red and blue\n    output_grid = input_grid.copy()\n    output_grid[input_grid == Color.RED] = Color.BLUE\n    output_grid[input_grid == Color.BLUE] = Color.RED\n\n    # Step 2: Apply vertical symmetry\n    output_grid = np.fliplr(output_grid)\n\n    # Step 3: Rotate yellow pixels 90 degrees clockwise\n    center_y, center_x = np.array(output_grid.shape) // 2\n    yellow_positions = np.argwhere(output_grid == Color.YELLOW)\n    \n    for y, x in yellow_positions:\n        # Remove the yellow pixel from its current position\n        output_grid[y, x] = Color.BLACK\n        \n        # Calculate new position after 90-degree clockwise rotation\n        dy, dx = y - center_y, x - center_x\n        new_y, new_x = center_y - dx, center_x + dy\n        \n        # Place the yellow pixel in its new position, ensuring it's within the grid\n        if 0 <= new_y < output_grid.shape[0] and 0 <= new_x < output_grid.shape[1]:\n            output_grid[new_y, new_x] = Color.YELLOW\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid with various colors\n    n = np.random.randint(5, 10)\n    colors = [Color.RED, Color.BLUE, Color.YELLOW, Color.GREEN, Color.PINK, Color.BLACK]\n    input_grid = np.random.choice(colors, size=(n, n))\n    return input_grid"
}