{
  "uid": "dd29235217c98859",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          2,
          0,
          2,
          2,
          0,
          2,
          5,
          0,
          1,
          1,
          1,
          0,
          1,
          5,
          4,
          4,
          0,
          4,
          4,
          0
        ],
        [
          0,
          0,
          2,
          0,
          0,
          2,
          5,
          0,
          0,
          1,
          1,
          0,
          0,
          5,
          0,
          0,
          0,
          0,
          0,
          4
        ],
        [
          0,
          0,
          0,
          0,
          2,
          0,
          5,
          1,
          1,
          0,
          1,
          0,
          0,
          5,
          0,
          4,
          0,
          0,
          4,
          0
        ],
        [
          2,
          0,
          2,
          0,
          0,
          0,
          5,
          1,
          0,
          0,
          1,
          1,
          0,
          5,
          0,
          0,
          0,
          4,
          4,
          0
        ],
        [
          2,
          0,
          0,
          0,
          2,
          2,
          5,
          1,
          0,
          0,
          0,
          1,
          1,
          5,
          4,
          0,
          4,
          0,
          0,
          4
        ],
        [
          2,
          2,
          0,
          2,
          2,
          2,
          5,
          0,
          1,
          1,
          1,
          1,
          1,
          5,
          0,
          4,
          0,
          0,
          4,
          0
        ]
      ],
      "output": [
        [
          8,
          8,
          0,
          8,
          8,
          0,
          0,
          8,
          8,
          0,
          8,
          8
        ],
        [
          0,
          0,
          0,
          8,
          0,
          8,
          8,
          0,
          8,
          0,
          0,
          0
        ],
        [
          8,
          8,
          0,
          8,
          8,
          0,
          0,
          8,
          8,
          0,
          8,
          8
        ],
        [
          0,
          0,
          8,
          8,
          8,
          0,
          0,
          8,
          8,
          8,
          0,
          0
        ],
        [
          8,
          0,
          8,
          0,
          0,
          8,
          8,
          0,
          0,
          8,
          0,
          8
        ],
        [
          8,
          8,
          8,
          0,
          8,
          0,
          0,
          8,
          0,
          8,
          8,
          8
        ]
      ]
    },
    {
      "input": [
        [
          0,
          2,
          0,
          2,
          2,
          5,
          0,
          1,
          1,
          0,
          0,
          5,
          0,
          4,
          4,
          4,
          0
        ],
        [
          2,
          0,
          0,
          0,
          2,
          5,
          0,
          1,
          0,
          1,
          0,
          5,
          4,
          4,
          4,
          0,
          0
        ],
        [
          2,
          0,
          0,
          0,
          0,
          5,
          0,
          1,
          0,
          0,
          1,
          5,
          0,
          0,
          4,
          4,
          4
        ],
        [
          0,
          0,
          2,
          2,
          0,
          5,
          0,
          0,
          0,
          1,
          1,
          5,
          4,
          0,
          4,
          0,
          4
        ],
        [
          2,
          0,
          0,
          2,
          2,
          5,
          1,
          0,
          0,
          0,
          0,
          5,
          0,
          4,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          0,
          8,
          0,
          8,
          8,
          0,
          8,
          0,
          8
        ],
        [
          0,
          8,
          0,
          8,
          8,
          8,
          8,
          0,
          8,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          5,
          0,
          1,
          1,
          0,
          0,
          0,
          1,
          5,
          0,
          4,
          4,
          4,
          4,
          4,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          5,
          0,
          0,
          1,
          1,
          0,
          1,
          1,
          5,
          0,
          0,
          4,
          4,
          4,
          4,
          4
        ],
        [
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          5,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          5,
          4,
          4,
          0,
          4,
          4,
          4,
          4
        ],
        [
          2,
          2,
          2,
          2,
          0,
          0,
          0,
          5,
          1,
          0,
          1,
          0,
          0,
          0,
          1,
          5,
          0,
          0,
          4,
          0,
          4,
          4,
          4
        ],
        [
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          5,
          0,
          4,
          0,
          4,
          0,
          0,
          4
        ]
      ],
      "output": [
        [
          0,
          8,
          8,
          8,
          8,
          8,
          0,
          0,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          0,
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0,
          0
        ],
        [
          8,
          8,
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0,
          8,
          8
        ],
        [
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          0,
          8,
          0,
          8,
          0,
          0,
          8,
          8,
          0,
          0,
          8,
          0,
          8,
          0
        ]
      ]
    },
    {
      "input": [
        [
          2,
          2,
          2,
          0,
          0,
          0,
          2,
          5,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          5,
          4,
          4,
          0,
          0,
          0,
          0,
          4
        ],
        [
          0,
          2,
          2,
          0,
          0,
          2,
          0,
          5,
          1,
          0,
          0,
          0,
          1,
          1,
          1,
          5,
          0,
          0,
          4,
          4,
          0,
          4,
          4
        ],
        [
          2,
          0,
          0,
          0,
          2,
          2,
          0,
          5,
          1,
          1,
          0,
          0,
          1,
          1,
          1,
          5,
          4,
          0,
          4,
          0,
          0,
          4,
          4
        ],
        [
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          5,
          1,
          1,
          1,
          0,
          1,
          0,
          0,
          5,
          4,
          0,
          4,
          0,
          0,
          0,
          4
        ],
        [
          2,
          2,
          0,
          0,
          2,
          2,
          2,
          5,
          1,
          1,
          1,
          0,
          1,
          1,
          0,
          5,
          4,
          4,
          4,
          4,
          4,
          4,
          0
        ],
        [
          0,
          0,
          0,
          2,
          0,
          0,
          2,
          5,
          0,
          1,
          1,
          0,
          0,
          1,
          1,
          5,
          4,
          4,
          4,
          4,
          0,
          0,
          4
        ],
        [
          0,
          0,
          0,
          2,
          0,
          2,
          0,
          5,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          5,
          4,
          4,
          0,
          4,
          4,
          4,
          4
        ]
      ],
      "output": [
        [
          8,
          8,
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          0,
          0,
          8,
          8,
          8,
          8,
          0,
          0,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          0,
          0,
          8,
          8,
          0,
          0,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          0,
          8,
          8,
          8,
          8,
          0,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          0,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0,
          8,
          8
        ]
      ]
    }
  ],
  "code": "import numpy as np\nfrom typing import *\nfrom common import *\n\n# concepts:\n# bitmasks with separator, boolean logical operations, symmetries\n\n# description:\n# In the input, you will see three bitmasks separated by grey horizontal bars:\n# 1. A red bitmask at the top\n# 2. A blue bitmask in the middle\n# 3. A yellow bitmask at the bottom\n# To make the output:\n# 1. Apply XOR operation between the red and blue bitmasks\n# 2. Apply OR operation between the result and the yellow bitmask\n# 3. Color the resulting 1s in teal\n# 4. Finally, apply vertical symmetry to the entire output\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the grey horizontal bars\n    bar_indices = []\n    for y in range(input_grid.shape[1]):\n        if np.all(input_grid[:, y] == Color.GREY):\n            bar_indices.append(y)\n\n    assert len(bar_indices) == 2, \"Expected two separator bars\"\n\n    # Extract the three bitmasks\n    red_mask = input_grid[:, :bar_indices[0]]\n    blue_mask = input_grid[:, bar_indices[0]+1:bar_indices[1]]\n    yellow_mask = input_grid[:, bar_indices[1]+1:]\n\n    # Perform boolean operations\n    xor_result = np.logical_xor(red_mask == Color.RED, blue_mask == Color.BLUE)\n    final_result = np.logical_or(xor_result, yellow_mask == Color.YELLOW)\n\n    # Create output grid and color the resulting 1s in teal\n    output_grid = np.full_like(red_mask, Color.BLACK)\n    output_grid[final_result] = Color.TEAL\n\n    # Apply vertical symmetry\n    output_grid = np.concatenate((output_grid, np.fliplr(output_grid)), axis=1)\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    width, height = np.random.randint(3, 8), np.random.randint(3, 8)\n\n    def create_bitmask(color):\n        mask = np.full((width, height), Color.BLACK)\n        mask[np.random.random((width, height)) < 0.5] = color\n        return mask\n\n    red_mask = create_bitmask(Color.RED)\n    blue_mask = create_bitmask(Color.BLUE)\n    yellow_mask = create_bitmask(Color.YELLOW)\n\n    # Create grey horizontal bars\n    bar = np.full((width, 1), Color.GREY)\n\n    # Combine all elements\n    grid = np.concatenate((red_mask, bar, blue_mask, bar, yellow_mask), axis=1)\n\n    return grid"
}