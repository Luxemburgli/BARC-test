{
  "uid": "92556b5c75871902",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng0_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          7,
          4,
          0,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          3,
          0
        ],
        [
          0,
          0,
          0,
          0,
          8,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          8,
          5,
          3,
          7,
          4,
          2,
          0
        ],
        [
          0,
          8,
          5,
          3,
          0,
          0,
          2
        ],
        [
          0,
          7,
          8,
          5,
          3,
          2,
          8
        ],
        [
          7,
          4,
          0,
          8,
          5,
          8,
          0
        ],
        [
          4,
          0,
          0,
          2,
          8,
          5,
          3
        ],
        [
          0,
          0,
          2,
          8,
          0,
          8,
          5
        ],
        [
          0,
          2,
          8,
          0,
          0,
          5,
          8
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          8,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          0,
          0
        ],
        [
          0,
          0,
          3,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          0,
          0,
          7,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          7,
          0,
          2,
          0,
          8,
          1,
          2
        ],
        [
          3,
          7,
          0,
          2,
          1,
          2,
          0
        ],
        [
          0,
          3,
          7,
          1,
          2,
          0,
          7
        ],
        [
          1,
          8,
          1,
          7,
          0,
          7,
          0
        ],
        [
          8,
          1,
          2,
          3,
          7,
          0,
          2
        ],
        [
          1,
          2,
          1,
          7,
          3,
          7,
          0
        ],
        [
          2,
          0,
          7,
          1,
          0,
          3,
          7
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          1,
          0,
          7,
          3,
          0,
          0
        ],
        [
          0,
          0,
          5,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          0,
          1,
          0,
          5,
          3,
          7,
          3,
          2
        ],
        [
          0,
          5,
          0,
          5,
          0,
          7,
          3,
          2,
          0
        ],
        [
          0,
          0,
          5,
          0,
          7,
          3,
          2,
          3,
          0
        ],
        [
          0,
          5,
          0,
          5,
          3,
          2,
          0,
          7,
          3
        ],
        [
          5,
          0,
          7,
          3,
          2,
          0,
          1,
          0,
          7
        ],
        [
          0,
          7,
          3,
          2,
          0,
          5,
          0,
          1,
          0
        ],
        [
          2,
          3,
          2,
          0,
          0,
          0,
          5,
          0,
          1
        ],
        [
          3,
          2,
          0,
          0,
          0,
          0,
          0,
          5,
          0
        ],
        [
          2,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          5
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          1,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          1,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# diagonal lines, color, rectangular cells\n\n# description:\n# In the input, you will see multiple distinct colored pixels randomly placed inside a rectangular grid on a black background.\n# To make the output, for each colored pixel, draw two diagonal lines of the same color starting from the position of each pixel such that they form an `X` shape, intersecting at the pixel's location.\n\ndef main(input_grid):\n    output_grid = np.copy(input_grid)\n\n    # Find the positions of all the colored pixels that are not black\n    colored_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i, j] != Color.BLACK:\n                colored_pixels.append((i, j, input_grid[i, j]))\n\n    # For each colored pixel, draw two diagonals forming an `X`\n    for x, y, color in colored_pixels:\n        # Draw diagonals\n        # first diagonal\n        draw_line(output_grid, x, y, length=None, color=color, direction=(1, -1))\n        draw_line(output_grid, x, y, length=None, color=color, direction=(-1, 1))\n        # second diagonal\n        draw_line(output_grid, x, y, length=None, color=color, direction=(-1, -1))\n        draw_line(output_grid, x, y, length=None, color=color, direction=(1, 1))\n\n    return output_grid\n\ndef generate_input():\n    # Create a grid of random dimensions\n    n = m = np.random.randint(5, 20)\n    grid = np.full((n, m), Color.BLACK, dtype=int)\n\n    # Fill random positions with distinct colors\n    num_colored_pixels = np.random.randint(1, min(n, m))\n    colored_positions = random.sample([(i, j) for i in range(n) for j in range(m)], num_colored_pixels)\n    colors = random.sample(Color.NOT_BLACK, num_colored_pixels)\n\n    for (x, y), color in zip(colored_positions, colors):\n        grid[x, y] = color\n\n    return grid"
}