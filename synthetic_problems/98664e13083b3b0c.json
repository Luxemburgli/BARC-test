{
  "uid": "98664e13083b3b0c",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng15_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          5,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          0
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          0
        ]
      ],
      "output": [
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          0
        ]
      ],
      "output": [
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          0
        ]
      ],
      "output": [
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ]
      ]
    }
  ],
  "code": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# diagonals, color presence, flood fill\n\n# description:\n# In the input, you will see a grid with colored pixels forming multiple diagonal lines intersecting at some points.\n# To make the output, find all the diagonals, and if a colorful pixel is present at any of the intersection points, flood fill the whole diagonal with the color of that pixel intersecting.\n# If multiple diagonals have intersecting pixels of different colors, leave the intersection point unchanged.\n\ndef main(input_grid):\n    # Create an output grid initialized as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    \n    # Identify the dimensions of the input grid\n    rows, cols = input_grid.shape\n\n    # Function to get the diagonals\n    def get_diagonals(grid, direction='both'):\n        diagonals = []\n        for i in range(rows + cols - 1):\n            if direction == 'both' or direction == 'main':\n                diag_main = [grid[i - j, j] for j in range(max(0, i - rows + 1), min(i + 1, cols))]\n                diagonals.append(diag_main)\n                \n            if direction == 'both' or direction == 'anti':\n                diag_anti = [grid[j, i - j] for j in range(max(0, i - cols + 1), min(i + 1, rows))]\n                diagonals.append(diag_anti)\n        return diagonals\n\n    # Get both sets of diagonals\n    diagonals_main = get_diagonals(input_grid, direction='main')\n    diagonals_anti = get_diagonals(input_grid, direction='anti')\n\n    # Process each diagonal for flood fill\n    for diag in diagonals_main + diagonals_anti:\n        color_presence = {}\n        for idx, color in enumerate(diag):\n            if color != Color.BLACK:\n                color_presence[color] = color_presence.get(color, []) + [idx]\n\n        for color, indices in color_presence.items():\n            for idx in indices:\n                flood_fill(output_grid, idx, idx, color, connectivity=4)\n\n    return output_grid\n\ndef generate_input():\n    rows, cols = 10, 10\n    grid = np.full((rows, cols), Color.BLACK)\n\n    # Randomly choose number of diagonals and their colors\n    num_diagonals = np.random.randint(2, min(rows, cols)-1)\n    colors = random.choices(list(Color.NOT_BLACK), k=num_diagonals)\n\n    for i in range(num_diagonals):\n        color = colors[i]\n        diag_type = np.random.choice(['main', 'anti'])\n        \n        # Random starting point based on diagonal type\n        if diag_type == 'main':\n            start_row = np.random.randint(0, rows - 3)\n            start_col = np.random.randint(0, cols - 3)\n            for j in range(min(rows - start_row, cols - start_col)):\n                grid[start_row + j, start_col + j] = color\n        else:\n            start_row = np.random.randint(0, rows - 3)\n            start_col = np.random.randint(3, cols)\n            for j in range(min(start_row + 1, start_col + 1)):\n                grid[start_row - j, start_col - j] = color\n\n    return grid"
}