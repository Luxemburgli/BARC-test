{
  "uid": "4f23c91c6e46104d",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng15_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          1,
          1
        ],
        [
          1,
          1
        ],
        [
          1,
          1
        ],
        [
          1,
          1
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          3,
          0
        ],
        [
          0,
          0,
          0,
          3,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          3,
          3
        ],
        [
          3,
          3
        ],
        [
          3,
          3
        ],
        [
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          5
        ],
        [
          5,
          5
        ],
        [
          5,
          5
        ],
        [
          5,
          5
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0
        ],
        [
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          5
        ],
        [
          1,
          1
        ],
        [
          1,
          1
        ],
        [
          5,
          5
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# Symmetric Expansion, Resizing, Color\n\n# description:\n# In the input, you will see a grid with a small colored pattern anywhere on the grid.\n# The transformation involves expanding this small pattern symmetrically along both the horizontal and vertical axes to create a mirroring effect.\n# To make the output, identify the small pattern, calculate the half-grid size, and expand the pattern using reflection to fill the entire grid.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find non-black area to identify the pattern\n    x, y, w, h = bounding_box(input_grid)\n    pattern = crop(input_grid[x:x+w, y:y+h])\n\n    # Double the pattern size for mirroring\n    new_h, new_w = pattern.shape[0] * 2, pattern.shape[1] * 2\n    output_grid = np.full((new_h, new_w), Color.BLACK)\n\n    # Place original pattern at four quadrants to achieve symmetric expansion\n    output_grid[:pattern.shape[0], :pattern.shape[1]] = pattern  # Top-left\n    output_grid[:pattern.shape[0], pattern.shape[1]:] = np.fliplr(pattern)  # Top-right\n    output_grid[pattern.shape[0]:, :pattern.shape[1]] = np.flipud(pattern)  # Bottom-left\n    output_grid[pattern.shape[0]:, pattern.shape[1]:] = np.flipud(np.fliplr(pattern))  # Bottom-right\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Make a random size grid for the input\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n    \n    # Create a random small pattern with random color\n    pattern_n, pattern_m = np.random.randint(1, n//2), np.random.randint(1, m//2)\n    pattern = random_sprite(pattern_n, pattern_m, density=0.5, color_palette=Color.NOT_BLACK)\n    \n    # Place the pattern randomly in the grid\n    x, y = np.random.randint(0, n-pattern_n), np.random.randint(0, m-pattern_m)\n    blit(grid, pattern, x, y)\n    \n    return grid"
}