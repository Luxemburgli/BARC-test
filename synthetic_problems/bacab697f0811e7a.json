{
  "uid": "bacab697f0811e7a",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng16_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          4,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          5,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          7,
          0,
          0,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          7
        ],
        [
          7,
          7,
          6,
          0,
          5,
          0,
          0
        ],
        [
          0,
          0,
          8,
          2,
          0,
          1,
          0
        ]
      ],
      "output": [
        [
          0,
          7,
          0,
          0,
          0,
          0
        ],
        [
          0,
          7,
          0,
          0,
          0,
          4
        ],
        [
          8,
          6,
          0,
          0,
          5,
          0
        ],
        [
          2,
          0,
          0,
          7,
          0,
          0
        ],
        [
          0,
          5,
          0,
          0,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          7,
          5,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          3,
          6,
          0,
          0,
          6
        ],
        [
          0,
          0,
          0,
          0,
          2,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          4
        ],
        [
          0,
          0,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          1,
          6,
          3,
          6
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          3,
          6,
          5,
          7,
          0,
          2
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          6,
          0,
          0,
          4,
          0,
          0,
          3,
          0
        ],
        [
          0,
          5,
          0,
          1,
          0,
          0,
          0,
          6,
          0
        ],
        [
          0,
          7,
          0,
          6,
          0,
          0,
          2,
          0,
          0
        ],
        [
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          2,
          0,
          6,
          0,
          4,
          0,
          6,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          8,
          0,
          0
        ],
        [
          9,
          0,
          0,
          0,
          0,
          2
        ],
        [
          0,
          5,
          0,
          0,
          0,
          6
        ],
        [
          0,
          0,
          0,
          0,
          6,
          0
        ],
        [
          0,
          0,
          0,
          2,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          6,
          7
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          9,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0,
          2,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          2,
          0,
          0,
          0,
          8,
          0,
          0,
          0
        ],
        [
          6,
          0,
          6,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          1,
          0,
          6,
          2,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          8
        ],
        [
          0,
          7,
          0,
          9,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          7,
          0,
          0,
          4,
          0
        ],
        [
          0,
          0,
          0,
          0,
          4,
          5,
          0
        ],
        [
          0,
          9,
          0,
          3,
          0,
          2,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          9,
          0,
          0,
          0,
          7,
          0
        ],
        [
          0,
          0,
          7,
          2,
          0,
          0
        ],
        [
          3,
          0,
          0,
          0,
          9,
          0
        ],
        [
          0,
          4,
          0,
          0,
          0,
          0
        ],
        [
          2,
          5,
          4,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          8
        ]
      ]
    }
  ],
  "code": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# Rotate patterns\n\n# description:\n# You will see a grid with a pattern marked by colored pixels.\n# This pattern will be rotated 90 degrees clockwise and then placed into an output grid.\n# Colors not part of the pattern will be set to the background color (black).\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Extract the dimensions of the input grid\n    n, m = input_grid.shape\n\n    # Create an output grid initialized with the background color (black)\n    output_grid = np.full((m, n), Color.BLACK, dtype=int)\n\n    # Rotate the pattern 90 degrees clockwise\n    # This can be achieved by transposing the grid and then reversing each row\n    pattern_indices = np.argwhere(input_grid != Color.BLACK)\n\n    for x, y in pattern_indices:\n        new_x = y\n        new_y = n - 1 - x\n        output_grid[new_x, new_y] = input_grid[x, y]\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Define grid dimensions\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n\n    # Create a black grid\n    input_grid = np.full((n, m), Color.BLACK, dtype=int)\n\n    # Define a random color palette excluding black\n    colors = [color for color in Color.NOT_BLACK]\n\n    # Randomly place some patterns using the color palette\n    num_patterns = np.random.randint(5, n * m // 2)\n    \n    # Populate the grid with random colors\n    for _ in range(num_patterns):\n        x = np.random.randint(n)\n        y = np.random.randint(m)\n        input_grid[x, y] = np.random.choice(colors)\n    \n    return input_grid"
}