{
  "uid": "d2ba866fb7ffaac5",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng16_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          6,
          6,
          0,
          0,
          0
        ],
        [
          4,
          0,
          4,
          0,
          6,
          6,
          0,
          4,
          0
        ],
        [
          4,
          1,
          4,
          0,
          0,
          0,
          0,
          4,
          1
        ],
        [
          1,
          4,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          6,
          6,
          0,
          0,
          0
        ],
        [
          4,
          0,
          4,
          0,
          6,
          6,
          4,
          4,
          4
        ],
        [
          4,
          1,
          4,
          0,
          0,
          0,
          4,
          4,
          1
        ],
        [
          1,
          4,
          1,
          0,
          0,
          0,
          1,
          4,
          1
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          1,
          7,
          0,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          9,
          0,
          1,
          1,
          0,
          0
        ],
        [
          0,
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          7,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          7,
          5,
          0,
          3,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          3
        ]
      ],
      "output": [
        [
          0,
          0,
          1,
          7,
          0,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          1,
          9,
          0,
          1,
          1,
          0,
          0
        ],
        [
          0,
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          7,
          5,
          0,
          0,
          0
        ],
        [
          0,
          3,
          0,
          5,
          7,
          5,
          0,
          3,
          0
        ],
        [
          3,
          6,
          0,
          0,
          0,
          0,
          0,
          6,
          3
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          7,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          7,
          1,
          7,
          0,
          0,
          8,
          8,
          0
        ],
        [
          0,
          0,
          7,
          0,
          0,
          0,
          8,
          8,
          0
        ],
        [
          1,
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          0
        ],
        [
          3,
          1,
          0,
          4,
          4,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          7,
          0,
          0,
          0,
          7,
          0,
          0
        ],
        [
          0,
          7,
          1,
          7,
          0,
          7,
          8,
          8,
          0
        ],
        [
          0,
          0,
          7,
          0,
          0,
          0,
          8,
          8,
          0
        ],
        [
          1,
          0,
          0,
          0,
          4,
          0,
          0,
          0,
          1
        ],
        [
          3,
          1,
          0,
          4,
          4,
          4,
          0,
          1,
          3
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          9,
          9,
          0,
          7,
          1,
          0,
          0
        ],
        [
          0,
          1,
          4,
          9,
          0,
          7,
          0,
          0,
          0
        ],
        [
          0,
          0,
          9,
          9,
          0,
          0,
          0,
          6,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6
        ],
        [
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          9,
          9,
          0,
          7,
          1,
          0,
          0
        ],
        [
          0,
          1,
          4,
          9,
          0,
          7,
          0,
          0,
          0
        ],
        [
          1,
          6,
          9,
          9,
          0,
          0,
          0,
          6,
          1
        ],
        [
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6
        ],
        [
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# reflecting objects, mirror symmetry\n\n# description:\n# In the input grid, you will find objects in various colors. One side of the grid is selected randomly (left, right, top, or bottom).\n# Reflect all objects across the selected side such that the grid becomes symmetric about that side. Reflexion should not\n# override any existing colored pixel in the grid; it should only fill in the vacant pixels.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    n, m = input_grid.shape\n    output_grid = np.copy(input_grid)\n\n    sides = [\"left\", \"right\", \"top\", \"bottom\"]\n    chosen_side = np.random.choice(sides)\n\n    if chosen_side == \"left\":\n        for x in range(n):\n            for y in range(m//2):\n                if output_grid[x, y] == Color.BLACK and output_grid[x, m - y - 1] != Color.BLACK:\n                    output_grid[x, y] = output_grid[x, m - y - 1]\n\n    elif chosen_side == \"right\":\n        for x in range(n):\n            for y in range(m//2, m):\n                if output_grid[x, y] == Color.BLACK and output_grid[x, m - y - 1] != Color.BLACK:\n                    output_grid[x, y] = output_grid[x, m - y - 1]\n\n    elif chosen_side == \"top\":\n        for x in range(n//2):\n            for y in range(m):\n                if output_grid[x, y] == Color.BLACK and output_grid[n - x - 1, y] != Color.BLACK:\n                    output_grid[x, y] = output_grid[n - x - 1, y]\n\n    else:  # chosen_side == \"bottom\"\n        for x in range(n//2, n):\n            for y in range(m):\n                if output_grid[x, y] == Color.BLACK and output_grid[n - x - 1, y] != Color.BLACK:\n                    output_grid[x, y] = output_grid[n - x - 1, y]\n\n    return output_grid\n\n\ndef generate_input() -> np.ndarray:\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly place 3 to 5 colorful objects on the grid\n    num_objects = np.random.randint(3, 6)\n    for _ in range(num_objects):\n        obj_size = np.random.randint(2, 4)\n        sprite = random_sprite([obj_size], [obj_size], density=0.5, color_palette=Color.NOT_BLACK, connectivity=8)\n        x, y = random_free_location_for_object(grid, sprite, background=Color.BLACK, border_size=0, padding=1)\n        blit(grid, sprite, x, y, background=Color.BLACK)\n\n    return grid"
}