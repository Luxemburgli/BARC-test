{
  "uid": "46c2d9f38ddd1696",
  "annotations": {
    "example": "ok",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          4,
          4,
          2,
          0,
          9,
          9,
          0,
          2,
          1,
          0,
          0,
          1
        ],
        [
          0,
          4,
          4,
          0,
          2,
          9,
          9,
          9,
          0,
          2,
          1,
          0,
          0,
          1
        ],
        [
          0,
          4,
          4,
          4,
          2,
          9,
          9,
          0,
          9,
          2,
          0,
          1,
          1,
          1
        ],
        [
          0,
          4,
          0,
          0,
          2,
          9,
          0,
          9,
          0,
          2,
          0,
          0,
          0,
          1
        ]
      ],
      "output": [
        [
          1,
          9,
          4,
          4
        ],
        [
          1,
          4,
          4,
          9
        ],
        [
          9,
          4,
          4,
          4
        ],
        [
          0,
          4,
          0,
          9
        ]
      ]
    },
    {
      "input": [
        [
          0,
          4,
          0,
          4,
          2,
          9,
          0,
          9,
          0,
          2,
          0,
          0,
          0,
          1
        ],
        [
          4,
          4,
          4,
          0,
          2,
          9,
          0,
          0,
          0,
          2,
          0,
          1,
          1,
          1
        ],
        [
          4,
          4,
          4,
          4,
          2,
          9,
          9,
          9,
          0,
          2,
          1,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          9,
          9,
          0,
          9,
          2,
          0,
          0,
          1,
          0
        ]
      ],
      "output": [
        [
          0,
          4,
          0,
          4
        ],
        [
          4,
          4,
          4,
          9
        ],
        [
          4,
          4,
          4,
          4
        ],
        [
          9,
          0,
          9,
          9
        ]
      ]
    },
    {
      "input": [
        [
          4,
          0,
          0,
          0,
          2,
          9,
          0,
          9,
          0,
          2,
          0,
          1,
          0,
          1
        ],
        [
          4,
          4,
          0,
          4,
          2,
          9,
          0,
          0,
          9,
          2,
          1,
          0,
          0,
          1
        ],
        [
          4,
          0,
          4,
          4,
          2,
          9,
          0,
          9,
          0,
          2,
          0,
          1,
          0,
          0
        ],
        [
          0,
          0,
          0,
          4,
          2,
          0,
          0,
          9,
          9,
          2,
          1,
          1,
          1,
          0
        ]
      ],
      "output": [
        [
          4,
          9,
          0,
          9
        ],
        [
          4,
          4,
          0,
          4
        ],
        [
          4,
          9,
          4,
          4
        ],
        [
          9,
          9,
          1,
          4
        ]
      ]
    },
    {
      "input": [
        [
          4,
          4,
          0,
          0,
          2,
          9,
          9,
          0,
          9,
          2,
          0,
          1,
          1,
          0
        ],
        [
          4,
          4,
          0,
          4,
          2,
          0,
          9,
          0,
          0,
          2,
          1,
          1,
          1,
          0
        ],
        [
          4,
          0,
          0,
          4,
          2,
          0,
          9,
          9,
          0,
          2,
          0,
          0,
          0,
          1
        ],
        [
          4,
          4,
          0,
          0,
          2,
          9,
          9,
          9,
          9,
          2,
          0,
          0,
          1,
          1
        ]
      ],
      "output": [
        [
          4,
          4,
          9,
          9
        ],
        [
          4,
          4,
          9,
          4
        ],
        [
          4,
          9,
          9,
          4
        ],
        [
          4,
          4,
          9,
          9
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# occlusion, reflection\n\n# description:\n# In the input you will see three regions separated by red horizontal bars. Each region is rectangular and the regions are arranged vertically, so there is a top region, middle region, and a bottom region.\n# The regions display a yellow pattern, a maroon pattern, and a blue pattern from top to bottom.\n# To make the output, you have to copy the blue pattern first, then overlay the left-right reflected maroon pattern over that, and finally overlay the yellow pattern over that as well.\n\ndef main(input_grid):\n    # find the location of the horizontal red bars that separate the three sections\n    red_bars = np.where(input_grid == Color.RED)\n\n    # get the unique y-coordinates of the red bars\n    red_bars_y = np.unique(red_bars[1])\n\n    # get the blue pattern from the bottom section and copy it to make the base of the output grid\n    blue_pattern = input_grid[:, red_bars_y[1]+1:]\n    output_grid = blue_pattern\n    # could also have used blit_sprite here\n    # output_grid = blit_sprite(output_grid, blue_pattern, x=0, y=0)\n\n    # get the maroon pattern from the middle section, reflect it horizontally, and overlay it on output grid\n    maroon_pattern = input_grid[:, red_bars_y[0]+1:red_bars_y[1]]\n    reflected_maroon_pattern = maroon_pattern[:, ::-1]\n    output_grid = np.where(reflected_maroon_pattern, reflected_maroon_pattern, output_grid)\n    # could also have used blit here\n    # output_grid = blit_sprite(output_grid, reflected_maroon_pattern, x=0, y=0)\n\n    # get the yellow pattern from the top section and overlay it on output grid\n    yellow_pattern = input_grid[:, 0:red_bars_y[0]]\n    output_grid = np.where(yellow_pattern, yellow_pattern, output_grid)\n    # could also have used blit here\n    # output_grid = blit_sprite(output_grid, yellow_pattern, x=0, y=0)\n\n    return output_grid\n\ndef generate_input():\n    # make a red divider to be used to separate the three sections\n    red_divider = np.full((4, 1), Color.RED, dtype=int)\n\n    # make a yellow section and scatter yellow pixels in it\n    yellow_section = np.zeros((4, 4), dtype=int)\n    for _ in range(12):\n        x, y = np.random.randint(yellow_section.shape[1]), np.random.randint(yellow_section.shape[0])\n        yellow_section[y, x] = Color.YELLOW\n\n    # make a maroon section and scatter maroon pixels in it\n    maroon_section = np.zeros((4, 4), dtype=int)\n    for _ in range(12):\n        x, y = np.random.randint(maroon_section.shape[1]), np.random.randint(maroon_section.shape[0])\n        maroon_section[y, x] = Color.MAROON\n\n    # make a blue section and scatter blue pixels in it\n    blue_section = np.zeros((4, 4), dtype=int)\n    for _ in range(12):\n        x, y = np.random.randint(blue_section.shape[1]), np.random.randint(blue_section.shape[0])\n        blue_section[y, x] = Color.BLUE\n\n    # concatenate the three sections with the red dividers\n    grid = np.concatenate([yellow_section, red_divider, maroon_section, red_divider, blue_section], axis=1)\n\n    return grid"
}