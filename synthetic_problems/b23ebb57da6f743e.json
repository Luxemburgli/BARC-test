{
  "uid": "b23ebb57da6f743e",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0,
          0,
          0,
          0,
          0
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0,
          0,
          0
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          0
        ]
      ]
    },
    {
      "input": [
        [
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          0
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0
        ]
      ]
    },
    {
      "input": [
        [
          7,
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          7,
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0,
          0,
          0
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          0
        ]
      ]
    },
    {
      "input": [
        [
          5,
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# colors as indicators, incrementing, scaling, positioning\n\n# description:\n# In the input, you will see a row partially filled with pixels of one color.\n# To make the output:\n# 1. Take the input row.\n# 2. Copy it below the original row with twice as many colored pixels added to the sequence if there is space.\n# 3. Repeat until there are half as many rows as there are columns.\n\ndef main(input_grid):\n    # get the color of the row\n    color = np.unique(input_grid[input_grid != Color.BLACK])[0]\n\n    # copy the row from the input grid\n    row = np.copy(input_grid)\n\n    # make the output grid\n    output_grid = np.copy(input_grid)\n\n    # repeat the row on the output grid until there are half as many rows as there are columns\n    num_columns = input_grid.shape[1]\n    max_rows = num_columns // 2\n\n    for _ in range(1, max_rows):\n        # find the rightmost color pixel in the row and add twice as many pixels of the same color to the right if there is space\n        rightmost_color_pixel = np.where(row[0] == color)[0][-1]\n        if rightmost_color_pixel + 2 < num_columns:\n            row[0, rightmost_color_pixel + 1:rightmost_color_pixel + 3] = color\n        \n        # add the row to the output grid\n        output_grid = np.vstack((output_grid, row))\n\n    return output_grid\n\ndef generate_input():\n    # decide the number of columns (even), and ensure at least 2\n    num_columns = np.random.randint(4, 15) * 2\n\n    # decide the color to partially fill the row with\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # make a row with the color partially filled from left to right\n    row = np.zeros((1, num_columns), dtype=int)\n    num_colored_pixels = np.random.randint(1, num_columns // 2 + 1)\n    row[0, :num_colored_pixels] = color\n\n    return row"
}