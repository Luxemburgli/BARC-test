{
  "uid": "8ba1b6533d922a4f",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          5,
          3,
          0,
          5,
          0,
          0,
          0,
          0
        ],
        [
          3,
          8,
          8,
          8,
          0,
          0,
          0,
          0
        ],
        [
          3,
          8,
          0,
          3,
          0,
          0,
          0,
          0
        ],
        [
          5,
          8,
          0,
          3,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          5,
          3,
          3,
          5,
          0,
          0,
          0,
          0
        ],
        [
          3,
          8,
          8,
          8,
          0,
          0,
          0,
          0
        ],
        [
          3,
          8,
          0,
          3,
          0,
          0,
          0,
          0
        ],
        [
          5,
          8,
          3,
          3,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          3,
          0,
          0,
          3,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          0,
          6,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          8,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          3,
          0,
          8,
          8,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          3,
          0,
          0,
          3,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          0,
          6,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          8,
          8,
          0,
          0,
          0,
          0,
          0
        ],
        [
          3,
          6,
          8,
          8,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          6,
          0,
          6,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          9,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          9,
          8,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          6,
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          9,
          9,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          9,
          8,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          1,
          0,
          1,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          1,
          0,
          1,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# patterns, occlusion, symmetry detection\n\n# description:\n# In the input you will see an object that is symmetric along the diagonal axis (top-left to bottom-right), except that some parts have been removed (covered in black pixels).\n# To make the output, fill in the missing parts of the object to make it symmetric along the diagonal axis.\n\ndef main(input_grid):\n    # Create a copy of the input grid to modify\n    output_grid = input_grid.copy()\n\n    # Get the dimensions of the grid\n    n, m = input_grid.shape\n\n    # Ensure the grid is square\n    assert n == m, \"The input grid must be square.\"\n\n    # Iterate over each element above the diagonal\n    for i in range(n):\n        for j in range(i + 1, n):\n            # If the cell is black and its symmetric counterpart is not, fill it with the color of its counterpart\n            if input_grid[i, j] == Color.BLACK and input_grid[j, i] != Color.BLACK:\n                output_grid[i, j] = input_grid[j, i]\n\n            # If the counterpart is black and this cell is not, fill the counterpart with the color of this cell\n            if input_grid[j, i] == Color.BLACK and input_grid[i, j] != Color.BLACK:\n                output_grid[j, i] = input_grid[i, j]\n\n            # Handling both being non-black. Should not happen in well-formed inputs as per problem description\n            if input_grid[i, j] != Color.BLACK and input_grid[j, i] != Color.BLACK:\n                assert input_grid[i, j] == input_grid[j, i], \"The input grid is not properly symmetric.\"\n\n    return output_grid\n\n\ndef generate_input():\n    # Define grid size (between 7 and 10 for some variability)\n    n = m = np.random.randint(7, 11)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Create a random sprite that will be partially symmetric\n    sprite_size = np.random.randint(3, n//2 + 1)\n    sprite = random_sprite(sprite_size, sprite_size, density=0.5, symmetry='horizontal', color_palette=list(Color.NOT_BLACK))\n\n    # Place the sprite symmetrically along the diagonal\n    for i in range(sprite_size):\n        for j in range(sprite_size):\n            grid[i, j] = sprite[i, j]\n            grid[j, i] = sprite[i, j]\n\n    # Randomly remove some parts to create occlusion\n    for i in range(n):\n        for j in range(n):\n            if np.random.random() < 0.2:\n                grid[i, j] = Color.BLACK\n\n    return grid"
}