{
  "uid": "3458278fce8b0664",
  "annotations": {
    "example": "ok",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng0_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          9,
          9
        ],
        [
          9,
          0,
          0,
          9,
          0
        ],
        [
          9,
          9,
          9,
          0,
          9
        ],
        [
          0,
          9,
          9,
          0,
          9
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          9,
          9,
          9,
          0
        ],
        [
          9,
          9,
          0,
          0,
          9
        ],
        [
          1,
          1,
          1,
          1,
          1
        ],
        [
          8,
          0,
          8,
          0,
          8
        ],
        [
          8,
          0,
          8,
          8,
          8
        ],
        [
          8,
          8,
          0,
          8,
          0
        ],
        [
          8,
          8,
          0,
          0,
          0
        ],
        [
          8,
          8,
          8,
          8,
          0
        ],
        [
          8,
          8,
          8,
          0,
          8
        ],
        [
          8,
          8,
          8,
          0,
          8
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          5,
          5
        ],
        [
          5,
          0,
          0,
          5,
          0
        ],
        [
          5,
          5,
          5,
          0,
          5
        ],
        [
          0,
          5,
          5,
          0,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          5,
          5,
          5,
          0
        ],
        [
          5,
          5,
          0,
          0,
          5
        ],
        [
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          9,
          0,
          0,
          0,
          0,
          9,
          9
        ],
        [
          0,
          0,
          0,
          0,
          9,
          9,
          9
        ],
        [
          9,
          0,
          0,
          9,
          9,
          9,
          0
        ],
        [
          9,
          0,
          9,
          9,
          9,
          0,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          8,
          8,
          8,
          8,
          8,
          0,
          8
        ],
        [
          8,
          0,
          8,
          8,
          8,
          8,
          8
        ],
        [
          0,
          0,
          0,
          0,
          8,
          8,
          8
        ],
        [
          8,
          0,
          8,
          0,
          0,
          8,
          8
        ]
      ],
      "output": [
        [
          5,
          0,
          0,
          0,
          0,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          5,
          5,
          5
        ],
        [
          5,
          0,
          0,
          5,
          5,
          5,
          0
        ],
        [
          5,
          0,
          5,
          5,
          5,
          0,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          9,
          0,
          0,
          0,
          0,
          9,
          9,
          0
        ],
        [
          0,
          9,
          0,
          9,
          0,
          9,
          9,
          9
        ],
        [
          9,
          0,
          9,
          9,
          9,
          0,
          0,
          0
        ],
        [
          0,
          0,
          9,
          0,
          0,
          0,
          0,
          9
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          8,
          0,
          8,
          0,
          0,
          8,
          8,
          0
        ],
        [
          8,
          0,
          0,
          0,
          0,
          8,
          8,
          0
        ],
        [
          8,
          0,
          8,
          0,
          0,
          0,
          0,
          0
        ],
        [
          8,
          8,
          0,
          0,
          8,
          8,
          8,
          0
        ]
      ],
      "output": [
        [
          5,
          0,
          0,
          0,
          0,
          5,
          5,
          0
        ],
        [
          0,
          5,
          0,
          5,
          0,
          5,
          5,
          5
        ],
        [
          5,
          0,
          5,
          5,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          5,
          0,
          0,
          0,
          0,
          5
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          9,
          9,
          0,
          9,
          0
        ],
        [
          9,
          0,
          0,
          9,
          9,
          9
        ],
        [
          0,
          0,
          0,
          0,
          9,
          0
        ],
        [
          9,
          0,
          0,
          9,
          0,
          0
        ],
        [
          0,
          9,
          0,
          9,
          9,
          0
        ],
        [
          9,
          9,
          0,
          9,
          9,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          8,
          0,
          8,
          8
        ],
        [
          8,
          8,
          0,
          0,
          0,
          0
        ],
        [
          8,
          0,
          0,
          8,
          0,
          8
        ],
        [
          8,
          0,
          0,
          8,
          8,
          0
        ],
        [
          0,
          0,
          0,
          8,
          0,
          8
        ],
        [
          8,
          0,
          8,
          8,
          8,
          8
        ]
      ],
      "output": [
        [
          0,
          5,
          5,
          0,
          5,
          0
        ],
        [
          5,
          0,
          0,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          0,
          5,
          0
        ],
        [
          5,
          0,
          0,
          5,
          0,
          0
        ],
        [
          0,
          5,
          0,
          5,
          5,
          0
        ],
        [
          5,
          5,
          0,
          5,
          5,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ]
    }
  ],
  "code": "import numpy as np\nfrom typing import *\nfrom common import *\n\n# concepts:\n# boolean logical operations, bitmasks with separator, color mapping\n\n# description:\n# In the input you will see two separated bitmasks (one maroon and one teal) divided by a blue vertical bar.\n# Each bitmask represents an image of specific objects. \n# To make the output map each object from the left bitmask to the right bitmask according to specific color mappings: \n# maroon -> grey, teal -> orange, keeping the output shape the same as the input.\n# Finally, combine the results from the two separated bitmasks using logical AND operation.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the blue vertical bar. Vertical means constant X\n    for x_bar in range(input_grid.shape[0]):\n        if np.all(input_grid[x_bar, :] == Color.BLUE):\n            break\n\n    left_mask = input_grid[:x_bar, :]\n    right_mask = input_grid[x_bar+1:, :]\n\n    # Color mapping\n    color_map = {\n        Color.MAROON: Color.GREY,\n        Color.TEAL: Color.ORANGE\n    }\n\n    mapped_left = np.vectorize(lambda color: color_map.get(color, color))(left_mask)\n    mapped_right = np.vectorize(lambda color: color_map.get(color, color))(right_mask)\n\n    # Perform logical AND on the mapped masks\n    output_grid = np.zeros_like(left_mask)\n    output_grid[(mapped_left == Color.GREY) & (mapped_right == Color.GREY)] = Color.GREY\n    output_grid[(mapped_left == Color.ORANGE) & (mapped_right == Color.ORANGE)] = Color.ORANGE\n\n    # Merge the result into a single grid with a blue separator\n    final_grid = np.concatenate((mapped_left, np.full((1, left_mask.shape[1]), fill_value=Color.BLUE), output_grid), axis=0)\n    \n    return final_grid\n\n\ndef generate_input() -> np.ndarray:\n    # create a pair of equally sized maroon and teal bitmasks\n    width, height = np.random.randint(2, 10), np.random.randint(2, 10)\n\n    left_grid = np.zeros((width, height), dtype=int)\n    right_grid = np.zeros((width, height), dtype=int)\n\n    for x in range(width):\n        for y in range(height):\n            if np.random.choice([True, False]):\n                left_grid[x, y] = Color.MAROON  # maroon objects in the left bitmask\n            if np.random.choice([True, False]):\n                right_grid[x, y] = Color.TEAL    # teal objects in the right bitmask\n    \n    # create a blue vertical bar\n    bar = np.zeros((1, height), dtype=int)\n    bar[0, :] = Color.BLUE\n\n    grid = np.concatenate((left_grid, bar, right_grid), axis=0)\n\n    return grid"
}