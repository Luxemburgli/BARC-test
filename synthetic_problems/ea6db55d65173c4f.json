{
  "uid": "ea6db55d65173c4f",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng15_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          3,
          3,
          3,
          0,
          1,
          0
        ],
        [
          3,
          3,
          3,
          1,
          1,
          1
        ],
        [
          3,
          0,
          3,
          0,
          1,
          0
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0
        ]
      ],
      "output": [
        [
          0,
          1,
          0,
          3,
          3,
          3
        ],
        [
          1,
          1,
          1,
          0,
          3,
          3
        ],
        [
          0,
          1,
          0,
          3,
          3,
          3
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          1,
          0,
          0,
          8,
          0
        ],
        [
          1,
          1,
          1,
          6,
          6,
          6
        ],
        [
          0,
          1,
          0,
          3,
          0,
          3
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0
        ]
      ],
      "output": [
        [
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          0,
          1,
          0,
          3,
          6,
          0
        ],
        [
          1,
          1,
          1,
          0,
          6,
          8
        ],
        [
          0,
          1,
          0,
          3,
          6,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          1,
          1,
          0,
          1,
          0
        ],
        [
          1,
          9,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          1,
          0,
          1,
          0
        ],
        [
          4,
          2,
          4,
          0,
          1,
          1
        ],
        [
          7,
          0,
          7,
          1,
          1,
          1
        ],
        [
          7,
          2,
          7,
          0,
          1,
          1
        ]
      ],
      "output": [
        [
          7,
          7,
          4,
          0,
          1,
          0
        ],
        [
          2,
          0,
          2,
          1,
          9,
          1
        ],
        [
          7,
          7,
          4,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          0,
          1,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          1,
          0,
          1,
          4,
          4
        ],
        [
          1,
          1,
          1,
          0,
          4,
          4
        ],
        [
          0,
          1,
          0,
          1,
          4,
          4
        ],
        [
          0,
          1,
          0,
          2,
          2,
          2
        ],
        [
          1,
          1,
          1,
          2,
          1,
          2
        ],
        [
          0,
          1,
          0,
          2,
          0,
          2
        ]
      ],
      "output": [
        [
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          0,
          1,
          0
        ],
        [
          2,
          2,
          2,
          1,
          0,
          1
        ],
        [
          0,
          1,
          2,
          4,
          4,
          4
        ],
        [
          2,
          2,
          2,
          4,
          4,
          4
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotational symmetry, square sections\n\n# description:\n# In the input grid, you will see colored pixels arranged in different sections.\n# Your task is to generate an output grid that applies a 90-degree clockwise rotation to each section.\n# The section is defined as a square subgrid.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Determine the size of the grid and the section size\n    n, m = input_grid.shape\n    section_size = int(np.sqrt(n * m // (1)))  # assuming sections are perfect squares\n    # Create the output grid\n    output_grid = np.zeros_like(input_grid)\n    \n    # Create the rotated sections\n    for i in range(0, n, section_size):\n        for j in range(0, m, section_size):\n            section = input_grid[i:i+section_size, j:j+section_size]\n            rotated_section = np.rot90(section, -1)\n            output_grid[i:i+section_size, j:j+section_size] = rotated_section\n    \n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Set the section size and the grid size\n    section_size = np.random.choice([2, 3, 4])\n    n_sections = np.random.randint(2, 5)\n    grid_size = section_size * n_sections\n    grid = np.zeros((grid_size, grid_size), dtype=int)\n    \n    # Fill each section with random colors\n    for i in range(0, grid_size, section_size):\n        for j in range(0, grid_size, section_size):\n            section = random_sprite(section_size, section_size, color_palette=list(Color.NOT_BLACK), symmetry=None)\n            blit(grid, section, x=i, y=j)\n    \n    return grid"
}