{
  "uid": "dc8d2c3f264ecd04",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng1_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          9,
          5,
          0,
          0,
          0,
          5,
          6,
          9,
          0
        ],
        [
          3,
          0,
          8,
          5,
          9,
          8,
          1,
          5,
          0,
          0,
          0
        ],
        [
          3,
          3,
          0,
          5,
          9,
          0,
          3,
          5,
          1,
          0,
          9
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          3,
          0,
          5,
          4,
          8,
          3,
          5,
          0,
          1,
          0
        ],
        [
          1,
          0,
          6,
          5,
          0,
          0,
          2,
          5,
          1,
          1,
          1
        ],
        [
          7,
          0,
          9,
          5,
          0,
          0,
          2,
          5,
          0,
          1,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          2,
          0,
          5,
          7,
          6,
          0,
          5,
          0,
          1,
          0
        ],
        [
          0,
          4,
          8,
          5,
          0,
          0,
          0,
          5,
          0,
          2,
          1
        ],
        [
          7,
          0,
          2,
          5,
          1,
          2,
          0,
          5,
          0,
          0,
          1
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          6,
          0,
          0,
          5,
          7,
          3,
          0,
          5,
          8,
          0,
          0
        ],
        [
          9,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          4
        ],
        [
          4,
          3,
          0,
          5,
          8,
          0,
          6,
          5,
          0,
          4,
          3
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          7,
          0,
          5,
          9,
          0,
          7,
          5,
          0,
          9,
          1
        ],
        [
          0,
          0,
          0,
          5,
          6,
          0,
          0,
          5,
          8,
          8,
          0
        ],
        [
          2,
          7,
          6,
          5,
          0,
          0,
          8,
          5,
          6,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          6,
          0,
          3,
          5,
          0,
          1,
          0,
          5,
          9,
          3,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          7,
          7,
          5,
          0,
          1,
          0,
          5,
          2,
          2,
          3
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          1,
          5,
          9,
          0,
          9,
          5,
          7,
          1,
          0
        ],
        [
          0,
          2,
          0,
          5,
          3,
          0,
          0,
          5,
          0,
          8,
          6
        ],
        [
          7,
          9,
          0,
          5,
          2,
          0,
          3,
          5,
          0,
          1,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          9,
          0,
          0,
          5,
          0,
          0,
          0,
          5,
          0,
          6,
          3
        ],
        [
          3,
          0,
          9,
          5,
          6,
          0,
          0,
          5,
          0,
          1,
          0
        ],
        [
          6,
          0,
          0,
          5,
          4,
          4,
          4,
          5,
          3,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          9,
          3,
          5,
          4,
          0,
          8,
          5,
          0,
          1,
          0
        ],
        [
          0,
          9,
          6,
          5,
          0,
          0,
          1,
          5,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          5,
          3,
          0,
          6,
          5,
          0,
          1,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          1,
          0,
          5,
          9,
          0,
          7,
          5,
          2,
          7,
          8
        ],
        [
          1,
          1,
          1,
          5,
          7,
          0,
          7,
          5,
          3,
          4,
          0
        ],
        [
          0,
          1,
          0,
          5,
          1,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          6,
          5,
          4,
          6,
          1,
          5,
          0,
          3,
          1
        ],
        [
          2,
          0,
          0,
          5,
          0,
          4,
          0,
          5,
          2,
          0,
          3
        ],
        [
          8,
          7,
          6,
          5,
          0,
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          0,
          4,
          0,
          5,
          7,
          0,
          7
        ],
        [
          1,
          3,
          0,
          5,
          4,
          0,
          0,
          5,
          9,
          6,
          0
        ],
        [
          0,
          4,
          7,
          5,
          0,
          4,
          8,
          5,
          0,
          6,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          5,
          1,
          1,
          1,
          5,
          1,
          1,
          1
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          5,
          1,
          1,
          1,
          5,
          0,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n\n# concepts:\n# rectangular cells, color guide, pixel manipulation\n\n# description:\n# In the input you will see grey horizontal and vertical bars that divide the grid into nine 3x3 rectangular regions. Each region contains a random pattern of colored pixels.\n# To make the output, locate the region that has the color pattern that forms a cross (one horizontal and one vertical line intersecting in the middle). \n# Reflect this region about the center and color all the other regions using this reflected pattern.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \n    # Extracting divider color\n    divider_colors = [ input_grid[x,y] for x in range(input_grid.shape[0]) for y in range(input_grid.shape[1])\n                      if np.all(input_grid[x,:] == input_grid[x,0]) or np.all(input_grid[:,y] == input_grid[0,y]) ]\n    assert len(set(divider_colors)) == 1, \"There should be exactly one divider color\"\n    divider_color = divider_colors[0]\n      \n    regions = find_connected_components(input_grid, background=divider_color, monochromatic=False)\n    locations = []\n    \n    for region in regions:\n        x, y, w, h = bounding_box(region, background=divider_color)\n        locations.append((x, y, region))\n        \n    grid_of_regions = []\n    for x, y, region in locations:\n        num_left_of_region = len({other_x for other_x, other_y, other_region in locations if other_x < x})\n        num_above_region = len({other_y for other_x, other_y, other_region in locations if other_y < y})\n        grid_of_regions.append((num_left_of_region, num_above_region, region))\n    \n    # Find the region with the cross pattern\n    cross_pattern = np.array([\n        [False, True, False],\n        [True,  True, True],\n        [False, True, False]\n    ])\n    \n    special_region = None\n    for region in regions:\n        region_cropped = crop(region, background=divider_color)\n        check_pattern = (region_cropped != divider_color) & (region_cropped != Color.BLACK)\n        if np.array_equal(check_pattern, cross_pattern):\n            assert special_region is None, \"More than one special region found\"\n            special_region = region_cropped\n    \n    # Reflect the special region about its center\n    reflected_pattern = np.rot90(special_region, 2)\n        \n    # Create the output grid\n    output_grid = np.zeros_like(input_grid)\n    output_grid[input_grid == divider_color] = divider_color  # Retain the dividers\n    \n    # Fill regions with reflected pattern and place dividers back\n    for x, y, region in grid_of_regions:\n        output_grid[region != divider_color] = reflected_pattern[x, y]\n        \n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    \n    divider_color = Color.GRAY\n\n    # make the dividers, which comprise horizontal/vertical bars creating 3x3 cells, with 3 cells in each direction\n    cell_size = 3\n    n_cells = 3\n    divider_size = 1\n    n_dividers = n_cells - 1\n    distance_between_cells = cell_size + divider_size\n    m = cell_size*n_cells + divider_size*n_dividers\n    grid = np.full((m, m), Color.BLACK)\n    for i in range(n_dividers):\n        # horizontal dividers\n        grid[cell_size + i*(cell_size + divider_size), :] = divider_color\n        # vertical dividers\n        grid[:, cell_size + i*(cell_size + divider_size)] = divider_color\n    \n    # Choose one cell to have the cross pattern\n    cross_cell_x, cross_cell_y = np.random.randint(3), np.random.randint(3)\n    \n    # Generate the cross pattern in the chosen cell\n    cross_x_start, cross_y_start = cross_cell_x * distance_between_cells, cross_cell_y * distance_between_cells\n    grid[cross_x_start:cross_x_start + cell_size, cross_y_start + 1] = Color.BLUE\n    grid[cross_x_start + 1, cross_y_start:cross_y_start + cell_size] = Color.BLUE\n    \n    for x in range(3):\n        for y in range(3):\n            if x == cross_cell_x and y == cross_cell_y:\n                continue\n            \n            n_colors = np.random.randint(4, 6)\n\n            # Extract view of the cell\n            cell = grid[x*distance_between_cells : x*distance_between_cells + cell_size,\n                        y*distance_between_cells : y*distance_between_cells + cell_size]\n\n            while np.sum(cell != Color.BLACK) < n_colors:\n                cell_x, cell_y = np.random.randint(cell_size), np.random.randint(cell_size)\n                cell[cell_x, cell_y] = np.random.choice([color for color in Color.ALL_COLORS if color != Color.BLACK and color != divider_color])\n\n    return grid"
}