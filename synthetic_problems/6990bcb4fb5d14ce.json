{
  "uid": "6990bcb4fb5d14ce",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          0
        ]
      ]
    },
    {
      "input": [
        [
          3,
          3,
          3,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          3,
          3,
          3,
          0,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          5,
          5,
          5,
          5,
          5,
          0
        ]
      ],
      "output": [
        [
          5,
          5,
          5,
          5,
          5,
          0
        ],
        [
          5,
          5,
          5,
          5,
          5,
          0
        ]
      ]
    },
    {
      "input": [
        [
          2,
          2,
          2,
          2,
          2,
          2,
          0,
          0
        ]
      ],
      "output": [
        [
          2,
          2,
          2,
          2,
          2,
          2,
          0,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# patterns, reflection, counting, positioning\n\n# description:\n# In the input grid, you will see a row of colored pixels with black pixels filling the rest of the grid.\n# To create the output:\n# 1. Create a new grid that is double the height of the input grid.\n# 2. Copy the input grid to the top half of the new grid.\n# 3. Reflect the row of colored pixels along the x-axis (vertical axis) and position the mirrored row at the bottom of the new grid.\n\ndef main(input_grid):\n    # Get the dimensions of the input grid\n    input_height, input_width = input_grid.shape\n\n    # Create an output grid that is double the height of the input grid\n    output_grid = np.zeros((input_height * 2, input_width), dtype=int)\n\n    # Copy the input grid to the top half of the new grid\n    output_grid[:input_height, :] = input_grid\n\n    # Reflect the input grid along the x-axis and copy it to the bottom half of the new grid\n    output_grid[input_height:, :] = input_grid[::-1, :]\n\n    return output_grid\n\ndef generate_input():\n    # Decide the width of the row\n    width = np.random.randint(4, 10)\n\n    # Decide the height of the grid\n    height = np.random.randint(1, 3)\n\n    # Create an input grid with black background\n    grid = np.zeros((height, width), dtype=int)\n\n    # Decide the color to fill the row with\n    color = random.choice(list(Color.NOT_BLACK))\n\n    # Randomly determine the number of colored pixels to fill in the row\n    num_colored_pixels = np.random.randint(1, width + 1)\n\n    # Fill the row with colored pixels from left to right\n    grid[0, :num_colored_pixels] = color\n\n    return grid"
}