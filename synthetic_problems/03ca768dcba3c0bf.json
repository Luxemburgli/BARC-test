{
  "uid": "03ca768dcba3c0bf",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng15_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7
        ],
        [
          0,
          0,
          0,
          0,
          7,
          7,
          7
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          1,
          1,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          3,
          3,
          0
        ],
        [
          0,
          0,
          3,
          3,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          3,
          3,
          0
        ],
        [
          0,
          0,
          3,
          3,
          0
        ],
        [
          0,
          0,
          3,
          3,
          0
        ],
        [
          0,
          0,
          3,
          3,
          0
        ],
        [
          0,
          0,
          3,
          3,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          1,
          1,
          1,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# Pixel duplication, directional traversal\n\n# description:\n# In the input, you will see a grid with pixels from one color forming a contiguous solid block.\n# To make the output, start from the leftmost non-background pixel of the block, move to the right and duplicate the pixels in subsequent columns until the end of the block is reached.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Create a copy of the input grid to modify\n    output_grid = np.copy(input_grid)\n    \n    # Find the color of the contiguous solid block\n    block_color = None\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i, j] != Color.BLACK:\n                block_color = input_grid[i, j]\n                break\n        if block_color is not None:\n            break\n            \n    assert block_color is not None, \"No block color found\"\n    \n    # Find the leftmost and rightmost columns of the block\n    leftmost_col = None\n    rightmost_col = None\n    for j in range(input_grid.shape[1]):\n        if np.any(input_grid[:, j] == block_color):\n            if leftmost_col is None:\n                leftmost_col = j\n            rightmost_col = j\n            \n    assert leftmost_col is not None and rightmost_col is not None, \"No block columns found\"\n    \n    # Duplicate the pixels in subsequent columns\n    for j in range(leftmost_col, rightmost_col + 1):\n        for i in range(input_grid.shape[0]):\n            if input_grid[i, j] == block_color:\n                output_grid[:, j] = block_color\n                \n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Decide the size of the grid\n    width, height = np.random.randint(5, 10), np.random.randint(5, 10)\n    \n    # Create a black grid\n    grid = np.zeros((width, height), dtype=int)\n    \n    # Choose the color of the block\n    block_color = np.random.choice(Color.NOT_BLACK)\n    \n    # Define the size and position of the block\n    block_width = np.random.randint(2, width // 2 + 1)\n    block_height = np.random.randint(2, height // 2 + 1)\n    start_row = np.random.randint(0, width - block_width + 1)\n    start_col = np.random.randint(0, height - block_height + 1)\n    \n    # Fill the block with the chosen color\n    grid[start_row:start_row + block_height, start_col:start_col + block_width] = block_color\n    \n    return grid"
}