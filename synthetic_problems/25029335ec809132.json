{
  "uid": "25029335ec809132",
  "annotations": {
    "example": "bad",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          6,
          1,
          8,
          0,
          9
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          5,
          0,
          0,
          0,
          0,
          5,
          1
        ]
      ],
      "output": [
        [
          0,
          0,
          6,
          6,
          1,
          8,
          9,
          9
        ],
        [
          1,
          0,
          0,
          6,
          1,
          8,
          0,
          9
        ],
        [
          1,
          1,
          0,
          0,
          0,
          0,
          5,
          5
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          5
        ],
        [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          5,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          5,
          0,
          0,
          0,
          0,
          5,
          1
        ],
        [
          1,
          5,
          5,
          0,
          0,
          5,
          5,
          1
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          8,
          0,
          0
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0,
          8
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0,
          7
        ],
        [
          6,
          0,
          0,
          0,
          8,
          0,
          3
        ]
      ],
      "output": [
        [
          7,
          0,
          0,
          8,
          8,
          8,
          8
        ],
        [
          7,
          7,
          0,
          0,
          8,
          8,
          8
        ],
        [
          7,
          7,
          0,
          0,
          0,
          0,
          8
        ],
        [
          7,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          7,
          7,
          0,
          0,
          0,
          0,
          7
        ],
        [
          7,
          7,
          0,
          0,
          8,
          7,
          7
        ],
        [
          6,
          6,
          0,
          8,
          8,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          7,
          1,
          4,
          5,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          6,
          0,
          9,
          2,
          8,
          0,
          7,
          0,
          1
        ]
      ],
      "output": [
        [
          0,
          0,
          7,
          7,
          1,
          4,
          5,
          5,
          0
        ],
        [
          0,
          0,
          0,
          7,
          1,
          4,
          5,
          0,
          0
        ],
        [
          8,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3
        ],
        [
          8,
          8,
          0,
          0,
          0,
          0,
          0,
          3,
          3
        ],
        [
          5,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3
        ],
        [
          5,
          5,
          9,
          2,
          8,
          0,
          7,
          0,
          1
        ],
        [
          6,
          9,
          9,
          2,
          8,
          7,
          7,
          1,
          1
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          2,
          1,
          6,
          0,
          0,
          1,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          9
        ],
        [
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6
        ],
        [
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6
        ],
        [
          9,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6
        ],
        [
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          2,
          9
        ]
      ],
      "output": [
        [
          0,
          2,
          2,
          1,
          6,
          6,
          1,
          1,
          1
        ],
        [
          6,
          0,
          2,
          1,
          6,
          0,
          0,
          1,
          9
        ],
        [
          6,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          6
        ],
        [
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          6
        ],
        [
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          6
        ],
        [
          9,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          6
        ],
        [
          9,
          9,
          0,
          0,
          0,
          0,
          0,
          6,
          6
        ],
        [
          9,
          0,
          1,
          0,
          0,
          0,
          0,
          2,
          6
        ],
        [
          0,
          1,
          1,
          1,
          0,
          0,
          2,
          2,
          9
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# borders, growing, pixel manipulation\n\n# description:\n# In the input, you will see a black grid with random colored pixels along the border.\n# For the output, expand the border colored pixels inward by one pixel so that they stop just before they collide.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    n, m = input_grid.shape\n    output_grid = input_grid.copy()\n\n    border_coords = [\n        (x, 0) for x in range(n)\n    ] + [\n        (x, m-1) for x in range(n)\n    ] + [\n        (0, y) for y in range(m)\n    ] + [\n        (n-1, y) for y in range(m)\n    ]\n\n    # Create a temporary copy for modifications to avoid conflicts\n    temp_grid = output_grid.copy()\n    \n    for x, y in border_coords:\n        if output_grid[x, y] != Color.BLACK:\n            color = output_grid[x, y]\n            if x > 0 and output_grid[x - 1, y] == Color.BLACK:\n                temp_grid[x - 1, y] = color\n            if x < n - 1 and output_grid[x + 1, y] == Color.BLACK:\n                temp_grid[x + 1, y] = color\n            if y > 0 and output_grid[x, y - 1] == Color.BLACK:\n                temp_grid[x, y - 1] = color\n            if y < m - 1 and output_grid[x, y + 1] == Color.BLACK:\n                temp_grid[x, y + 1] = color\n\n    return temp_grid\n\ndef generate_input() -> np.ndarray:\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    border_coords = [\n        (x, 0) for x in range(n)\n    ] + [\n        (x, m-1) for x in range(n)\n    ] + [\n        (0, y) for y in range(m)\n    ] + [\n        (n-1, y) for y in range(m)\n    ]\n    \n    num_colors = np.random.randint(1, len(Color.NOT_BLACK) + 1)\n    colors = random.sample(list(Color.NOT_BLACK), num_colors)\n    \n    for x, y in border_coords:\n        if np.random.rand() > 0.6:\n            grid[x, y] = random.choice(colors)\n\n    return grid"
}